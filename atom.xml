<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>beanbroker blog</title>
  
  <subtitle>끝없는 공부</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-09T12:15:52.126Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>beanbroker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java8 default method</title>
    <link href="http://yoursite.com/2019/11/09/Java/Java8_default_method/"/>
    <id>http://yoursite.com/2019/11/09/Java/Java8_default_method/</id>
    <published>2019-11-09T12:30:00.000Z</published>
    <updated>2019-11-09T12:15:52.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-default-method"><a href="#Java-default-method" class="headerlink" title="Java default method"></a>Java default method</h1><p>해당 글은<br><a href="http://book.interpark.com/product/BookDisplay.do?_method=detail&amp;sc.prdNo=312915546&amp;gclid=CjwKCAiA5JnuBRA-EiwA-0ggPf6YNFuNagNQ_hcc550NLsYURaYXUo5zRptwEdMxaBRqslZcR74k5xoCRK0QAvD_BwE" rel="external nofollow noopener noreferrer" target="_blank">자바8 인 액션</a> 의 내용을 포함하고 있습니다.</p><ul><li>전통 자바에선 인터페이스와 관련 메서드는 항상 함께한다.</li><li>Java 7 -&gt; 8로 올라가면서 문제가 발생하지 않을가? <ul><li>자바 List 인터페이스의 특정 method가 변경되면 기존 List 인터페이스를 구현한 모든 컬렉션프레임워크의 모든 클래스를 고쳐야 한다는 것이다.</li></ul></li></ul><blockquote><p>자바 8은 이를 어떻게 해결하였는가?</p></blockquote><ul><li>인터페이스의 기본 구현을 제공할수 있도록 default method 제공</li></ul><p>기존 인터페이스를 쓰던 클래스들은 디폴트 메서드를 통해 기존 코드를 수정 하지 않고 인터페이스들을 바꿀 수 있다.</p><p>대표적인 예를 찾아보자</p><p>거의 모든 서비스 비지니스로직은 컬랙션프레임워크를 많이 쓰게 된다 생각한다. 자바8하면 떠오르는 stream!!!!</p><p>아래의 예시를 보자</p><blockquote><p>Collection interface</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a sequential &#123;<span class="doctag">@code</span> Stream&#125; with this collection as its source.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method should be overridden when the &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment">     * method cannot return a spliterator that is &#123;<span class="doctag">@code</span> IMMUTABLE&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> CONCURRENT&#125;, or &lt;em&gt;late-binding&lt;/em&gt;. (See &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment">     * for details.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * The default implementation creates a sequential &#123;<span class="doctag">@code</span> Stream&#125; from the</span></span><br><span class="line"><span class="comment">     * collection's &#123;<span class="doctag">@code</span> Spliterator&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a sequential &#123;<span class="doctag">@code</span> Stream&#125; over the elements in this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a possibly parallel &#123;<span class="doctag">@code</span> Stream&#125; with this collection as its</span></span><br><span class="line"><span class="comment">     * source.  It is allowable for this method to return a sequential stream.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method should be overridden when the &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment">     * method cannot return a spliterator that is &#123;<span class="doctag">@code</span> IMMUTABLE&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> CONCURRENT&#125;, or &lt;em&gt;late-binding&lt;/em&gt;. (See &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment">     * for details.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * The default implementation creates a parallel &#123;<span class="doctag">@code</span> Stream&#125; from the</span></span><br><span class="line"><span class="comment">     * collection's &#123;<span class="doctag">@code</span> Spliterator&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a possibly parallel &#123;<span class="doctag">@code</span> Stream&#125; over the elements in this</span></span><br><span class="line"><span class="comment">     * collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">parallelStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>디폴트 메서드가 있음으로 과거와 달리 추가된 메소드를 모든 클래스가에서 새로 정의해야하는 일을 사라지게 되었다.</p><h2 id="주의점"><a href="#주의점" class="headerlink" title="주의점"></a>주의점</h2><blockquote><p>DoSomethingFirst interface<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DoSomethingFirst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Do something from first"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>DoSomethingSecond interface<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DoSomethingSecond</span> <span class="keyword">extends</span> <span class="title">DoSomethingFirst</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Do something from second"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>DoSomething class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoSomething</span> <span class="keyword">implements</span> <span class="title">DoSomethingFirst</span>, <span class="title">DoSomethingSecond</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> DoSomething().doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>무엇이 호출될가?<br>정답은 Do something from second</p><p>규칙을 알자!</p><ol><li>클래스가 항상 최우선. 클래스는 슈퍼클래스에서 정의한 메서드가 디폴트 메서드보다 우선이다.</li><li>1번 규칙 이외 상황에선 서브인터페이스가 이긴다. 즉 위의 Second가 First를 상속 받는다면 Second가 이긴다.</li><li>여러 인터페이스를 구현하는 클래스가 명시적으로 디폴트 메서드를 오버라이드하고 호출하면 우선순위가 정해진다.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-default-method&quot;&gt;&lt;a href=&quot;#Java-default-method&quot; class=&quot;headerlink&quot; title=&quot;Java default method&quot;&gt;&lt;/a&gt;Java default method&lt;/h1&gt;&lt;p&gt;해당
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="default method" scheme="http://yoursite.com/categories/Java/default-method/"/>
    
      <category term="Java8" scheme="http://yoursite.com/categories/Java/default-method/Java8/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="default method" scheme="http://yoursite.com/tags/default-method/"/>
    
      <category term="Java8" scheme="http://yoursite.com/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>understanding proxy usage in Spring</title>
    <link href="http://yoursite.com/2019/10/12/Spring/understanding_proxy/"/>
    <id>http://yoursite.com/2019/10/12/Spring/understanding_proxy/</id>
    <published>2019-10-12T10:30:00.000Z</published>
    <updated>2019-10-12T11:35:02.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="understanding-proxy-usage-in-Spring"><a href="#understanding-proxy-usage-in-Spring" class="headerlink" title="understanding proxy usage in Spring"></a>understanding proxy usage in Spring</h1><p>자료를 찾고 찾다보니… 좋은글을 발견. </p><p>Only external method calls coming in through the proxy are intercepted. This means that self-invocation, in effect, a method within the target object calling another method of the target object, will not lead to an actual cache interception at runtime even if the invoked method is marked with @Cacheable.</p><p><a href="https://spring.io/blog/2012/05/23/transactions-caching-and-aop-understanding-proxy-usage-in-spring" rel="external nofollow noopener noreferrer" target="_blank">Transactions, Caching and AOP: understanding proxy usage in Spring</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;understanding-proxy-usage-in-Spring&quot;&gt;&lt;a href=&quot;#understanding-proxy-usage-in-Spring&quot; class=&quot;headerlink&quot; title=&quot;understanding proxy us
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Java/Spring/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 10장 예외 - 2</title>
    <link href="http://yoursite.com/2019/10/06/effective_java/effective_10-2/"/>
    <id>http://yoursite.com/2019/10/06/effective_java/effective_10-2/</id>
    <published>2019-10-06T09:00:00.000Z</published>
    <updated>2019-10-06T08:54:34.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Effective-Java-10장-예외-2"><a href="#Effective-Java-10장-예외-2" class="headerlink" title="Effective Java 10장 예외 - 2"></a>Effective Java 10장 예외 - 2</h1><p><a href="http://www.yes24.com/Product/Goods/65551284" rel="external nofollow noopener noreferrer" target="_blank">Effective Java 3/E</a> </p><p>해당 블로그는 Effective 3을 읽고 공부한 내용을 정리한 블로그입니다.</p><h2 id="P396-표준-예외를-사용하라"><a href="#P396-표준-예외를-사용하라" class="headerlink" title="P396 표준 예외를 사용하라"></a>P396 표준 예외를 사용하라</h2><ul><li>Exception, RuntimeException, Throwable, error는 직접 재사용하지 말자. 해당 클래스들은 추상 클래스라 생각하자</li></ul><h2 id="P399-추상화-수준에-맞는-예외를-던지라"><a href="#P399-추상화-수준에-맞는-예외를-던지라" class="headerlink" title="P399 추상화 수준에 맞는 예외를 던지라"></a>P399 추상화 수준에 맞는 예외를 던지라</h2><ul><li>무작정 예외를 전파하는 것보다 예외 번역이 우수한 방법이지만, 그렇다고 남용해서는 안된다.</li></ul><h2 id="P402-메서드가-던지는-모든-예외를-문서화하라"><a href="#P402-메서드가-던지는-모든-예외를-문서화하라" class="headerlink" title="P402 메서드가 던지는 모든 예외를 문서화하라"></a>P402 메서드가 던지는 모든 예외를 문서화하라</h2><ul><li>검사 예외는 항상 별도로 선언하고, 각 예외가 발생하는 상황을 자바독의 @throws 태그를 사용하여 정확히 문서화하자.</li><li>비검사 예외는 메서드 선언의 throws 목록에 넣지말자.</li></ul><h2 id="P404-예외의-상세-메시지에-실패-관련-정보를-담으라"><a href="#P404-예외의-상세-메시지에-실패-관련-정보를-담으라" class="headerlink" title="P404 예외의 상세 메시지에 실패 관련 정보를 담으라"></a>P404 예외의 상세 메시지에 실패 관련 정보를 담으라</h2><h1 id="예외-처리-중요-키워드"><a href="#예외-처리-중요-키워드" class="headerlink" title="예외 처리 중요 키워드"></a>예외 처리 중요 키워드</h1><blockquote><p>중요 키워드</p></blockquote><ul><li>try</li><li>catch</li><li>finally</li><li>throw</li></ul><h2 id="1-try"><a href="#1-try" class="headerlink" title="1. try"></a>1. try</h2><ul><li>코드를 작성하며 아마 Exception이 발생 할 곳을 block 할 때</li><li>try-block은 반드시 catch-block 또는 finally-block이 따라온다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//에러가 발생 할수 있는 코드 블록</span></span><br><span class="line">    <span class="comment">//요즘은 ide에서 알아서 경고를 내줌</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (e: Exception)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-catch"><a href="#2-catch" class="headerlink" title="2. catch"></a>2. catch</h2><ul><li>try block에서 발생한 에러를 핸들링</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (e: Exception)&#123;</span><br><span class="line">    <span class="comment">//try block에서 발생한 에러를 핸들링</span></span><br><span class="line">    <span class="comment">//또는 발생한 예외를 전환해서 throw</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-finally"><a href="#3-finally" class="headerlink" title="3. finally"></a>3. finally</h2><ul><li>try-catch 블록과 연관지어져 있다.</li><li>connection(database, socket, filestream) 을 할때 커넥션을 닫을 때</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//에러가 발생 할수 있는 코드 블록</span></span><br><span class="line">        <span class="comment">//요즘은 ide에서 알아서 경고를 내줌</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> (e: Exception)&#123;</span><br><span class="line">         <span class="comment">//try block에서 발생한 에러를 핸들링</span></span><br><span class="line">        <span class="comment">//또는 발생한 예외를 전환해서 throw</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//try-catch 블록이 끝난 후 진행</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-throw"><a href="#4-throw" class="headerlink" title="4. throw"></a>4. throw</h2><ul><li>말 그대로 예외를 던진다</li></ul><p>정말 말이 안되지만 아래와 같은 코드가 있다 가정해보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"사장님 마표대교는 막혔는데요?"</span>)</span><br><span class="line">    <span class="keyword">throw</span> NullPointerException(<span class="string">"마표대교가 막힘"</span>)</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (e : Exception)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 한강에 다리가 하나냐? 한남대교로 가 &lt;--</span></span><br><span class="line">    <span class="comment">// 2. 또는 정의한 예외를 던짐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Effective-Java-10장-예외-2&quot;&gt;&lt;a href=&quot;#Effective-Java-10장-예외-2&quot; class=&quot;headerlink&quot; title=&quot;Effective Java 10장 예외 - 2&quot;&gt;&lt;/a&gt;Effective Java 
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Java/Kotlin/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 10장 예외 - 1</title>
    <link href="http://yoursite.com/2019/10/06/effective_java/effective_10-1/"/>
    <id>http://yoursite.com/2019/10/06/effective_java/effective_10-1/</id>
    <published>2019-10-06T08:00:00.000Z</published>
    <updated>2019-10-06T07:54:47.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Effective-Java-10장-예외-1"><a href="#Effective-Java-10장-예외-1" class="headerlink" title="Effective Java 10장 예외 - 1"></a>Effective Java 10장 예외 - 1</h1><p><a href="http://www.yes24.com/Product/Goods/65551284" rel="external nofollow noopener noreferrer" target="_blank">Effective Java 3/E</a> </p><p>해당 블로그는 Effective 3을 읽고 공부한 내용을 정리한 블로그입니다.</p><h2 id="P386-예외는-진자-예외-상황에서만-사용하라"><a href="#P386-예외는-진자-예외-상황에서만-사용하라" class="headerlink" title="P386 예외는 진자 예외 상황에서만 사용하라"></a>P386 예외는 진자 예외 상황에서만 사용하라</h2><ul><li>예외는 오직 예외 상황에서만 써야 한다. 절대로 일상적인 제어 흐름용으로 쓰여선 안된다.</li></ul><h2 id="P390-복구할-수-있는-상황에서는-검사-예외를-프로그래밍-오류에는-런타임-예외를-사용하라"><a href="#P390-복구할-수-있는-상황에서는-검사-예외를-프로그래밍-오류에는-런타임-예외를-사용하라" class="headerlink" title="P390 복구할 수 있는 상황에서는 검사 예외를, 프로그래밍 오류에는 런타임 예외를 사용하라"></a>P390 복구할 수 있는 상황에서는 검사 예외를, 프로그래밍 오류에는 런타임 예외를 사용하라</h2><blockquote><p>문제 상황을 알리는 타입(throwable)</p></blockquote><ul><li>검사 예외 : 호출하는 쪽에서 복구를 해야하는 상황이면 검사 예외를 사용</li><li>런타임 예외 : 프로그래밍 오류를 나타낼 때<ul><li>ex : Array?IndexOutOfBoundsException이 발생 즉 전제조건을 만족하지 못할때 발생</li></ul></li><li>에러 : JVM자원 부족, 불변식 깨짐 등 더 이상 수행을 계속할수 상황에 삳용<ul><li>구현하는 비검사 throawable든 모두 RuntimeException의 하위 클래스</li></ul></li></ul><p><img src="https://www.oracleimg.com/technetwork/articles/entarch/javaexceptions-107916.jpg" alt="Java Exception Class Hierarchy" title="Java Exception Class Hierarchy"></p><p><img src="https://www.benchresources.net/wp-content/uploads/2017/02/exception-hierarchy-in-java.png" alt="Java Exception Error" title="Java Exception Error"></p><blockquote><p>Exception - Error 간단 정리</p></blockquote><table><thead><tr><th>Exception</th><th>Error</th></tr></thead><tbody><tr><td>개발자가 프로그래밍상 핸들링 가능하다면</td><td>Error like 메모리관련</td></tr><tr><td>처리 가능</td><td>불가능</td></tr><tr><td>Exception is due to programmatic logic and it is recoverable. Therefore it must be handled using either try-catch block or throws clause</td><td>Error is due to lack of system resources and it is non-recoverable. Therefore it isn’t feasible to handled by programmer</td></tr></tbody></table><blockquote><p>checked - unchecked 간단 정리</p></blockquote><table><thead><tr><th></th><th>checked exception</th><th>unchecked exception</th></tr></thead><tbody><tr><td>처리 여부</td><td>반드시 예외 처리해야함</td><td>명시적인 처리를 강제하지 않음</td></tr><tr><td>확인 시점</td><td>컴파일 단계(실행 전에 알수 있음, ide에서 컴파일시 이미 체크를 다해줌, 아 좋은 세상)</td><td>실행 단계(실행 해야 알수 있음)</td></tr><tr><td>예외 발생시 transaction 처리</td><td>롤백하지 않은</td><td>롤백 함</td></tr><tr><td>대표 예외</td><td>RuntimeException을 제외한 모든 예외 <br> ex) SqlException,</td><td>runtime에 발생하는 예외 <br> RuntimeExceoption 하위의 모든 예외 <br> 널포인터익셉션 <br> IndexOutOfBoundExcepiton</td></tr></tbody></table><h2 id="P393-필요-없는-검사-예외-사용은-피하라"><a href="#P393-필요-없는-검사-예외-사용은-피하라" class="headerlink" title="P393 필요 없는 검사 예외 사용은 피하라"></a>P393 필요 없는 검사 예외 사용은 피하라</h2><ul><li>꼭 필요한 곳에서 사용하면 프로그램의 안전성을 높여주지만, 남용하면 쓰레기(직역…) 가 된다. Api 호출시 예외 상황에서 복수할 방법이 없다면 비검사 예외를 던지자. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Effective-Java-10장-예외-1&quot;&gt;&lt;a href=&quot;#Effective-Java-10장-예외-1&quot; class=&quot;headerlink&quot; title=&quot;Effective Java 10장 예외 - 1&quot;&gt;&lt;/a&gt;Effective Java 
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Java/Kotlin/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Redis Client with Kotlin Spring</title>
    <link href="http://yoursite.com/2019/10/05/Kotlin/spring_redis_client_kotlin/"/>
    <id>http://yoursite.com/2019/10/05/Kotlin/spring_redis_client_kotlin/</id>
    <published>2019-10-05T10:00:00.000Z</published>
    <updated>2019-10-05T08:55:59.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바-Redis-Client"><a href="#자바-Redis-Client" class="headerlink" title="자바 Redis Client"></a>자바 Redis Client</h1><p><a href="https://github.com/xetorthio/jedis" rel="external nofollow noopener noreferrer" target="_blank">jedis github</a> </p><p><a href="https://github.com/lettuce-io/lettuce-core" rel="external nofollow noopener noreferrer" target="_blank">lettuce github</a> </p><p><a href="https://lettuce.io/core/release/reference/" rel="external nofollow noopener noreferrer" target="_blank">lettuce spring</a> </p><p>자바에서 Redis를 쓸 때 대표적으로 2개의 클라이언트가 있다.</p><p>Jedis와 lettuce</p><p>Lettuce - Advanced Java Redis client 라 소개 되어있으며, 비동기를 지원한다. 또한 스프링부트 2.0 위의 버젼부터는 lettuce를 기본적으로 redis client로 사용하고 있다. 즉…. Redis를 사용할 때 lettuce를 쓰자이다.. 물론.. 이미 부트 2.0에서 lettuce를 default로 물고 있으니 자연스럽게 2.0버젼부터는 쓰게 될것이다.</p><blockquote><p>Lettuce is a scalable thread-safe Redis client based on netty and Reactor. Lettuce provides synchronous, asynchronous and reactive APIs to interact with Redis.</p></blockquote><p>2.0 이하 버젼에서 lettuce를 적용해본적은 없으나 지금 테스트 해보는 부분은 부트2.0 이상이다.</p><h1 id="간단-Spring-boot-2-0-redis-설정"><a href="#간단-Spring-boot-2-0-redis-설정" class="headerlink" title="간단 Spring boot 2.0 redis 설정"></a>간단 Spring boot 2.0 redis 설정</h1><p>블로그를 어디 찾다가 보면 무료 redis cloud를 쓸수 있지만 귀찮으므로 내장 redis를 활용해보자.. 상용환경에서는 절대 쓰면 안된다. </p><p>코드는 kotlin으로 작성</p><blockquote><p>EmbeddedRedisConfig<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmbeddedRedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPort: Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> redisServer: RedisServer? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="meta">@Throws</span>(IOException::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">fun</span> <span class="title">redisServer</span>() </span>&#123;</span><br><span class="line">        redisServer = RedisServer(redisPort)</span><br><span class="line">        redisServer!!.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function">fun <span class="title">stopRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (redisServer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            redisServer!!.stop()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-data-redis'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'it.ozimov'</span>, name: <span class="string">'embedded-redis'</span>, version: <span class="string">'0.7.2'</span></span><br></pre></td></tr></table></figure><p>build.gradle추가 </p><h2 id="A-Lettuce-설정"><a href="#A-Lettuce-설정" class="headerlink" title="A - Lettuce 설정"></a>A - Lettuce 설정</h2><p>아래와 같이 default spring redis client인 lettuce설정</p><p>정상적으로 작동함을 확인 할수 있으며 물론 CacheErrorHandler 오버라이드 해서 반드시 더 자세한 에러처리를 해야한다.</p><p>또한 value 시리얼라이져를 왜 잭슨 2로 해야 하는지 고민해야한다. 다른것으로 해보고 테스트 해야하지만 이번 블로그는 이와 해당내용되지 않기 때문에 패스</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisRepositories</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line">class RedisConfig : CachingConfigurerSupport() &#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisHost: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPort: Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPassword: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>()</span><br><span class="line">    <span class="function">fun <span class="title">lettuceConnectionFactory</span><span class="params">()</span>: RedisConnectionFactory </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> LettuceConnectionFactory(redisHost!!, redisPort)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"redisTemplateWithLettuce"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">redisTemplateWithLettuce</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>: RedisTemplate&lt;*, *&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        val template = RedisTemplate&lt;String, Any&gt;()</span><br><span class="line">        template.keySerializer = StringRedisSerializer()</span><br><span class="line">        template.valueSerializer = GenericJackson2JsonRedisSerializer()</span><br><span class="line">        template.hashKeySerializer = StringRedisSerializer()</span><br><span class="line">        template.hashValueSerializer = GenericJackson2JsonRedisSerializer()</span><br><span class="line"></span><br><span class="line">        template.setConnectionFactory(lettuceConnectionFactory())</span><br><span class="line">        template.setEnableTransactionSupport(<span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Jeddis-설정"><a href="#B-Jeddis-설정" class="headerlink" title="B - Jeddis 설정"></a>B - Jeddis 설정</h2><p>아래와 같이 설정하면 에러가 발생한다 왜일가?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisRepositories</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line">class RedisConfig : CachingConfigurerSupport() &#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisHost: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPort: Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPassword: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>()</span><br><span class="line">    <span class="function">fun <span class="title">jedisConnectionFactory</span><span class="params">()</span>: JedisConnectionFactory </span>&#123;</span><br><span class="line"></span><br><span class="line">        val redisStandaloneConfiguration = RedisStandaloneConfiguration(redisHost!!, redisPort)</span><br><span class="line">        redisStandaloneConfiguration.setPassword(redisPassword)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JedisConnectionFactory(redisStandaloneConfiguration)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"redisTemplateWithJedis"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">redisTemplateWithJedis</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>: RedisTemplate&lt;*, *&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        val template = RedisTemplate&lt;String, Any&gt;()</span><br><span class="line">        template.keySerializer = StringRedisSerializer()</span><br><span class="line">        template.valueSerializer = GenericJackson2JsonRedisSerializer()</span><br><span class="line">        template.hashKeySerializer = StringRedisSerializer()</span><br><span class="line">        template.hashValueSerializer = GenericJackson2JsonRedisSerializer()</span><br><span class="line"></span><br><span class="line">        template.setConnectionFactory(jedisConnectionFactory())</span><br><span class="line">        template.setEnableTransactionSupport(<span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;cacheManager&apos; defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]: Unsatisfied dependency expressed through method &apos;cacheManager&apos; parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;jedisConnectionFactory&apos; defined in class path resource [com/beanbroker/sample/config/cache/RedisConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.redis.connection.jedis.JedisConnectionFactory]: Factory method &apos;jedisConnectionFactory&apos; threw exception; nested exception is java.lang.NoClassDefFoundError: redis/clients/jedis/Tuple</span><br></pre></td></tr></table></figure><p>스프링 2.0이상으로 올라오면서 jedis와 관련된 dependency를 추가해주지 않으면 deprecated되었기 때문에 올릴수가 없다. 아래와 같이 build.gradle에 추가하고 사용해야한다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'redis.clients:jedis'</span></span><br></pre></td></tr></table></figure><p>스프리 부트1.5에서 정말 만약에 2.0으로 올렸을 경우 너무나도 많은 설정이 변경되어야 한다. 가능할지는 모르겠지만….</p><p>끝으로 물론 성능 테스트나 다른 테스트를 진행해야 하지만 이미 많은 선배개발자들이 성능관련 테스트를 이미 많이 진행해주었기에 글을 마치며! 사실 예외와 관련된 글을 쓰려고 하였으나 너무나……. 부족하여.. 블로그에 올릴수가 없다…</p><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">code sample github</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바-Redis-Client&quot;&gt;&lt;a href=&quot;#자바-Redis-Client&quot; class=&quot;headerlink&quot; title=&quot;자바 Redis Client&quot;&gt;&lt;/a&gt;자바 Redis Client&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://g
      
    
    </summary>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Kotlin/"/>
    
      <category term="Redis" scheme="http://yoursite.com/categories/Kotlin/Redis/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Kotlin/Redis/Spring/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Redis" scheme="http://yoursite.com/tags/Redis/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Junit @Before vs @BeforeClass</title>
    <link href="http://yoursite.com/2019/10/05/Java/test_after_before/"/>
    <id>http://yoursite.com/2019/10/05/Java/test_after_before/</id>
    <published>2019-10-05T10:00:00.000Z</published>
    <updated>2019-10-06T06:33:04.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Junit-Before-Beforeclass"><a href="#Junit-Before-Beforeclass" class="headerlink" title="Junit Before? Beforeclass?"></a>Junit Before? Beforeclass?</h2><p>테스트 코드를 짜며 (더 잘짜고 싶다… 하..) 짠 테스크 코드에 대한 리뷰를 받았다. 선배 개발자로부터 @Before과 @BeforeClass 차이를 아냐 물어보시기에 저는 ㅠㅠㅠㅠ를 외쳤다. 요즘 항상 좋으신 말을 해주시는 선배 개발자이시다.</p><p>현재 개발하는 환경이 Junit4이지만 해당 블로그는 Junit5로 작성할 예정이다</p><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">code sample github</a> </p><h2 id="Junit4-gt-Junit5"><a href="#Junit4-gt-Junit5" class="headerlink" title="Junit4 -&gt; Junit5"></a>Junit4 -&gt; Junit5</h2><table><thead><tr><th>Junit4</th><th>Junit5</th><th>특징</th></tr></thead><tbody><tr><td>@BeforeClass</td><td>@BeforeAll</td><td><br> - 테스트 클래스의 모든 테스트 메소드가 실행되기 전에 실행 <br>-  static method <br>- 초기화 코드가 들어갈수 있음</td></tr><tr><td>@AfterClass</td><td>@AfterAll</td><td><br> - 테스트 클래스의 모든 테스트 메소드가 종료된 후 실행 <br>-  static method <br>- 코드를 클린업 할수 있음</td></tr><tr><td>@Before</td><td>@BeforeEach</td><td><br> - 테스트 클래스 안의 테스트 메소드가 한번 실행 될때 마다 실행   <br>-  초기화 코드를 재설정 할수 있음 하지만 초기화 처럼 쓰면 테스트시 힘들어짐</td></tr><tr><td>@After</td><td>@AfterEach</td><td><br> -테스트 클래스 안의 테스트 메소드가 한번 실행 될때 마다 실행  <br>- 예를 들어 테스트가 끝나고 롤백해야 할때</td></tr></tbody></table><blockquote><p>이미지 설명</p></blockquote><p><img src="https://i.stack.imgur.com/HKspz.png" alt="실행 순서" title="실행 순서"></p><p>위의 이미지 순서대로 테스트 코드를 작성해보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BeforeAll"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeEach</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"BeforeEach"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterEach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AfterEach"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AfterAll"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCodeOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testCodeOne start "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCodeTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testCodetwo start "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실행결과 아래와 같은 결과를 얻는다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BeforeAll</span><br><span class="line">BeforeEach</span><br><span class="line">testCodeOne start </span><br><span class="line">AfterEach</span><br><span class="line">BeforeEach</span><br><span class="line">testCodetwo start </span><br><span class="line">AfterEach</span><br><span class="line">AfterAll</span><br></pre></td></tr></table></figure></p><p>Junit5에 어노테이션 명이 좀더 정확하게 의미를 알려주는것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Junit-Before-Beforeclass&quot;&gt;&lt;a href=&quot;#Junit-Before-Beforeclass&quot; class=&quot;headerlink&quot; title=&quot;Junit Before? Beforeclass?&quot;&gt;&lt;/a&gt;Junit Before
      
    
    </summary>
    
      <category term="Java" scheme="http://yoursite.com/categories/Java/"/>
    
      <category term="Junit" scheme="http://yoursite.com/categories/Java/Junit/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Junit" scheme="http://yoursite.com/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin, Auth with JWT 2장</title>
    <link href="http://yoursite.com/2019/09/08/Kotlin/kotlin_jwt_spring2/"/>
    <id>http://yoursite.com/2019/09/08/Kotlin/kotlin_jwt_spring2/</id>
    <published>2019-09-08T08:30:00.000Z</published>
    <updated>2019-09-08T08:32:57.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin-Auth-with-JWT-2장"><a href="#Kotlin-Auth-with-JWT-2장" class="headerlink" title="Kotlin, Auth with JWT 2장"></a>Kotlin, Auth with JWT 2장</h1><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 샘플소스 링크</p><p>대충 다만들고 나니.. 순서대로 어떻게 해야할지를 까먹어 모든 소스 첨부</p><h2 id="인터셉터에-토큰-검증-해보기"><a href="#인터셉터에-토큰-검증-해보기" class="headerlink" title="인터셉터에 토큰 검증 해보기"></a>인터셉터에 토큰 검증 해보기</h2><blockquote><p>SampleAuthInterceptor.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAuthInterceptor</span>(</span></span><br><span class="line">        val tokenService: SampleTokenService</span><br><span class="line">) : HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line"></span><br><span class="line">        val HEADER_NAME = <span class="string">"X-token"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> val HEADER_NAME = <span class="string">"X-token"</span></span><br><span class="line"></span><br><span class="line">     <span class="function">override fun <span class="title">preHandle</span><span class="params">(request: HttpServletRequest, response: HttpServletResponse, handler: Any)</span>: Boolean </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler !is HandlerMethod) <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">        val handlerMethod = handler</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!handlerMethod.hasMethodAnnotation(SampleAuthorization::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line"><span class="class">            <span class="title">return</span> <span class="title">true</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="title">val</span> <span class="title">token</span> </span>= request.getHeader(HEADER_NAME)</span><br><span class="line"></span><br><span class="line">        token?.let &#123;</span><br><span class="line">            tokenService.decodeToken(it)</span><br><span class="line">        &#125;?: <span class="keyword">throw</span> RuntimeException(<span class="string">"없으면 앙대유"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>handlerMethod.hasMethodAnnotation(SampleAuthorization::class.java)<br> 해당 메소드에 SampleAuthorization어노테이션이 붙어있는지 없는지?</p></li><li><p>있을경우에는 토큰 검증</p></li><li><p>token없으면 안됨 팅겨버림</p></li></ol><h2 id="어노테이션을-만들어보자"><a href="#어노테이션을-만들어보자" class="headerlink" title="어노테이션을 만들어보자"></a>어노테이션을 만들어보자</h2><p>어노테이션을 만들기전에 아래의 링크 필수 참고</p><p><a href="https://kotlinlang.org/docs/reference/annotations.html" rel="external nofollow noopener noreferrer" target="_blank">kotlin annotation</a> 링크</p><p>ava annotations are 100% compatible with Kotlin ( 기존 자바 하시던 분들은 이해하는데 문제가 전혀 없음 )</p><blockquote><p>SampleAuthorization<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(AnnotationTarget.FUNCTION)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="function">annotation class <span class="title">SampleAuthorization</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        val data: Int = <span class="number">0</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="위의-interceptor를-등록하자"><a href="#위의-interceptor를-등록하자" class="headerlink" title="위의 interceptor를 등록하자"></a>위의 interceptor를 등록하자</h2><blockquote><p>SampleAuthConfig.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAuthConfig</span>(</span></span><br><span class="line">        val tokenService: SampleTokenService</span><br><span class="line">) : WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">addInterceptors</span><span class="params">(registry: InterceptorRegistry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(SampleAuthInterceptor(tokenService))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>InterceptorRegistry에  직접 구현한 SampleAuthInterceptor를 등록 또는 추가</li><li>정상작동</li></ol><h2 id="테스트를-해보자"><a href="#테스트를-해보자" class="headerlink" title="테스트를 해보자"></a>테스트를 해보자</h2><ul><li>예를 들어 토큰이 있어야만 볼수 있는 유저의 정보가 있다고 가정하였을 때 아래와같이 정보를 제공한다</li><li>SampleAuthorization를 붙임으로서 위의 토큰 검증</li></ul><blockquote><p>AuthController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/auth"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthController</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SampleAuthorization</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">testGetInfo</span><span class="params">()</span>: String </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 진행</p><ol><li><p>header 에 토큰이 없을 경우</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-09-08T08:24:31.358+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Internal Server Error"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"없으면 앙대유"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/auth/test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>이상한 토큰이 있을 경우</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-09-08T08:30:51.329+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Internal Server Error"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"The token was expected to have 3 parts, but got 1."</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/auth/test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>정상일 경우<br>success리턴</li></ol><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><ol><li>jwt와 auth를 꼭 스프링 시큐리티 없이도 간단하게 구현 할수 있다.</li><li>스프링 시큐리티는 해도해도 어렵다. 그래서 위처럼 샘플 코드를 만들어보았다.</li><li>에러가 발생시 위처럼 뜨는데 이상하지 않나요? -&gt; 직접 runtimeExeption을 상속받아 자신만의 Exception객체 생성하여 던지고 RestControllerAdvice에서 처리</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kotlin-Auth-with-JWT-2장&quot;&gt;&lt;a href=&quot;#Kotlin-Auth-with-JWT-2장&quot; class=&quot;headerlink&quot; title=&quot;Kotlin, Auth with JWT 2장&quot;&gt;&lt;/a&gt;Kotlin, Auth wit
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Spring/Kotlin/"/>
    
      <category term="JWT" scheme="http://yoursite.com/categories/Spring/Kotlin/JWT/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
      <category term="JWT" scheme="http://yoursite.com/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin, Auth with JWT 1장</title>
    <link href="http://yoursite.com/2019/09/08/Kotlin/kotlin_jwt_spring1/"/>
    <id>http://yoursite.com/2019/09/08/Kotlin/kotlin_jwt_spring1/</id>
    <published>2019-09-08T07:50:00.000Z</published>
    <updated>2019-09-08T08:22:08.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin-Auth-with-JWT-1장"><a href="#Kotlin-Auth-with-JWT-1장" class="headerlink" title="Kotlin, Auth with JWT 1장"></a>Kotlin, Auth with JWT 1장</h1><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 샘플소스 링크</p><h2 id="사전작업"><a href="#사전작업" class="headerlink" title="사전작업"></a>사전작업</h2><blockquote><p>build.gradle</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">"com.auth0:java-jwt:3.8.1"</span>)</span><br></pre></td></tr></table></figure><p>jwt관련 부분 추가!</p><h2 id="우선-토큰을-생성해보자"><a href="#우선-토큰을-생성해보자" class="headerlink" title="우선 토큰을 생성해보자"></a>우선 토큰을 생성해보자</h2><blockquote><p>SampleTokenService.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleTokenService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line"></span><br><span class="line">        val ISSURE = <span class="string">"BEANBROKER"</span></span><br><span class="line">        val SCRET = <span class="string">"1234"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">publish</span><span class="params">(id: Long, authType: String)</span>: String? </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//60 * 60 * 24</span></span><br><span class="line">        val now = LocalDateTime.now()</span><br><span class="line">        val expiredAt = now.plusSeconds(<span class="number">86400</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">"id"</span>, id)</span><br><span class="line">                .withClaim(<span class="string">"authType"</span>, authType)</span><br><span class="line">                .withIssuedAt(Date.from(now.atZone(ZoneId.systemDefault()).toInstant()))</span><br><span class="line">                .withIssuer(ISSURE)</span><br><span class="line">                .withExpiresAt(Date.from(expiredAt.atZone(ZoneId.systemDefault()).toInstant()))</span><br><span class="line">                .sign(Algorithm.HMAC256(SCRET))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>해당 토큰의 만료기간은 하루</li><li>ISSURE: 토큰 발급자</li></ol><blockquote><p>SampleAuthTests.class</p></blockquote><p>테스트코드 짜기 귀찮으니 콘솔로 확인하자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SampleAuthTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> lateinit <span class="keyword">var</span> tokenService: SampleTokenService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function">fun <span class="title">createToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        val token = tokenService.publish(<span class="number">1000</span>, <span class="string">"USER"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        println(token)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과 : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJCRUFOQlJPS0VSIiwiaWQiOjEwMDAsImF1dGhUeXBlIjoiVVNFUiIsImV4cCI6MTU2ODAxNTE1MywiaWF0IjoxNTY3OTI4NzUzfQ.-9_1Cq7Tc19lo3lcNc0G4Y_CjVZDWmoHzWAE7iWNWYM</p><h2 id="토큰을-생성했으니-토큰을-decode해보자"><a href="#토큰을-생성했으니-토큰을-decode해보자" class="headerlink" title="토큰을 생성했으니 토큰을 decode해보자"></a>토큰을 생성했으니 토큰을 decode해보자</h2><blockquote><p>SampleTokenService.class 에 추가</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">decodeToken</span><span class="params">(token : String)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       val jwt = JWT.require(Algorithm.HMAC256(SCRET))</span><br><span class="line">               .withIssuer(ISSURE)</span><br><span class="line">               .build()</span><br><span class="line">               .verify(token)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>위와같이 jwt 생성 및 디코드를 진행해보았다.</p><p>자… 그럼 이걸 서비스 로직에서 쓰일 정도로 올리는 작업을 해보자</p><h2 id="리팩토링을-해보자"><a href="#리팩토링을-해보자" class="headerlink" title="리팩토링을 해보자"></a>리팩토링을 해보자</h2><ul><li>우선 client에게 제공할수 있도록 데이터를 만들어보자</li></ul><blockquote><p>BeanbrokerToken.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanbrokerToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> token: String = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> expireDate: LocalDateTime? = <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>token : 방금 위에서 생성한 토큰<br>expireDate : 만료시간(클라이언트에게 만료시간 전달)</p><blockquote><p>SampleTokenService.class createToken변경</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">createToken</span><span class="params">(id: Long, authType: String)</span>: BeanbrokerToken </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//60 * 60 * 24</span></span><br><span class="line">       val now = LocalDateTime.now()</span><br><span class="line">       val expiredAt = now.plusSeconds(<span class="number">86400</span>)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> BeanbrokerToken().apply &#123;</span><br><span class="line">           <span class="keyword">this</span>.expireDate = expiredAt</span><br><span class="line">           <span class="keyword">this</span>.token = JWT.create()</span><br><span class="line">                   .withClaim(<span class="string">"id"</span>, id)</span><br><span class="line">                   .withClaim(<span class="string">"authType"</span>, authType)</span><br><span class="line">                   .withIssuedAt(Date.from(now.atZone(ZoneId.systemDefault()).toInstant()))</span><br><span class="line">                   .withIssuer(ISSURE)</span><br><span class="line">                   .withExpiresAt(Date.from(expiredAt.atZone(ZoneId.systemDefault()).toInstant()))</span><br><span class="line">                   .sign(Algorithm.HMAC256(SCRET))</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="만약에-위와같이-하고-사용하게-한다면"><a href="#만약에-위와같이-하고-사용하게-한다면" class="headerlink" title="만약에 위와같이 하고 사용하게 한다면?"></a>만약에 위와같이 하고 사용하게 한다면?</h2><p>header에 토큰 정보를 심어 보낸다고 가정하였을때 컨트롤러 단에서 헤더 매번까서 확인하는게 좋을가요…? 아니면 interceptor(AOP)에서 검증하는게 좋을가요?</p><p>라는 고민을 하였을 때 당연히 후자! 해당 부분을 추가해보자 2장에서</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kotlin-Auth-with-JWT-1장&quot;&gt;&lt;a href=&quot;#Kotlin-Auth-with-JWT-1장&quot; class=&quot;headerlink&quot; title=&quot;Kotlin, Auth with JWT 1장&quot;&gt;&lt;/a&gt;Kotlin, Auth wit
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/categories/Spring/Kotlin/"/>
    
      <category term="JWT" scheme="http://yoursite.com/categories/Spring/Kotlin/JWT/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Kotlin" scheme="http://yoursite.com/tags/Kotlin/"/>
    
      <category term="JWT" scheme="http://yoursite.com/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>redis 무료 cloud 사용해보기</title>
    <link href="http://yoursite.com/2019/08/31/etc/redis_cloud/"/>
    <id>http://yoursite.com/2019/08/31/etc/redis_cloud/</id>
    <published>2019-08-31T07:50:00.000Z</published>
    <updated>2019-08-31T08:01:16.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="무료-redis-cloud-사용해보기"><a href="#무료-redis-cloud-사용해보기" class="headerlink" title="무료 redis cloud 사용해보기"></a>무료 redis cloud 사용해보기</h1><p><a href="https://zetawiki.com/wiki/Redis_Cloud_%EB%AC%B4%EB%A3%8C_%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0" rel="external nofollow noopener noreferrer" target="_blank">제타 위키 Redis Cloud 무료 사용해보기 </a></p><h2 id="설치-후-접속할때-redis-cli만-설치하여-사용해보자"><a href="#설치-후-접속할때-redis-cli만-설치하여-사용해보자" class="headerlink" title="설치 후 접속할때 redis-cli만 설치하여 사용해보자"></a>설치 후 접속할때 redis-cli만 설치하여 사용해보자</h2><p>home brew설정 알아서… 블로그에 많이나옴</p><p>레디스cli만 설치하자!</p><blockquote><p>cli는 아래와 같음</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew tap ringohub/redis-cli</span><br><span class="line">brew update &amp;&amp; brew doctor</span><br><span class="line">brew install redis-cli</span><br></pre></td></tr></table></figure><p>설치가 정상적으로 끝난 후</p><blockquote><p>예시</p></blockquote><p>redis-cli -h redis-호스트호스트호스트loud.redislabs.com -p ‘port(포트)’ -a ‘password(비밀번호)’</p><p>redis-cli -h samplehost.com -p 12345 -a ‘password123’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;무료-redis-cloud-사용해보기&quot;&gt;&lt;a href=&quot;#무료-redis-cloud-사용해보기&quot; class=&quot;headerlink&quot; title=&quot;무료 redis cloud 사용해보기&quot;&gt;&lt;/a&gt;무료 redis cloud 사용해보기&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="redis" scheme="http://yoursite.com/categories/redis/"/>
    
      <category term="redis-cli" scheme="http://yoursite.com/categories/redis/redis-cli/"/>
    
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
      <category term="redis-cli" scheme="http://yoursite.com/tags/redis-cli/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin, Querydsl 5장(audit 추가분)</title>
    <link href="http://yoursite.com/2019/08/25/Kotlin/kotlin_queryDsl5/"/>
    <id>http://yoursite.com/2019/08/25/Kotlin/kotlin_queryDsl5/</id>
    <published>2019-08-25T07:50:00.000Z</published>
    <updated>2019-08-25T07:46:25.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin-Querydsl-5장-JPA-Auditing-추가-분"><a href="#Kotlin-Querydsl-5장-JPA-Auditing-추가-분" class="headerlink" title="Kotlin, Querydsl 5장 (JPA Auditing) 추가 분"></a>Kotlin, Querydsl 5장 (JPA Auditing) 추가 분</h1><p><a href="https://beanbroker.github.io/2019/02/13/Kotlin/kotlin_queryDsl2/" rel="external nofollow noopener noreferrer" target="_blank">코틀린 2장 audit </a> 기존 audit 관련 링크</p><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 샘플소스 링크</p><h2 id="기존-코드의-문제점"><a href="#기존-코드의-문제점" class="headerlink" title="기존 코드의 문제점"></a>기존 코드의 문제점</h2><p>아래오 같이 모든 enitiy에 createdAt, updatedAy, etc..등이 모두 붙어있다.. 해당 부분만을 빼보자 코드를 중복할수 없지 아니한가!</p><blockquote><p>기존 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">UserEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"seq"</span>)</span><br><span class="line">    <span class="keyword">var</span> seq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>)</span><br><span class="line">    <span class="keyword">var</span> gender = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_at"</span> , nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>,  columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_at"</span>, columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> updatedAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> updateBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>변경 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line">class UserEntity : BaseEntity() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"seq"</span>)</span><br><span class="line">    <span class="keyword">var</span> seq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>)</span><br><span class="line">    <span class="keyword">var</span> gender = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"user_Id"</span>)</span><br><span class="line">    <span class="keyword">var</span> userId = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>)</span><br><span class="line">    <span class="keyword">var</span> email = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EntityListeners(value = [AuditingEntityListener::class])</span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_by"</span>, length = <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">var</span> createBy: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_at"</span> , nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>,  columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdAt: LocalDateTime? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_at"</span>, columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> updatedAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_by"</span>, length = <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">var</span> updateBy: String? = <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>누구든.. 쉽게 이해가 가능!</p><p>@MappedSuperclass -&gt;  맵핑되는 정보만 제공하고 싶을때 더 자세한 내용은 영어로 된글을 읽으면 이해가 됩니다. </p><p>스프링 시큐리티 없이 권한 부여 및 회원가입 진행해보기 프로젝트를 해당 프로젝트에 이어서 할예정!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kotlin-Querydsl-5장-JPA-Auditing-추가-분&quot;&gt;&lt;a href=&quot;#Kotlin-Querydsl-5장-JPA-Auditing-추가-분&quot; class=&quot;headerlink&quot; title=&quot;Kotlin, Querydsl 5장 
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
      <category term="jpa" scheme="http://yoursite.com/categories/Spring/jpa/"/>
    
      <category term="audit" scheme="http://yoursite.com/categories/Spring/jpa/audit/"/>
    
      <category term="querydsl" scheme="http://yoursite.com/categories/Spring/jpa/audit/querydsl/"/>
    
      <category term="kotlin" scheme="http://yoursite.com/categories/Spring/jpa/audit/querydsl/kotlin/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="jpa" scheme="http://yoursite.com/tags/jpa/"/>
    
      <category term="audit" scheme="http://yoursite.com/tags/audit/"/>
    
      <category term="querydsl" scheme="http://yoursite.com/tags/querydsl/"/>
    
      <category term="kotlin" scheme="http://yoursite.com/tags/kotlin/"/>
    
  </entry>
  
</feed>
