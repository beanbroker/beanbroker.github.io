<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>beanbroker blog</title>
  
  <subtitle>끝없는 공부</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-13T06:37:17.632Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>beanbroker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring boot With Querydsl Java (gradle 5.0 이상)</title>
    <link href="http://yoursite.com/2019/07/13/Java/java_querydsl_gradle5/"/>
    <id>http://yoursite.com/2019/07/13/Java/java_querydsl_gradle5/</id>
    <published>2019-07-13T02:50:00.000Z</published>
    <updated>2019-07-13T06:37:17.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-boot-With-Querydsl"><a href="#Spring-boot-With-Querydsl" class="headerlink" title="Spring boot With Querydsl"></a>Spring boot With Querydsl</h2><p>옛날부터 꼭 올려야 된다 생각하였지만….. 그렇게 하면… 너무 많아서 잠을 잘수가 없다..</p><p><a href="https://beanbroker.github.io/2019/02/10/Kotlin/kotlin_queryDsl1/" rel="external nofollow noopener noreferrer" target="_blank">코틀린 with QueryDsl</a> 과거 코틀린편은 올렸으나 자바로 한 적이 없어서…. 이글을 쓴다.</p><h2 id="1-Why-QueryDsl"><a href="#1-Why-QueryDsl" class="headerlink" title="1. Why QueryDsl"></a>1. Why QueryDsl</h2><ol><li>Type-check가 불가능하다. -&gt; SQL, JPQL은 문자열임</li><li>컴파일 시점에… 알수가 없다.</li><li>쿼리 실행이 어플리케이션에 실행되었을 때 아이고 저런.. 하며 후회한다.</li><li>그럼 어찌해야하느냐!! -&gt; QueryDsl 또는 Jooq를 쓰자</li></ol><blockquote><p>QueryDsl -&gt; 쓰면서 느끼는 점</p></blockquote><ol><li>Sql이 클래스처럼 Type이 있어 <strong>type-safe</strong>하다</li><li><strong>다이나미쿼리</strong>(동적쿼리)를 짜기 편하다.</li><li>Jooq가 QueryDsl보다 편하지만 아직은 대중적이지 않다. 개인적으로 Jooq는 rdb로 통계쿼리 뽑아내는 부분은 짱이다.</li></ol><h2 id="2-바로-실습"><a href="#2-바로-실습" class="headerlink" title="2. 바로 실습"></a>2. 바로 실습</h2><blockquote><p>build.gradle (메이븐일 경우 다른데곳에서 찾아서….하시길..)</p></blockquote><p>대충 아래처럼 추가라고 말했지만.. 이기준은 gradle 5이상에서의 셋팅이다.. 아.. 5버젼에서 처음 셋팅하느라 고생을 ….하였다. 빨리하고 자려고 했는데..</p><blockquote><p>build.gradle</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.1.5.RELEASE'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">    id <span class="string">"com.ewerk.gradle.plugins.querydsl"</span> version <span class="string">"1.0.10"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">중략</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> compile(<span class="string">"com.querydsl:querydsl-jpa"</span>) <span class="comment">// querydsl</span></span><br><span class="line">compile(<span class="string">"com.querydsl:querydsl-apt"</span>) <span class="comment">// querydsl</span></span><br><span class="line">runtimeOnly <span class="string">'mysql:mysql-connector-java'</span></span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">중략</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def querydslSrcDir = <span class="string">'src/main/generated'</span></span><br><span class="line"></span><br><span class="line">querydsl &#123;</span><br><span class="line">    library = <span class="string">"com.querydsl:querydsl-apt"</span></span><br><span class="line">    jpa = <span class="keyword">true</span></span><br><span class="line">    querydslSourcesDir = querydslSrcDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileQuerydsl&#123;</span><br><span class="line">    options.annotationProcessorPath = configurations.querydsl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    querydsl.extendsFrom compileClasspath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [<span class="string">'src/main/java'</span>, querydslSrcDir]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>application.yml</p></blockquote><p>ddl 트루로 하자 구찮다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">    datasource:</span><br><span class="line">        url: jdbc:mysql://localhost:3306/study</span><br><span class="line">        username: root</span><br><span class="line">        password: password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    jpa:</span><br><span class="line">        generate-ddl: true</span><br><span class="line">        hibernate.ddl-auto: create-drop</span><br></pre></td></tr></table></figure><blockquote><p>UserEntity.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">(String userId, String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-gradle-build"><a href="#3-gradle-build" class="headerlink" title="3. gradle build"></a>3. gradle build</h2><p>아래와 같은 QClass가 위에서 명시한 src/main/generate아래에 생성되어진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.querydsl.core.types.PathMetadataFactory.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.dsl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.PathMetadata;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Generated;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.Path;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * QUserEntity is a Querydsl query type for UserEntity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Generated</span>(<span class="string">"com.querydsl.codegen.EntitySerializer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QUserEntity</span> <span class="keyword">extends</span> <span class="title">EntityPathBase</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1472300146L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> QUserEntity userEntity = <span class="keyword">new</span> QUserEntity(<span class="string">"userEntity"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath age = createString(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> NumberPath&lt;Long&gt; id = createNumber(<span class="string">"id"</span>, Long.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath name = createString(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath userId = createString(<span class="string">"userId"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QUserEntity</span><span class="params">(String variable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(UserEntity.class, forVariable(variable));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QUserEntity</span><span class="params">(Path&lt;? extends UserEntity&gt; path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(path.getType(), path.getMetadata());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QUserEntity</span><span class="params">(PathMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(UserEntity.class, metadata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-repository"><a href="#4-repository" class="headerlink" title="4. repository"></a>4. repository</h2><p>아래의 설명을 읽어야하는이유! ( you must )</p><p><strong>you must</strong> first define a fragment interface and an implementation for the custom functionality, as shown in the following example:</p><p><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations</a></p><p>참고하면 좋을 사항<br><a href="https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-boot-With-Querydsl&quot;&gt;&lt;a href=&quot;#Spring-boot-With-Querydsl&quot; class=&quot;headerlink&quot; title=&quot;Spring boot With Querydsl&quot;&gt;&lt;/a&gt;Spring boot
      
    
    </summary>
    
      <category term="Querydsl" scheme="http://yoursite.com/categories/Querydsl/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Querydsl/Spring/"/>
    
    
      <category term="Querydsl" scheme="http://yoursite.com/tags/Querydsl/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker Mysql 인코딩 해결</title>
    <link href="http://yoursite.com/2019/07/07/docekr_encode/"/>
    <id>http://yoursite.com/2019/07/07/docekr_encode/</id>
    <published>2019-07-07T09:50:00.000Z</published>
    <updated>2019-07-07T09:47:10.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-Mysql-인코딩-해결"><a href="#Docker-Mysql-인코딩-해결" class="headerlink" title="Docker Mysql 인코딩 해결"></a>Docker Mysql 인코딩 해결</h2><p>옛날부터 꼭 올려야 된다 생각하였지만..</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>꼭 도커 컨테이너를 실행시 뒤에 char set 설정을 해야 한다. 그렇지 않을 경우 한글 insert시 다깨져서 나온다….</p><h3 id="1-도커-mysql-접속"><a href="#1-도커-mysql-접속" class="headerlink" title="1. 도커 mysql 접속"></a>1. 도커 mysql 접속</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i -t some-mysql bash</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line">패스워드 입력</span><br></pre></td></tr></table></figure><h3 id="2-status-명령어-입력"><a href="#2-status-명령어-입력" class="headerlink" title="2. status 명령어 입력"></a>2. status 명령어 입력</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; status</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.26, for Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:6</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@localhost</span><br><span class="line">SSL:Not in use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:&apos;&apos;</span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:5.7.26 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:Localhost via UNIX socket</span><br><span class="line">Server characterset:utf8mb4</span><br><span class="line">Db     characterset:utf8mb4</span><br><span class="line">Client characterset:latin1</span><br><span class="line">Conn.  characterset:latin1</span><br><span class="line">UNIX socket:/var/run/mysqld/mysqld.sock</span><br><span class="line">Uptime:8 min 27 sec</span><br><span class="line"></span><br><span class="line">Threads: 3  Questions: 53  Slow queries: 0  Opens: 111  Flush tables: 1  Open tables: 104  Queries per second avg: 0.104</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><h3 id="3-뒤에-charset을-붙이지-않고-테스트-진행"><a href="#3-뒤에-charset을-붙이지-않고-테스트-진행" class="headerlink" title="3. 뒤에 charset을 붙이지 않고 테스트 진행"></a>3. 뒤에 charset을 붙이지 않고 테스트 진행</h3><p>docker run -d –name test-mysql -p 3308:3308 -e MYSQL_ROOT_PASSWORD=password mysql:5.7</p><h3 id="위와-차이점을-확인하자"><a href="#위와-차이점을-확인하자" class="headerlink" title="위와 차이점을 확인하자!"></a>위와 차이점을 확인하자!</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.26, for Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:2</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@localhost</span><br><span class="line">SSL:Not in use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:&apos;&apos;</span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:5.7.26 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:Localhost via UNIX socket</span><br><span class="line">Server characterset:latin1</span><br><span class="line">Db     characterset:latin1</span><br><span class="line">Client characterset:latin1</span><br><span class="line">Conn.  characterset:latin1</span><br><span class="line">UNIX socket:/var/run/mysqld/mysqld.sock</span><br><span class="line">Uptime:14 sec</span><br><span class="line"></span><br><span class="line">Threads: 1  Questions: 5  Slow queries: 0  Opens: 105  Flush tables: 1  Open tables: 98  Queries per second avg: 0.357</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><p>끝!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-Mysql-인코딩-해결&quot;&gt;&lt;a href=&quot;#Docker-Mysql-인코딩-해결&quot; class=&quot;headerlink&quot; title=&quot;Docker Mysql 인코딩 해결&quot;&gt;&lt;/a&gt;Docker Mysql 인코딩 해결&lt;/h2&gt;&lt;p&gt;옛날
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
      <category term="mysql" scheme="http://yoursite.com/categories/Docker/mysql/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Back up</title>
    <link href="http://yoursite.com/2019/07/07/back/"/>
    <id>http://yoursite.com/2019/07/07/back/</id>
    <published>2019-07-07T06:50:00.000Z</published>
    <updated>2019-07-07T09:00:01.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-blog-back-up-test"><a href="#Hexo-blog-back-up-test" class="headerlink" title="Hexo blog back up test"></a>Hexo blog back up test</h3><p>블로그를 옮길때 꼭 theme back-up을 해야함을.. 몸으로 느끼며…..u</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo-blog-back-up-test&quot;&gt;&lt;a href=&quot;#Hexo-blog-back-up-test&quot; class=&quot;headerlink&quot; title=&quot;Hexo blog back up test&quot;&gt;&lt;/a&gt;Hexo blog back up te
      
    
    </summary>
    
      <category term="HEXO" scheme="http://yoursite.com/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>CI 3장, Amazon CodeStar</title>
    <link href="http://yoursite.com/2019/06/09/CI/codestar3/"/>
    <id>http://yoursite.com/2019/06/09/CI/codestar3/</id>
    <published>2019-06-09T09:10:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-CodeStar-3장"><a href="#Amazon-CodeStar-3장" class="headerlink" title="Amazon CodeStar 3장"></a>Amazon CodeStar 3장</h1><p><a href="https://beanbroker.github.io/2019/06/09/CI/codestar1/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CodeStar 1장</a> </p><p><a href="https://beanbroker.github.io/2019/06/09/CI/codestar2/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CodeStar 2장</a> </p><p>2장에서 깜빡한 부분이…. 깃이그노어를 추가해야된다는…것을 깜빡…</p><h2 id="STEP-14"><a href="#STEP-14" class="headerlink" title="STEP 14"></a>STEP 14</h2><ul><li>.gitignore 파일 추가</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line"></span><br><span class="line">### STS ###</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line">.sts4-cache</span><br><span class="line"></span><br><span class="line">### IntelliJ IDEA ###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line"></span><br><span class="line">### NetBeans ###</span><br><span class="line">/nbproject/private/</span><br><span class="line">/build/</span><br><span class="line">/nbbuild/</span><br><span class="line">/dist/</span><br><span class="line">/nbdist/</span><br><span class="line">/.nb-gradle/</span><br></pre></td></tr></table></figure><ul><li>깃 이그노어를 추가 후 push하자마자 아래의 사진과 같이 재배포 시작</li><li>커밋 이력이 보이며, 오른쪽에 연속배포가 변화함을 알수 있음</li><li>마스터 브랜치 기준으로 배포가 진행되니 develope branch생성하여 푸쉬하자!</li><li>해당 실습에서 배포 기준은 master로</li></ul><p><img src="/images/codestar/14.png" alt="14"></p><h2 id="STEP-15-마무리"><a href="#STEP-15-마무리" class="headerlink" title="STEP 15 마무리"></a>STEP 15 마무리</h2><blockquote><ol><li>테스트 코드 작성 중요성</li></ol></blockquote><ol><li>강제로 테스트코드에 무조건 fail 하는 코드 생성 후 master brach에 push시 빌드 실패하여 배포 안됨</li><li>이를 통해 사이드이펙트 미리 방지 할수 있으며 테스트 코드를 통한 음… 안정성? 및 안전한 배포 가능</li><li>깃 branch를 직접생성하거나 git-flow를 활용하여! 코드 리뷰를 진행해야 한다.</li></ol><blockquote><ol start="2"><li>codebuild</li></ol></blockquote><ol><li>aws codebuild를 통해 디폴트 환경변수 셋팅 가능</li><li>인증서 추가 가능 등등 다양한 빌드 옵션 추가 가능</li></ol><blockquote><ol start="3"><li>배포 브런치 선택가능</li></ol></blockquote><ol><li>어떠한 브런치 기준으로 커밋이되었을 때 자동으로 배포됨을 설정 가능</li></ol><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>CI의 중요성이나 테스트 코드 및 다양한 codestar 기능을 추가하고 싶으나! CI의 중요성은 이미 훌륭하신 개발자 분들께서 블로그에 올려두셨으니 참고 바람(꼭)</p><p>실제로 진행하면서 버튼 몇번으로 끝나서 무언가 쉽다 느끼지만 이것을 만들기 위한 aws노력에 감탄하며!</p><p>다양한 환경 구성을 통해 CI를 구축하며 노력하는 개발자가 되어야겠음을 반성</p><p>무언가 필요함을 느끼는 것을 전략! 그것을 풀어나가는 것이 전술! ( 개발을 가르쳐준 o효섭 개발자의 말을 따르면… ) - 전략이 중요하고 전술은 풀어과는 과정</p><p>CI을 필요함을 느껴 codestar로…… 다음주에는 travis를 통해 CI를 구축해볼 생각!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-CodeStar-3장&quot;&gt;&lt;a href=&quot;#Amazon-CodeStar-3장&quot; class=&quot;headerlink&quot; title=&quot;Amazon CodeStar 3장&quot;&gt;&lt;/a&gt;Amazon CodeStar 3장&lt;/h1&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Amazon" scheme="http://yoursite.com/categories/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/categories/Amazon/CodeStar/"/>
    
    
      <category term="Amazon" scheme="http://yoursite.com/tags/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/tags/CodeStar/"/>
    
  </entry>
  
  <entry>
    <title>CI 2장, Amazon CodeStar</title>
    <link href="http://yoursite.com/2019/06/09/CI/codestar2/"/>
    <id>http://yoursite.com/2019/06/09/CI/codestar2/</id>
    <published>2019-06-09T08:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-CodeStar-2장"><a href="#Amazon-CodeStar-2장" class="headerlink" title="Amazon CodeStar 2장"></a>Amazon CodeStar 2장</h1><p><a href="https://beanbroker.github.io/2019/06/09/CI/codestar1/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CodeStar 1장</a> 을 보고 오신 분들은 해당 2장을 이어서 나가시면 됩니다</p><p>스템 10으로 시작하는 이유는… 1장에서 이어서 나갔기 때문입니다.</p><h2 id="STEP-10"><a href="#STEP-10" class="headerlink" title="STEP 10"></a>STEP 10</h2><ul><li>1장에서 로그인 하였던 깃헙아이디로 깃헙 로그인을 하게되면 놀랍게도 기본으로 생성된 레포지토리를 확인 할수 있다.</li><li>readme.md파일에서 getting Started전까지만 보고 패스</li><li>해당 프로젝트를 clone 땡겨오자( cli, sourceTree, git kraken 등등)</li></ul><p><img src="/images/codestar/10.png" alt="10"></p><h2 id="STEP-11"><a href="#STEP-11" class="headerlink" title="STEP 11"></a>STEP 11</h2><ul><li>maven프로젝트로 기본 셋팅</li><li>간단한 헬로 컨트롤러와 테스트 코드가 작성되어 있음</li><li>gradle로 변경 가능(pom.xml 지우고, build.gradle 추가하고 등등….)</li></ul><p><img src="/images/codestar/11.png" alt="11"></p><blockquote><p>헬로 컨트롤러</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aws.codestar.projecttemplates.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Basic Spring web service controller that handles all GET requests.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MESSAGE_FORMAT = <span class="string">"Hello %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">helloWorldGet</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"World"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(createResponse(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">helloWorldPost</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"World"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(createResponse(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createResponse</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JSONObject().put(<span class="string">"Output"</span>, String.format(MESSAGE_FORMAT, name)).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>간단한 테스트 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aws.codestar.projecttemplates.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests for &#123;<span class="doctag">@link</span> HelloWorldController&#125;. Modify the tests in order to support your use case as you build your project.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"Tests for HelloWorldController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXPECTED_RESPONSE_VALUE = <span class="string">"Hello AWS CodeStar!"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT_NAME = <span class="string">"AWS CodeStar"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloWorldController controller = <span class="keyword">new</span> HelloWorldController();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializing variables before we run the tests.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@BeforeAll</span> for initializing static variables at the start of the test class execution.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@BeforeEach</span> for initializing variables before each test is run.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use as needed.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * De-initializing variables after we run the tests.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@AfterAll</span> for de-initializing static variables at the end of the test class execution.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@AfterEach</span> for de-initializing variables at the end of each test.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use as needed.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Basic test to verify the result obtained when calling &#123;<span class="doctag">@link</span> HelloWorldController#helloWorldGet&#125; successfully.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"Basic test for GET request"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity responseEntity = controller.helloWorldGet(INPUT_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify the response obtained matches the values we expect.</span></span><br><span class="line">        JSONObject jsonObjectFromResponse = <span class="keyword">new</span> JSONObject(responseEntity.getBody().toString());</span><br><span class="line">        assertEquals(EXPECTED_RESPONSE_VALUE, jsonObjectFromResponse.get(<span class="string">"Output"</span>));</span><br><span class="line">        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Basic test to verify the result obtained when calling &#123;<span class="doctag">@link</span> HelloWorldController#helloWorldPost&#125; successfully.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"Basic test for POST request"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testPostRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity responseEntity = controller.helloWorldPost(INPUT_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify the response obtained matches the values we expect.</span></span><br><span class="line">        JSONObject jsonObjectFromResponse = <span class="keyword">new</span> JSONObject(responseEntity.getBody().toString());</span><br><span class="line">        assertEquals(EXPECTED_RESPONSE_VALUE, jsonObjectFromResponse.get(<span class="string">"Output"</span>));</span><br><span class="line">        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약에 테스트코드가 존재하지 않는다면 CI 도입이 필요하지 않음</p><ul><li>코드를 작성 후 테스틐 코드 없이 배포를 자동으로 맡겨버리게 된다면 사이드이펙트 체크 불가</li><li>테스트 코드가 없다면 수동배포와 별차이가 없음</li></ul><h2 id="STEP-12"><a href="#STEP-12" class="headerlink" title="STEP 12"></a>STEP 12</h2><ul><li>글을 작성하다보니 빌드 및 배포 완료</li></ul><p><img src="/images/codestar/12.png" alt="12"></p><h2 id="STEP-13"><a href="#STEP-13" class="headerlink" title="STEP 13"></a>STEP 13</h2><ul><li>오른쪽 소스, 빌드, 디플로이 시간</li><li>커밋이력 또한 볼수 있음! jira컨플런스랑 연동도 가능합니다. </li></ul><p><img src="/images/codestar/13.png" alt="13"></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>많은 셋팅 없이 ci구축이 가능하며, aws에서 제공해주는 다양한 서비스들을 한번에 올라옴</li><li>3장으로 이어가야…. 할듯….</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-CodeStar-2장&quot;&gt;&lt;a href=&quot;#Amazon-CodeStar-2장&quot; class=&quot;headerlink&quot; title=&quot;Amazon CodeStar 2장&quot;&gt;&lt;/a&gt;Amazon CodeStar 2장&lt;/h1&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Amazon" scheme="http://yoursite.com/categories/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/categories/Amazon/CodeStar/"/>
    
      <category term="CI" scheme="http://yoursite.com/categories/Amazon/CodeStar/CI/"/>
    
    
      <category term="Amazon" scheme="http://yoursite.com/tags/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/tags/CodeStar/"/>
    
      <category term="CI" scheme="http://yoursite.com/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>CI 1장, Amazon CodeStar</title>
    <link href="http://yoursite.com/2019/06/09/CI/codestar1/"/>
    <id>http://yoursite.com/2019/06/09/CI/codestar1/</id>
    <published>2019-06-09T08:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-CodeStar"><a href="#Amazon-CodeStar" class="headerlink" title="Amazon CodeStar"></a>Amazon CodeStar</h1><p>aws 계정을 새로만들었으나.. 메일 인증을 안했던………</p><p>CI를 구축을 위해 이리저리 알아보다가 aws에서 제공해주는 CodeStar를 테스트하였고 아주 훌륭함을 느낌! 2장은 Travis로 간단한 테스트 예정!</p><blockquote><p>CodeStar란?</p></blockquote><p><a href="https://aws.amazon.com/ko/codestar/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CodeStar</a></p><p>AWS CodeStar 사용에 대한 <strong>추가 비용은 없습니다.</strong> 애플리케이션을 개발하고 실행하기 위해 프로비저닝한 AWS 리소스에 대한 비용만 지불하면 됩니다(예: Amazon EC2 인스턴스).</p><p>추가비용이 없습니다!! S3에 파일 업로드되는 비용 또는 ec2인스턴스 등을 쓰는 비용만 지불</p><p>우선 aws무료계정을 만들고, 메일 인증을 꼭하자</p><h2 id="STEP-1"><a href="#STEP-1" class="headerlink" title="STEP 1"></a>STEP 1</h2><ul><li>로그인 후 서비스에서 codestar를 찾은 후 클릭</li><li>프로젝트 시작 클릭</li></ul><p><img src="/images/codestar/1.png" alt="1"></p><h2 id="STEP-2"><a href="#STEP-2" class="headerlink" title="STEP 2"></a>STEP 2</h2><ul><li>권한이 필요함을 알수 있음</li></ul><p><img src="/images/codestar/2.png" alt="2"></p><h2 id="STEP-3"><a href="#STEP-3" class="headerlink" title="STEP 3"></a>STEP 3</h2><ul><li>사람들이 많이 쓰는 다양한 프레임워크가 존재</li><li>우리는 Java Spring 웹 서비스, Elastic Beanstalk선택</li><li>여기서 잠깐 Elastic Beanstalk란? 직접 찾아서 검색</li><li>참고로 코틀린이 없다고 아쉬워 할필요 없음. 프로젝트 생성후 코틀린으로 바꿀수 있음(이미 실험완료)</li></ul><p><img src="/images/codestar/3.png" alt="3"></p><h2 id="STEP-4"><a href="#STEP-4" class="headerlink" title="STEP 4"></a>STEP 4</h2><ul><li>프로젝트 이름 대충 입력 후</li><li>github 클릭</li></ul><p><img src="/images/codestar/4.png" alt="4"></p><h2 id="STEP-5"><a href="#STEP-5" class="headerlink" title="STEP 5"></a>STEP 5</h2><ul><li>깃헙 로그인 후</li><li>레포지토리 이름 설정</li><li>private으로 만들어야한다. ( secret key 노출 가능성 있음)</li></ul><p><img src="/images/codestar/5.png" alt="5"></p><h2 id="STEP-6"><a href="#STEP-6" class="headerlink" title="STEP 6"></a>STEP 6</h2><ul><li>소스는 github에서 관리</li><li>빌드는 aws codebuild에서</li><li>테스트는 코드빌드에서 또한 진행(테스트 코드가 없다면 ci는 필요가 없다 생각)</li><li>배포는 beanstalk에 배포</li><li>모니터링은 cloudwatch에서! (cloudwatch를 쓰는 모든 개발자들에게 insight는 정말 신의 한수)</li></ul><p><img src="/images/codestar/6.png" alt="6"></p><h2 id="STEP-7"><a href="#STEP-7" class="headerlink" title="STEP 7"></a>STEP 7</h2><ul><li>Amazon EC2 Management Console에 로그인하고 키 페어 생성을 선택하여 키 페어를 생성합니다.</li><li>대충 생성 후 키페어 선택 옆에 새로고침 버튼 클릭</li><li>방금 만든 키페어는 어디에도 노출되면안됨!! 절대 안됨( 노출하게 되면 누군가 유럽 진형에서 비트코인 채굴하는 모습을 볼수 있음)</li></ul><p><img src="/images/codestar/7.png" alt="7"></p><h2 id="STEP-8"><a href="#STEP-8" class="headerlink" title="STEP 8"></a>STEP 8</h2><ul><li>다음 버튼 누르면 끝</li></ul><p><img src="/images/codestar/8.png" alt="8"></p><h2 id="STEP-9"><a href="#STEP-9" class="headerlink" title="STEP 9"></a>STEP 9</h2><ul><li>끝 기다리자</li></ul><p><img src="/images/codestar/9.png" alt="9"></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ol><li>자신의 깃헙으로 들어가면 바로 레포지노리가 생성되었음을 알수 있음(빠름)</li><li>처음 프로젝트 빌드하는 동안 오래 걸림(하지만 원래 이게 정상)</li><li>다음 장에서 좀더 심화 과정으로 </li><li>스프링 프로젝트가 디폴트로 메이븐 프로젝트로 되있음…… gradle을 설정할수 있는 부분이 없는데 해당부분은 직접 바꾸며됨(조금 많이 귀찮음.. 기존 프로젝트에 있는 디펜던시 다옮기다가 힘들어 죽을번..)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-CodeStar&quot;&gt;&lt;a href=&quot;#Amazon-CodeStar&quot; class=&quot;headerlink&quot; title=&quot;Amazon CodeStar&quot;&gt;&lt;/a&gt;Amazon CodeStar&lt;/h1&gt;&lt;p&gt;aws 계정을 새로만들었으나.. 
      
    
    </summary>
    
      <category term="Amazon" scheme="http://yoursite.com/categories/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/categories/Amazon/CodeStar/"/>
    
      <category term="CI" scheme="http://yoursite.com/categories/Amazon/CodeStar/CI/"/>
    
    
      <category term="Amazon" scheme="http://yoursite.com/tags/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/tags/CodeStar/"/>
    
      <category term="CI" scheme="http://yoursite.com/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Intellij multi project</title>
    <link href="http://yoursite.com/2019/06/08/intelliJ/multi_project/"/>
    <id>http://yoursite.com/2019/06/08/intelliJ/multi_project/</id>
    <published>2019-06-08T10:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intellij-multi-project"><a href="#Intellij-multi-project" class="headerlink" title="Intellij multi project"></a>Intellij multi project</h1><p>원래는 aws codestar 글을 게시하려 하였으나…. aws계정을 새로 만들고 아직 승인이 다떨어지지 않아서 서비스 생성이 불가하여… 원래부터 하려하였던 인텔리제이 멀티프로젝트 설정방법을 작성합니다.</p><p>인텔리제이를 사용하다보면 이클립스와 다르게 여러개의 프로젝트를 다 따로 띄워서 확인하는 불편함을 누구나 겪었을 것이다. 예를 들어 유저와 관련된 서비스와 쇼핑과 관련된 서비스 등 다양한 도메인 서비스들을 따로따로 보는 부분이 힘들다. 이에 해당 방법은 아주 오래전에 올리려햇으나… 파일을 잃어버림….</p><p>아래와 같이 진행하면 정상적으로 여러개의 모듈 프로젝트를 한 인텔리제이에서 실행 및 코드를 볼수 있다.</p><h2 id="STEP-1"><a href="#STEP-1" class="headerlink" title="STEP 1"></a>STEP 1</h2><p>인텔리제이 실행 후 Create New Project</p><p><img src="/images/intellij/1.png" alt="1"></p><h2 id="STEP-2"><a href="#STEP-2" class="headerlink" title="STEP 2"></a>STEP 2</h2><p>Empty Project 클릭 후 Next 버튼</p><p><img src="/images/intellij/2.png" alt="2"></p><h2 id="STEP-3"><a href="#STEP-3" class="headerlink" title="STEP 3"></a>STEP 3</h2><p>저장 할 위치 선택</p><p><img src="/images/intellij/3.png" alt="3"></p><h2 id="STEP-4"><a href="#STEP-4" class="headerlink" title="STEP 4"></a>STEP 4</h2><p>Modules 클릭 후 -&gt; +버튼 클릭 -&gt; import Module</p><p><img src="/images/intellij/4.png" alt="4"></p><h2 id="STEP-5"><a href="#STEP-5" class="headerlink" title="STEP 5"></a>STEP 5</h2><p>import할 프로젝트로 들어가서</p><ol><li>gradle 프로젝트일 경우 build.gradle</li><li>maven 프로젝트일 경우 pom.xml </li></ol><p>위를 진행하면 아래와 사진이 나오고 OK버튼 클릭</p><p><img src="/images/intellij/5.png" alt="5"></p><h2 id="STEP-6"><a href="#STEP-6" class="headerlink" title="STEP 6"></a>STEP 6</h2><p>프로젝트 2개 추가한 모습</p><p><img src="/images/intellij/6.png" alt="6"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intellij-multi-project&quot;&gt;&lt;a href=&quot;#Intellij-multi-project&quot; class=&quot;headerlink&quot; title=&quot;Intellij multi project&quot;&gt;&lt;/a&gt;Intellij multi proje
      
    
    </summary>
    
      <category term="Intellij" scheme="http://yoursite.com/categories/Intellij/"/>
    
      <category term="multi" scheme="http://yoursite.com/categories/Intellij/multi/"/>
    
    
      <category term="Intellij" scheme="http://yoursite.com/tags/Intellij/"/>
    
      <category term="multi" scheme="http://yoursite.com/tags/multi/"/>
    
  </entry>
  
  <entry>
    <title>Amazon Aurora max_connections</title>
    <link href="http://yoursite.com/2019/06/04/etc/aws_rds_max_connections/"/>
    <id>http://yoursite.com/2019/06/04/etc/aws_rds_max_connections/</id>
    <published>2019-06-04T11:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-Aurora의-instance-type에-따른-max-connections"><a href="#Amazon-Aurora의-instance-type에-따른-max-connections" class="headerlink" title="Amazon Aurora의 instance type에 따른 max_connections"></a>Amazon Aurora의 instance type에 따른 max_connections</h1><p><a href="https://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Performance.html" rel="external nofollow noopener noreferrer" target="_blank">Aws rds max connection</a></p><p>db.t2.small: 45</p><p>db.t2.medium: 90</p><p>db.r3.large: 1000</p><p>db.r3.xlarge: 2000</p><p>db.r3.2xlarge: 3000</p><p>db.r3.4xlarge: 4000</p><p>db.r3.8xlarge: 5000</p><p>db.r4.large: 1000</p><p>db.r4.xlarge: 2000</p><p>db.r4.2xlarge: 3000</p><p>db.r4.4xlarge: 4000</p><p>db.r4.8xlarge: 5000</p><p>db.r4.16xlarge: 6000</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-Aurora의-instance-type에-따른-max-connections&quot;&gt;&lt;a href=&quot;#Amazon-Aurora의-instance-type에-따른-max-connections&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Aurora" scheme="http://yoursite.com/categories/Aurora/"/>
    
      <category term="max_connections" scheme="http://yoursite.com/categories/Aurora/max-connections/"/>
    
    
      <category term="Aurora" scheme="http://yoursite.com/tags/Aurora/"/>
    
      <category term="max_connections" scheme="http://yoursite.com/tags/max-connections/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Proxy 설정 추가본</title>
    <link href="http://yoursite.com/2019/06/02/Server/study_nginx3/"/>
    <id>http://yoursite.com/2019/06/02/Server/study_nginx3/</id>
    <published>2019-06-02T09:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-Proxy-설정-추가본"><a href="#Nginx-Proxy-설정-추가본" class="headerlink" title="Nginx Proxy 설정 추가본"></a>Nginx Proxy 설정 추가본</h1><h2 id="Nginx-Proxy-host주소를-변수에-담아-사용해보자"><a href="#Nginx-Proxy-host주소를-변수에-담아-사용해보자" class="headerlink" title="Nginx Proxy host주소를 변수에 담아 사용해보자"></a>Nginx Proxy host주소를 변수에 담아 사용해보자</h2><p>temp_host에 담아서 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set $temp_host &quot;http://localhost:7077&quot;;</span><br><span class="line">       location / &#123;</span><br><span class="line"></span><br><span class="line">proxy_pass $temp_host;</span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">    #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>위와같이 설정후 nginx 재시작 후 localhost:5000 호출시 정상작동 확인</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>사실 여기까지 오게된 이유는… Nginx를 ELB Reverse Proxy로 사용할때… connection failed가 가끔가다 발생하여 해당 문제 해결을 위해…. 아래의 블로그를 참고하여 진행하였다…</p><p><a href="http://tech.kkung.net/blog/nginx-with-elb/" rel="external nofollow noopener noreferrer" target="_blank">Nginx를 ELB Reverse Proxy로 사용할때 주의 점</a> 이글을 작성해주신분 감사합니다..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx-Proxy-설정-추가본&quot;&gt;&lt;a href=&quot;#Nginx-Proxy-설정-추가본&quot; class=&quot;headerlink&quot; title=&quot;Nginx Proxy 설정 추가본&quot;&gt;&lt;/a&gt;Nginx Proxy 설정 추가본&lt;/h1&gt;&lt;h2 id=&quot;N
      
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
      <category term="Proxy" scheme="http://yoursite.com/categories/Nginx/Proxy/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="Proxy" scheme="http://yoursite.com/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Proxy 설정</title>
    <link href="http://yoursite.com/2019/06/02/Server/study_nginx2/"/>
    <id>http://yoursite.com/2019/06/02/Server/study_nginx2/</id>
    <published>2019-06-02T08:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-Proxy-설정"><a href="#Nginx-Proxy-설정" class="headerlink" title="Nginx Proxy 설정"></a>Nginx Proxy 설정</h1><blockquote><p>Nginx Proxy 설정해보자!</p></blockquote><p>설정전에 간단한 개념정리</p><h2 id="1-what"><a href="#1-what" class="headerlink" title="1. what?"></a>1. what?</h2><p>Proxy 서버란? -&gt; 중계서버(서버로 들어오는 request 중계)</p><p><a href="https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9D%EC%8B%9C_%EC%84%9C%EB%B2%84" rel="external nofollow noopener noreferrer" target="_blank">위키 proxy서버란?</a></p><h2 id="2-why"><a href="#2-why" class="headerlink" title="2. why?"></a>2. why?</h2><ol><li>보안<ul><li>익명의 사용자가 서버에 접근하는 것을 막음</li></ul></li><li><p>속도</p><ul><li>Proxy 서버로 들어오는 요청을 캐싱함</li><li>cache를 저정하기 때문에 동일한 요청이 들어오게 될경우 cache 사용 가능</li><li>서버의 불필요한 자원 낭비 방지</li></ul></li><li><p>접근 우회</p><ul><li>보안적인 이슈로 인해 서버에 접근하지 못할 경우 우회해서 다른 서버들이 사용할수 있게 요청 전달</li></ul></li><li><p>ACL (Proxy Server에 접속 할 수 있는 범위를 설정하는 옵션)</p><ul><li>사이트 접근에 대한 접근 정책을 정의 가능</li></ul></li><li><p>Log/Audit</p></li></ol><h2 id="3-Proxy-실습"><a href="#3-Proxy-실습" class="headerlink" title=" 3. Proxy 실습"></a> 3. Proxy 실습</h2><p>우선 Proxy 설정을 하기전에 로컬에서 기동시킬 간단한 서버가 필요</p><p>각자 취향에 맞게 노드나 파이썬이나 스프링이나 아무거나 상관이 없음</p><blockquote><p>서버 port 7077롤 셋팅한 간단한 hello world</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">getSomething</span><span class="params">()</span>: String </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world! welcome to visit my site"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">test</span><span class="params">()</span>: String </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test test test"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>nginx.conf 파일 변경</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       5000;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line"></span><br><span class="line">               proxy_pass http://localhost:7077;</span><br><span class="line">               proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">           #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ol><li><a href="http://localhost:7077" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:7077</a> 으로 proxy 적용</li><li>proxy_http_version은 HTTP/1.1</li></ol><p>nginx -s reload 실행 후</p><p>localhost:5000접근시 nginx 초기 페이지가 아닌 <em>‘hello world! welcome to visit my site’</em> 노출 확인</p><blockquote><p>location 을 추가해보자</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /test &#123;</span><br><span class="line"></span><br><span class="line">               proxy_pass http://localhost:7077/test;</span><br><span class="line">               proxy_http_version 1.1;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>-&gt; localhost:5000/test로 들어오게 되면 <a href="http://localhost:7077/test" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:7077/test</a> 호출</p><p><em>‘test test test’</em> 문구 정상 노출 확인</p><p>사실   <a href="https://docs.nginx.com/nginx/admin-guide/web-server/web-server/" rel="external nofollow noopener noreferrer" target="_blank">Nginx 공홈</a> 에 너무 좋은 자료가 많다.. 다해보고 싶지만 우선 여기까지</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx-Proxy-설정&quot;&gt;&lt;a href=&quot;#Nginx-Proxy-설정&quot; class=&quot;headerlink&quot; title=&quot;Nginx Proxy 설정&quot;&gt;&lt;/a&gt;Nginx Proxy 설정&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Nginx Pro
      
    
    </summary>
    
      <category term="Nginx" scheme="http://yoursite.com/categories/Nginx/"/>
    
      <category term="Proxy" scheme="http://yoursite.com/categories/Nginx/Proxy/"/>
    
    
      <category term="Nginx" scheme="http://yoursite.com/tags/Nginx/"/>
    
      <category term="Proxy" scheme="http://yoursite.com/tags/Proxy/"/>
    
  </entry>
  
</feed>
