<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>beanbroker blog</title>
  
  <subtitle>끝없는 공부</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-29T05:50:56.198Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>beanbrokere</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NodeJs 생각정리</title>
    <link href="http://yoursite.com/2018/08/29/nodejs/thinknodejs/"/>
    <id>http://yoursite.com/2018/08/29/nodejs/thinknodejs/</id>
    <published>2018-08-29T09:30:00.000Z</published>
    <updated>2018-08-29T05:50:56.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NodeJs-잠깐-생각정리"><a href="#NodeJs-잠깐-생각정리" class="headerlink" title="NodeJs 잠깐 생각정리"></a>NodeJs 잠깐 생각정리</h1><p>항상 멀티쓰레드환경에서 개발을 하다가 node.js를 개발하다보니 궁금점들이 생긴다.</p><p>궁금점?</p><ol><li>싱글스레드다</li><li>was는 멀티스레드 환경! 노드는 어떻게 싱글스레드로 처리를 해야하는가?</li></ol><p>다양한 문서와 혼자 공부를 하면서 느낀점을 간단히 정리하면 아래와 같다</p><h3 id="싱글-스레드-이벤트-루프방식"><a href="#싱글-스레드-이벤트-루프방식" class="headerlink" title="싱글 스레드 - 이벤트 루프방식"></a>싱글 스레드 - 이벤트 루프방식</h3><p>진입점이 하나! 발생한 모든 이벤트들을 줄세워서 처리!</p><p>즉 node.js의 작동원리를 햄버거가게로 생각하면 된다.<br>아래의 조건들이 있다면</p><ol><li>주문하는사람</li><li>주문받는사람 한명 </li><li>패티굽는사람</li></ol><p>주문하는 사람을 유저로 생각하자!<br>주문받는사람 한명이 싱글스레드라 생각한다. 주문(이벤트 발생)이 들어오면 패티굽는사람(백단 스레드)로 이벤트를 넘긴다.</p><p>즉, 수많은! 주문이 들어온다하더라도 이벤트를 줄세우고 주문을 받기만 하면된다.(기본적으로 백단 스레드는 4개, but 환경변수를 통해 늘릴수 있다는 점!)</p><h3 id="좀-더-발전된-방향의-개발을-하려면"><a href="#좀-더-발전된-방향의-개발을-하려면" class="headerlink" title="좀 더 발전된 방향의 개발을 하려면?"></a>좀 더 발전된 방향의 개발을 하려면?</h3><p>서버 개발자라면! IO걱정을 하며 개발을 진행하게 된다. 데이터베이스에 접근할때도 Join을 남발을 하게 되면 IO가 더 커진다. 항상 비용을 생각하며 개발을 진행을 하는 습관을 가져야한다. 보통 하드웨어 성능을 빵빵하게 해서 하면 해결이 되긴하지만.. 그건 너무 비양심적인 행동이라 생각한다…<br>그렇다면! nodeJs로 개발을 진행하게 된다면! 좀더 서비스로직 개선에 관련하여 더 많은 생각을 해야한다 판단이된다. 노력해야할점이다…</p><p>지금까지 느낀점을.. 잠깐 적은….. 글… 더 좋은글을 쓸 수 있는 날까지… </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NodeJs-잠깐-생각정리&quot;&gt;&lt;a href=&quot;#NodeJs-잠깐-생각정리&quot; class=&quot;headerlink&quot; title=&quot;NodeJs 잠깐 생각정리&quot;&gt;&lt;/a&gt;NodeJs 잠깐 생각정리&lt;/h1&gt;&lt;p&gt;항상 멀티쓰레드환경에서 개발을 하다가 n
      
    
    </summary>
    
      <category term="node.js" scheme="http://yoursite.com/categories/node-js/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>RestApi with sequelize 1장</title>
    <link href="http://yoursite.com/2018/08/29/nodejs/restapi1/"/>
    <id>http://yoursite.com/2018/08/29/nodejs/restapi1/</id>
    <published>2018-08-29T09:30:00.000Z</published>
    <updated>2018-08-29T06:55:02.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1장-RestApi-Sequelize"><a href="#1장-RestApi-Sequelize" class="headerlink" title="1장 RestApi, Sequelize"></a>1장 RestApi, Sequelize</h1><p>Sequelize3장에서 끝낸 아래문제를 해결 및<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 서비스로직이 필요하다!</span><br><span class="line">2. 에러핸들러가 없다</span><br><span class="line">3. 통일된 res object가 없다</span><br></pre></td></tr></table></figure></p><p>Sequelize orm과! 좀더restful하게 api를 만들어보자! </p><h1 id="서비스로직이-필요하다"><a href="#서비스로직이-필요하다" class="headerlink" title="서비스로직이 필요하다!"></a>서비스로직이 필요하다!</h1><blockquote><p>셋팅</p></blockquote><ol><li>루트폴더에 service폴더 생성</li><li>service폴더 및에 user폴더 생성(도메인 폴더 생성)</li><li>기존에 쓰던 app.js, /routes/user.js수정</li></ol><blockquote><p>app.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">var createError = require(&apos;http-errors&apos;);</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line"></span><br><span class="line">const indexRouter = require(&apos;./routes/index&apos;);</span><br><span class="line">const usersRouter = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const sequelize = require(&apos;./models&apos;).sequelize;</span><br><span class="line"></span><br><span class="line">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sequelize</span><br><span class="line">    .authenticate()</span><br><span class="line">    .then(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;Connection has been established successfully.&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">        console.error(&apos;Unable to connect to the database:&apos;, err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sequelize.sync();</span><br><span class="line"></span><br><span class="line">// view engine setup</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;jade&apos;);</span><br><span class="line"></span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;));</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, indexRouter);</span><br><span class="line">app.use(&apos;/users&apos;, usersRouter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">    res.status(err.status || 404);</span><br><span class="line">    res.send(&apos;404 not found&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3005, function()&#123;</span><br><span class="line">    console.log(&apos;3005 port connected&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><hr><blockquote><p>/routes/user.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const userCreateService  =  require(&apos;../service/user/usercreate.service&apos;);</span><br><span class="line">const useReadService  =  require(&apos;../service/user/userread.service&apos;);</span><br><span class="line">const userUpdateService  =  require(&apos;../service/user/userupdate.service&apos;);</span><br><span class="line">const userDeleteService  =  require(&apos;../service/user/userdelete.service&apos;);</span><br><span class="line">const userListService  =  require(&apos;../service/user/userlist.service&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* GET users listing. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;User Api&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(&apos;/list&apos;, (req,res,next)=&gt; &#123;</span><br><span class="line">    userListService.exec()</span><br><span class="line">        .then((users) =&gt; &#123;</span><br><span class="line">            console.log(users);</span><br><span class="line">            console.log(&apos;finish to findAll&apos;);</span><br><span class="line">            res.json(users);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    useReadService.exec(req.params.id)</span><br><span class="line">        .then((user) =&gt; &#123;</span><br><span class="line">            console.log(user);</span><br><span class="line">            console.log(&apos;finish to findById&apos;);</span><br><span class="line">            res.json(user);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(&apos;/&apos;, (req,res,next) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    userCreateService.exec(req.body)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            console.log(result);</span><br><span class="line">            console.log(&apos;finish to create&apos;);</span><br><span class="line">            res.status(201).json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.put(&apos;/:id&apos;, (req,res,next) =&gt; &#123;</span><br><span class="line">    userUpdateService.exec(req.body, req.params.id)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            console.log(result);</span><br><span class="line">            console.log(&apos;finish to update&apos;);</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.delete(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    userDeleteService.exec(req.params.id)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            next(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><hr><h2 id="Rest-CRUD"><a href="#Rest-CRUD" class="headerlink" title="Rest CRUD"></a>Rest CRUD</h2><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>‘비지니스 로직을 담당’</p><p>UserService처럼 하나만 만들어도 되지만 전부 쪼개서 만들자! 실제 하나의 서비스에 다양한 많은 로직을 담게 될경우 변경할경우 힘든경우가..있다.. 파일이 많이 만들어지더라도… 이렇게 해보자…</p><p>(‘use strict’을 항상 모든 js파일 맨위에 붙이자! 습관습관)</p><blockquote><p>CreateService -&gt; /service/user/usercreate.service.js </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (body) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.create(&#123;</span><br><span class="line">        name : body.name,</span><br><span class="line">        age : body.age,</span><br><span class="line">        gender : body.gender,</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ReadService  -&gt; /service/user/userread.service.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (id) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.findById(id);</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UpdateServce -&gt; /service/user/userupdate.service.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (body, id) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.update(</span><br><span class="line">        &#123;</span><br><span class="line">            name : body.name,</span><br><span class="line">            age : body.age,</span><br><span class="line">            gender : body.gender,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            where : &#123;id : id&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DeleteService -&gt; /service/user/userdelete.service.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (id) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const result = await User.destroy(&#123; where: &#123; id: id &#125; &#125;)</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ListService -&gt; /service/user/userlist.service.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async () =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const userList = await User.findAll();</span><br><span class="line">    return userList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와같이 CRUD서비스를 만들어보았다. 포스트맨을 활용하여 테스트를 진행할경우 정상적으로 작동함을 확인할수 있다!</p><h3 id="간단-소스-설명"><a href="#간단-소스-설명" class="headerlink" title="간단 소스 설명"></a>간단 소스 설명</h3><p>노드로 서버를 개발을 하게될경우! 무조건 무조건 비동기로 만들어한다.. 동기로 짜도 돌아가는 것처럼 보이지만 절대 그렇게 하지말라 공식문서에도 나와있다…</p><h4 id="라우터"><a href="#라우터" class="headerlink" title="라우터"></a>라우터</h4><ol><li>router를 controller라 생각!하여 </li><li>localhost:3005/users/list로 request가 들어오면</li><li>유저리스트 서비스(비지니스로직을 담당) 데이터를 받아와서</li><li>해당데이터를 json으로 말아서 보낸다!</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/list&apos;, (req,res,next)=&gt; &#123;</span><br><span class="line">    userListService.exec()</span><br><span class="line">        .then((users) =&gt; &#123;</span><br><span class="line">            console.log(users);</span><br><span class="line">            console.log(&apos;finish to findAll&apos;);</span><br><span class="line">            res.json(users);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="서비스"><a href="#서비스" class="headerlink" title="서비스"></a>서비스</h4><ol><li>User모델 필요</li><li>body가 param으로 넘어왔고</li><li>해당 파람맵핑하여 user생성</li><li>기다리다 생성되면 리턴<br>디비접근부분은.. async await으로 쓰는 것을 선호한다…</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (body) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.create(&#123;</span><br><span class="line">        name : body.name,</span><br><span class="line">        age : body.age,</span><br><span class="line">        gender : body.gender,</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>코드를 짜는 모든사람들의 취향존중을 해주어야한다! 하지만 왜 그렇게 하는지는 확고히 가지고 있어야 된다 생각한다.</p><p>async, await에서는 try catch가 가능하다(퍼포먼스가 좋은지는 모름…. 사실 안써봄…)! 물론 이를 이용하여 router를 구현할수 있으나! router에 promise를 적용함을 통해 얻는 부분이 존재한다. </p><ul><li>then -&gt; 서비스로직에서 결과가 나오면!!!!!!</li><li>catch -&gt; 서비스로직에서 에러를 던지면 받는 곳!!이라 생각</li></ul><hr><h3 id="궁금점이-생기는-부분"><a href="#궁금점이-생기는-부분" class="headerlink" title="궁금점이 생기는 부분"></a>궁금점이 생기는 부분</h3><p>이렇게 코드를 짜놓고 보니 서비스로직의 공통된 부분이 있자. 객체지향언어인 자바 또는 C#으로 개발을 진행해본사람은! </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;../../models&apos;).User;</span><br></pre></td></tr></table></figure><p>상위 Object에 추상화를 꿈꿀것이다! 하지만 여기선 그럴필요가 없다!<br>찾아보니 이유인 즉슨 require로 한번 호출된 이후로 캐싱이 자동적으로 되어서 알아서 잘 처리가 된다고 한다.. (정확한 작동원리는 모름)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1장-RestApi-Sequelize&quot;&gt;&lt;a href=&quot;#1장-RestApi-Sequelize&quot; class=&quot;headerlink&quot; title=&quot;1장 RestApi, Sequelize&quot;&gt;&lt;/a&gt;1장 RestApi, Sequelize&lt;/h1
      
    
    </summary>
    
      <category term="node.js" scheme="http://yoursite.com/categories/node-js/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/categories/node-js/sequelize/"/>
    
      <category term="Rest" scheme="http://yoursite.com/categories/node-js/sequelize/Rest/"/>
    
    
      <category term="Rest" scheme="http://yoursite.com/tags/Rest/"/>
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>sequelize3</title>
    <link href="http://yoursite.com/2018/08/27/nodejs/sequelize3/"/>
    <id>http://yoursite.com/2018/08/27/nodejs/sequelize3/</id>
    <published>2018-08-27T09:30:00.000Z</published>
    <updated>2018-08-27T08:07:44.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sequelize3"><a href="#sequelize3" class="headerlink" title="sequelize3"></a>sequelize3</h1><h2 id="셋팅하기"><a href="#셋팅하기" class="headerlink" title="셋팅하기"></a>셋팅하기</h2><p>2장에 이어서 직접 콜을 때려서 디비에 접근해보겠습니다</p><blockquote><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const indexRouter = require(&apos;./routes/index&apos;);</span><br><span class="line">const usersRouter = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, indexRouter);</span><br><span class="line">app.use(&apos;/users&apos;, usersRouter);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>/routes/index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET home page. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;index page&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p></blockquote><p>웹브라우저에서 <a href="http://localhost:3005/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3005/</a><br>-&gt; index page</p><p>정상출력 확인</p><blockquote><p>/routes/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET users listing. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;respond with a user&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p></blockquote><p>웹브라우저에서 <a href="http://localhost:3005/users" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3005/users</a><br>-&gt; respond with a user</p><p>정상출력 확인</p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><blockquote><p>crud에 앞서 컴퓨터 재시작하여 도커에 올린 디비가 연결이 안된다면</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker restart &apos;CONTAINER ID&apos;</span><br><span class="line">재기동</span><br></pre></td></tr></table></figure><blockquote><p>/routers/user.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;../models&apos;).User;</span><br></pre></td></tr></table></figure><p>추가! orm모델사용!</p><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><ul><li>준비사항<ol><li>npm install body-parser -save 후<br>package.json확인</li><li>postman설치 (사용방법은 구글에 많음)</li></ol></li></ul><blockquote><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;));</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure></p></blockquote><p>위의 2개 다 추가</p><ul><li>postman에서 json으로 보낼지</li><li><a href="http://www.-form-urlencoded로" rel="external nofollow noopener noreferrer" target="_blank">www.-form-urlencoded로</a> 보낼지</li></ul><blockquote><p>/routes/users.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/&apos;, (req,res,next) =&gt; &#123;</span><br><span class="line">    User.create(&#123;</span><br><span class="line">        name : req.body.name,</span><br><span class="line">        age : req.body.age,</span><br><span class="line">        gender : req.body.gender,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            console.log(result);</span><br><span class="line">            console.log(&apos;finish to create&apos;);</span><br><span class="line">            res.status(201).json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>추가 후 run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Url - http://localhost:3005/users/</span><br><span class="line">method - post</span><br><span class="line">req</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot; : &quot;특정인물&quot;,</span><br><span class="line">&quot;age&quot; : 53,</span><br><span class="line">&quot;gender&quot; : 0</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">res</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 35,</span><br><span class="line">    &quot;name&quot;: &quot;특정인물&quot;,</span><br><span class="line">    &quot;age&quot;: 53,</span><br><span class="line">    &quot;gender&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p>Create한 부분을 읽어보자!</p><blockquote><p>/routes/users.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">const User = require(&apos;../models&apos;).User;</span><br><span class="line"></span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    User.findById(req.params.id)</span><br><span class="line">        .then((user) =&gt; &#123;</span><br><span class="line">            console.log(user);</span><br><span class="line">            console.log(&apos;finish to findById&apos;);</span><br><span class="line">            res.json(user);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>추가 후 run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Url - http://localhost:3005/users/35</span><br><span class="line">method - get</span><br><span class="line"></span><br><span class="line">res</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 35,</span><br><span class="line">    &quot;name&quot;: &quot;특정인물&quot;,</span><br><span class="line">    &quot;age&quot;: 53,</span><br><span class="line">    &quot;gender&quot;: false,</span><br><span class="line">    &quot;createdAt&quot;: &quot;2018-08-27T07:53:31.000Z&quot;,</span><br><span class="line">    &quot;updatedAt&quot;: &quot;2018-08-27T07:53:31.000Z&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전체 목록을 가져오자!</p><blockquote><p>/routes/users.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* GET users listing. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;User Api&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&apos;/list&apos;, (req,res,next)=&gt; &#123;</span><br><span class="line"></span><br><span class="line">    User.findAll()</span><br><span class="line">        .then((users) =&gt; &#123;</span><br><span class="line">            console.log(users);</span><br><span class="line">            console.log(&apos;finish to findAll&apos;);</span><br><span class="line">            res.json(users);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">url - http://localhost:3005/users/list</span><br><span class="line">method - get</span><br><span class="line">res</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 1,</span><br><span class="line">        &quot;name&quot;: &quot;박기진&quot;,</span><br><span class="line">        &quot;age&quot;: 29,</span><br><span class="line">        &quot;gender&quot;: true,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-24T07:19:13.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-24T07:19:37.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 7,</span><br><span class="line">        &quot;name&quot;: &quot;박기진&quot;,</span><br><span class="line">        &quot;age&quot;: 100,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-24T08:10:41.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-26T13:40:39.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 32,</span><br><span class="line">        &quot;name&quot;: &quot;박기진&quot;,</span><br><span class="line">        &quot;age&quot;: 15,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-27T07:44:50.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-27T07:44:50.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 33,</span><br><span class="line">        &quot;name&quot;: &quot;박기진&quot;,</span><br><span class="line">        &quot;age&quot;: 31,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-27T07:46:28.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-27T07:46:28.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 34,</span><br><span class="line">        &quot;name&quot;: &quot;특정인물&quot;,</span><br><span class="line">        &quot;age&quot;: 23,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-27T07:46:41.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-27T07:46:41.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 35,</span><br><span class="line">        &quot;name&quot;: &quot;특정인물&quot;,</span><br><span class="line">        &quot;age&quot;: 53,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-27T07:53:31.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-27T07:53:31.000Z&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><blockquote><p>/routes/user.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">router.put(&apos;/:id&apos;, (req,res,next) =&gt; &#123;</span><br><span class="line">    User.update(</span><br><span class="line">        &#123;</span><br><span class="line">        name : req.body.name,</span><br><span class="line">        age : req.body.age,</span><br><span class="line">        gender : req.body.gender,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            where : &#123;id : req.params.id&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            console.log(result);</span><br><span class="line">            console.log(&apos;finish to update&apos;);</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>특정필드를 삭제할때 함브로 삭제하면안된다.<br>deletedAt 컬럼을 사용하거나 특정 필드를 사용하여 소프트 델리트 형식으로하자!<br>하지만 지금은 마음대로 지워보자</p><blockquote><p>/routes/user.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.delete(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    User.destroy(&#123; where: &#123; id: req.params.id &#125; &#125;)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            next(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>run 후</p><p>method-delete, <a href="http://localhost:3005/users/35" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3005/users/35</a> 을 실행</p><p>db쿼리 직접실행</p><p>select * from users where id =35;</p><p>없음을 확인</p><hr><p>위와같이 CRUD를 실행해보았지만 몬가 아쉬운 부분이 많다.</p><ol><li>서비스로직이 필요하다!</li><li>에러핸들러가 없다</li><li>통일된 res object가 없다</li></ol><p>4번째! 페이지에서 위와같은 일을 진행해보자!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sequelize3&quot;&gt;&lt;a href=&quot;#sequelize3&quot; class=&quot;headerlink&quot; title=&quot;sequelize3&quot;&gt;&lt;/a&gt;sequelize3&lt;/h1&gt;&lt;h2 id=&quot;셋팅하기&quot;&gt;&lt;a href=&quot;#셋팅하기&quot; class=&quot;head
      
    
    </summary>
    
      <category term="node.js" scheme="http://yoursite.com/categories/node-js/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/categories/node-js/sequelize/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>sequelize2</title>
    <link href="http://yoursite.com/2018/08/26/nodejs/sequelize2/"/>
    <id>http://yoursite.com/2018/08/26/nodejs/sequelize2/</id>
    <published>2018-08-26T13:30:00.000Z</published>
    <updated>2018-08-26T13:46:43.296Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sequelize2"><a href="#sequelize2" class="headerlink" title="sequelize2"></a>sequelize2</h1><p>USER TABLE 생성을 통한 crud</p><h2 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML : Data Manipulation Language"></a>DML : Data Manipulation Language</h2><blockquote><p>/models/user.js 유저테이블<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">module.exports = (sequelize, DataTypes) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    return sequelize.define(&apos;user&apos;, &#123;</span><br><span class="line">        id: &#123;</span><br><span class="line">            type: DataTypes.INTEGER(9),</span><br><span class="line">            allowNull: false,</span><br><span class="line">            primaryKey: true,</span><br><span class="line">            autoIncrement: true,</span><br><span class="line">            field: &apos;id&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        name: &#123;</span><br><span class="line">            type: DataTypes.STRING(20),</span><br><span class="line">            allowNull: false,</span><br><span class="line">            field:&apos;name&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        age: &#123;</span><br><span class="line">            type: DataTypes.INTEGER.UNSIGNED,</span><br><span class="line">            allowNull: false,</span><br><span class="line">            field:&apos;age&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        gender: &#123;</span><br><span class="line">            type: DataTypes.BOOLEAN,</span><br><span class="line">            allowNull: false,</span><br><span class="line">            field: &apos;gender&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        createdAt:&#123;</span><br><span class="line">            type : DataTypes.DATE,</span><br><span class="line">            field: &apos;createdAt&apos;,</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        updatedAt:&#123;</span><br><span class="line">            type : DataTypes.DATE,</span><br><span class="line">            field: &apos;updatedAt&apos;,</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        timestamps: false,</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><p>createdAt과 updatedAt을 자동으로 설정해주는 방법이 있겠지만! 일단 패스</p><blockquote><p>/models/index.js 아래 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.User = require(&apos;./user&apos;)(sequelize, Sequelize);</span><br></pre></td></tr></table></figure></p></blockquote><p>app.js를 run</p><ol><li>workbench 또는 cli를 통해 db에 접근하자!</li><li>desc users를 보면 우리가 정의한 내용과 동일하게 생성</li></ol><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><blockquote><p>app.js </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;./models&apos;).User;</span><br><span class="line"></span><br><span class="line">User.create(&#123;</span><br><span class="line">    name:&apos;박기진&apos;,</span><br><span class="line">    age:&apos;31&apos;,</span><br><span class="line">    gender:&apos;0&apos;,</span><br><span class="line">&#125;)</span><br><span class="line">    .then((result) =&gt; &#123;</span><br><span class="line">    console.log(result);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>생성확인 select * from users where name = ‘박기진’;</p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">User.findById(2)</span><br><span class="line">    .then((user) =&gt; &#123;</span><br><span class="line">        console.log(user);</span><br><span class="line">        console.log(&apos;finish to findById&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User.findOne(&#123; where : &#123;age : 29&#125;&#125;)</span><br><span class="line">    .then((user) =&gt; &#123;</span><br><span class="line">        console.log(user);</span><br><span class="line">        console.log(&apos;finish to findOne&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User.findAll()</span><br><span class="line">    .then((users) =&gt; &#123;</span><br><span class="line">        console.log(users);</span><br><span class="line">        console.log(&apos;finish to findAll&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">User.findAndCountAll(</span><br><span class="line">    &#123; where :</span><br><span class="line">            &#123;age : 29&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then((result) =&gt; &#123;</span><br><span class="line">        console.log(result);</span><br><span class="line">        console.log(result.count);</span><br><span class="line">        console.log(&apos;finish to findAndCountAll&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><p>위의 것들을 하나씩하나씩 app.js에 추가하며 확인해보자</p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.update(&#123;age : 100&#125;, &#123;where :&#123;age : 35&#125;&#125;)</span><br><span class="line">    .then((result) =&gt; &#123;</span><br><span class="line">        console.log(result);</span><br><span class="line"></span><br><span class="line">        console.log(&apos;finish to update&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.destroy(&#123;where : &#123;age : 31&#125;&#125;)</span><br><span class="line">    .then((result) =&gt; &#123;</span><br><span class="line">        console.log(result);</span><br><span class="line"></span><br><span class="line">        console.log(&apos;finish to update&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><p>위와같이 간단한 dml을 정상적으로 확인하였다!</p><p>이제 App.js에서 실행해서 해당 쿼리를 실행시키는 것이 아닌 직접 request를 날려서 쿼리를 실행해보자!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sequelize2&quot;&gt;&lt;a href=&quot;#sequelize2&quot; class=&quot;headerlink&quot; title=&quot;sequelize2&quot;&gt;&lt;/a&gt;sequelize2&lt;/h1&gt;&lt;p&gt;USER TABLE 생성을 통한 crud&lt;/p&gt;
&lt;h2 id=&quot;DML
      
    
    </summary>
    
      <category term="node.js" scheme="http://yoursite.com/categories/node-js/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/categories/node-js/sequelize/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>sequelize1</title>
    <link href="http://yoursite.com/2018/08/25/nodejs/sequelize1/"/>
    <id>http://yoursite.com/2018/08/25/nodejs/sequelize1/</id>
    <published>2018-08-25T03:30:00.000Z</published>
    <updated>2018-08-24T06:08:08.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sequelize1"><a href="#sequelize1" class="headerlink" title="sequelize1"></a>sequelize1</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM?"></a>ORM?</h2><ul><li>Object relation Mapping </li><li>어플리케이션과 db를 맵핑 시켜주는 도구</li><li>특정 DBMS에 종속되지 않음</li></ul><h2 id="개발환경-셋팅"><a href="#개발환경-셋팅" class="headerlink" title="개발환경 셋팅"></a>개발환경 셋팅</h2><p>환경 : intellij, mysq (visual studio code에서도 가능)</p><p>시작전 셋팅 필요 : 로컬mysql디비 필요<br><a href="https://beanbroker.github.io/2018/08/21/etc/docker_mysql/" rel="external nofollow noopener noreferrer" target="_blank">https://beanbroker.github.io/2018/08/21/etc/docker_mysql/</a></p><p>intellij 셋팅<br>-&gt; new project, node<br>-&gt; 프로젝트 생성후<br>-&gt; Preference 열기<br>-&gt; javascript검색<br>-&gt; Languages &amp; Frameworks의 javascript Language Version변경 EcmaScript6로(그래야 람다를 써도 빨간줄이 뜨지 않는다!)</p><p>[참고]<br><a href="http://docs.sequelizejs.com/manual/installation/getting-started.html" rel="external nofollow noopener noreferrer" target="_blank">http://docs.sequelizejs.com/manual/installation/getting-started.html</a> 참고</p><h2 id="project-setting"><a href="#project-setting" class="headerlink" title="project setting"></a>project setting</h2><blockquote><p>app.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">var createError = require(&apos;http-errors&apos;);</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line"></span><br><span class="line">var indexRouter = require(&apos;./routes/index&apos;);</span><br><span class="line">var usersRouter = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">// view engine setup</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;jade&apos;);</span><br><span class="line"></span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, indexRouter);</span><br><span class="line">app.use(&apos;/users&apos;, usersRouter);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">    res.status(err.status || 404);</span><br><span class="line">    res.send(&apos;404 not found&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p>routes 폴더</p></blockquote><blockquote><p>/routes/index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET home page. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>/routes/users.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET users listing. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;respond with a resource&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>package.json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;nodetestproject&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node ./bin/www&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;cookie-parser&quot;: &quot;~1.4.3&quot;,</span><br><span class="line">    &quot;debug&quot;: &quot;~2.6.9&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;~4.16.0&quot;,</span><br><span class="line">    &quot;http-errors&quot;: &quot;~1.6.2&quot;,</span><br><span class="line">    &quot;jade&quot;: &quot;~1.11.0&quot;,</span><br><span class="line">    &quot;morgan&quot;: &quot;~1.9.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3005 포트 사용 app.js에 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.listen(3005, function()&#123;</span><br><span class="line">    console.log(&apos;3005 port connected&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p><a href="http://docs.sequelizejs.com/manual/installation/getting-started.html를" rel="external nofollow noopener noreferrer" target="_blank">http://docs.sequelizejs.com/manual/installation/getting-started.html를</a> 보면 아래와 같이 나와있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Using NPM</span><br><span class="line">$ npm install --save sequelize</span><br><span class="line"></span><br><span class="line"># And one of the following:</span><br><span class="line">$ npm install --save pg pg-hstore</span><br><span class="line">$ npm install --save mysql2</span><br><span class="line">$ npm install --save sqlite3</span><br><span class="line">$ npm install --save tedious // MSSQL</span><br></pre></td></tr></table></figure></p><p>실제 install에 필요한 부분<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save sequelize</span><br><span class="line">$ npm install --save mysql2</span><br><span class="line"></span><br><span class="line">위의 부분 실행 후</span><br><span class="line"></span><br><span class="line">npm i -g sequelize-cli</span><br><span class="line">sequelize init</span><br></pre></td></tr></table></figure></p><p>sequelize init을 진행하게되면 </p><ol><li>/config</li><li>/models</li><li>/migirations<br>폴더 생성이 되어진다 migrations는 필요없다.</li></ol><blockquote><p>/config/config.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;development&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: null,</span><br><span class="line">    &quot;database&quot;: &quot;database_development&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;test&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: null,</span><br><span class="line">    &quot;database&quot;: &quot;database_test&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;production&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: null,</span><br><span class="line">    &quot;database&quot;: &quot;database_production&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>위의 내용을 자신의 디비에 맞게 변경하자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;development&quot;: &#123;</span><br><span class="line">   &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">   &quot;password&quot;: &quot;password&quot;,</span><br><span class="line">   &quot;database&quot;: &quot;study&quot;,</span><br><span class="line">   &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">   &quot;dialect&quot;: &quot;mysql&quot;,</span><br><span class="line">   &quot;operatorsAliases&quot; : false</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>/models/index.js기본 생성되어진 index.js변경<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const Sequelize = require(&apos;sequelize&apos;);</span><br><span class="line"></span><br><span class="line">const env = process.env.NODE_ENV || &apos;development&apos;;</span><br><span class="line">const config = require(path.join(__dirname, &apos;..&apos;, &apos;config&apos;, &apos;config.json&apos;))[env];</span><br><span class="line">const db = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">const sequelize = new Sequelize(config.database, config.username, config.password, config);</span><br><span class="line"></span><br><span class="line">db.sequelize = sequelize;</span><br><span class="line">db.Sequelize = Sequelize;</span><br><span class="line"></span><br><span class="line">module.exports = db;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Mysql을-연결해보자"><a href="#Mysql을-연결해보자" class="headerlink" title="Mysql을 연결해보자"></a>Mysql을 연결해보자</h2><blockquote><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const sequelize = require(&apos;./models&apos;).sequelize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//테스트 커낵션</span><br><span class="line">sequelize</span><br><span class="line">    .authenticate()</span><br><span class="line">    .then(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;Connection has been established successfully.&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">        console.error(&apos;Unable to connect to the database:&apos;, err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sequelize.sync();</span><br></pre></td></tr></table></figure></p></blockquote><p>sync - &gt; 서버실행시 mysql 연결 및 연동</p><p>Executing (default): SELECT 1+1 AS result<br>Connection has been established successfully. 와 함께 로그가 확인되면 정상연결 확인.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sequelize1&quot;&gt;&lt;a href=&quot;#sequelize1&quot; class=&quot;headerlink&quot; title=&quot;sequelize1&quot;&gt;&lt;/a&gt;sequelize1&lt;/h1&gt;&lt;h2 id=&quot;ORM&quot;&gt;&lt;a href=&quot;#ORM&quot; class=&quot;header
      
    
    </summary>
    
      <category term="node.js" scheme="http://yoursite.com/categories/node-js/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/categories/node-js/sequelize/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
      <category term="sequelize" scheme="http://yoursite.com/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>mysql with docker</title>
    <link href="http://yoursite.com/2018/08/21/etc/docker_mysql/"/>
    <id>http://yoursite.com/2018/08/21/etc/docker_mysql/</id>
    <published>2018-08-21T02:50:00.000Z</published>
    <updated>2018-08-21T02:45:12.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql설치-with-Docker"><a href="#mysql설치-with-Docker" class="headerlink" title="mysql설치 with Docker"></a>mysql설치 with Docker</h2><p>혼자서 프로젝트를 진행하다보면 다양한 환경을 셋팅을 해주어야 한다. 얼마나 귀찮은가…. 전에 쓴 포스트에서도 레디스를 올려보았다. 오늘은 mysql을 올려보자!</p><p>mysql workbench에서 접속을 해보자!</p><p>맥북에서 진행할것이며 mysql 5.7버젼으로 설치할 예정이다.(5.7로 하는 이유는… 그냥pull해서 최신버젼을 까니 문제발생, 아마 워크벤치 버젼에 맞추어서 다운로드 받아야하는듯… 그냥 최신 워크벤치를 깔고 진행하자)<br><a href="https://www.mysql.com/products/workbench/" rel="external nofollow noopener noreferrer" target="_blank">https://www.mysql.com/products/workbench/</a></p><blockquote><p>도커 이미지를 조회해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure></p></blockquote><p>(OFFICIAL항목에 OK는 공식이미지임)</p><blockquote><p>mysql 도커 이미지 pull<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure></p></blockquote><p>:5.7 &lt;– 해당 버젼을 선택<br>:5.7을 쓰지 않는다면 최신버젼을 가져오게된다.</p><blockquote><p>도커 이미지 확인<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password --name mysql_local mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p> 정상작동확인<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p></blockquote><p>name mysql_local 확인시 정상작동, 바로 cli를 통해 들어 갈수 있으나 바로 mysql workbench에 연결하자</p><blockquote><p>셋팅</p><ul><li>hostname : 127.0.0.1</li><li>port :3306</li><li>password : password<br>테스트 커넥션 후 ok</li></ul></blockquote><p>끝!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mysql설치-with-Docker&quot;&gt;&lt;a href=&quot;#mysql설치-with-Docker&quot; class=&quot;headerlink&quot; title=&quot;mysql설치 with Docker&quot;&gt;&lt;/a&gt;mysql설치 with Docker&lt;/h2&gt;&lt;p&gt;혼자
      
    
    </summary>
    
      <category term="ETC" scheme="http://yoursite.com/categories/ETC/"/>
    
      <category term="DOCKER" scheme="http://yoursite.com/categories/ETC/DOCKER/"/>
    
    
      <category term="ETC" scheme="http://yoursite.com/tags/ETC/"/>
    
      <category term="DOCKER" scheme="http://yoursite.com/tags/DOCKER/"/>
    
  </entry>
  
  <entry>
    <title>예외처리</title>
    <link href="http://yoursite.com/2018/08/19/nodejs/errorHandling/"/>
    <id>http://yoursite.com/2018/08/19/nodejs/errorHandling/</id>
    <published>2018-08-19T07:58:00.000Z</published>
    <updated>2018-08-19T07:58:49.439Z</updated>
    
    <content type="html"><![CDATA[<h2 id="노드-에러처리"><a href="#노드-에러처리" class="headerlink" title="노드 에러처리"></a>노드 에러처리</h2><p>노드에서는 예외처리가 정말 중요!</p><p>멀티 스레드 프로그램에서 스레드 하나가 멈추면 그 일을 다른 스레드가 대신한다. 하지만! 노드는 스레드가 하나뿐이고…… 그 하나를 아주 소중하게 보호해야 한다. 하나뿐인 스레드에서 에러로 인해 멈춘다면! 서버가 멈춘다는 뜻……… 그렇기에 우리는 에러를 처리하는 방법을 익혀야 한다.</p><h3 id="1-예외-던지기"><a href="#1-예외-던지기" class="headerlink" title="1 예외 던지기"></a>1 예외 던지기</h3><p>err1.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setInterval(()=&gt; &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;start&apos;);</span><br><span class="line">    try&#123;</span><br><span class="line">        throw new Error(&apos;break the server&apos;);</span><br><span class="line">    &#125;catch (err)&#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, 1000);</span><br></pre></td></tr></table></figure><h3 id="2-error-발생시-기록-후-후-대처-방법"><a href="#2-error-발생시-기록-후-후-대처-방법" class="headerlink" title="2 error 발생시 기록 후 후 대처 방법"></a>2 error 발생시 기록 후 후 대처 방법</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fs =require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">setInterval(()=&gt;&#123;</span><br><span class="line">    fs.unlink(&apos;./trash.js&apos;, (err) =&gt; &#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, 1000);</span><br></pre></td></tr></table></figure><h3 id="3-예측-할수-없는에러-지양"><a href="#3-예측-할수-없는에러-지양" class="headerlink" title="3 예측 할수 없는에러(지양)"></a>3 예측 할수 없는에러(지양)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">process.on(&apos;uncaughtException&apos;, (err)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    console.error(&apos;이런 에러가! &apos;, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">    throw new Error(&apos;서버를 고장&apos;;)</span><br><span class="line">&#125;, 1000);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;실행&apos;);</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure><p>모든 에러를 잡아 줄거 같지만!<br>노드 공식 문서에서 uncaughtException사용 지양 </p><p>&lt;node.js교과서 3장 참조&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;노드-에러처리&quot;&gt;&lt;a href=&quot;#노드-에러처리&quot; class=&quot;headerlink&quot; title=&quot;노드 에러처리&quot;&gt;&lt;/a&gt;노드 에러처리&lt;/h2&gt;&lt;p&gt;노드에서는 예외처리가 정말 중요!&lt;/p&gt;
&lt;p&gt;멀티 스레드 프로그램에서 스레드 하나가 멈추
      
    
    </summary>
    
      <category term="node.js" scheme="http://yoursite.com/categories/node-js/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node.js 모듈</title>
    <link href="http://yoursite.com/2018/08/19/nodejs/module_of_node/"/>
    <id>http://yoursite.com/2018/08/19/nodejs/module_of_node/</id>
    <published>2018-08-19T07:10:00.000Z</published>
    <updated>2018-08-19T07:14:57.386Z</updated>
    
    <content type="html"><![CDATA[<h3 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h3><p>자바스크립트는 스크립트 언어이므로 미리 컴파일을 하지 않아도 즉석에서 코드를 실행할수 있습니다. 입력한 코드를 읽고(read), 해석하고(Eval), 결과물을 반환하고(Print), 종료할때까지 반복(loop)한다하여 repl이라 불린다.</p><h4 id="모듈이란-특정한-기능을-하는-함수나-변수들의-집합"><a href="#모듈이란-특정한-기능을-하는-함수나-변수들의-집합" class="headerlink" title="모듈이란 특정한 기능을 하는 함수나 변수들의 집합"></a>모듈이란 특정한 기능을 하는 함수나 변수들의 집합</h4><ul><li>모듈로 만들어두면 여러 프로그램에서 해당 모듈을 재사용 할수 있음</li></ul><h2 id="노드-내장-객체"><a href="#노드-내장-객체" class="headerlink" title="노드 내장 객체"></a>노드 내장 객체</h2><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><ul><li>브라우저의 window와 같은 전역 객체</li><li>모든 파일에서 접근 가능</li></ul><h3 id="console"><a href="#console" class="headerlink" title="console"></a>console</h3><ul><li>time, timeEnd :  시간 측정</li><li>log : 평범한 록</li><li>error : 에러 내용 표사</li><li>dir : 객체를 콘솔에 표시힐때 사용</li><li>console.trace : 에러가 어디서 발생했는지 추적</li></ul><h3 id="filename-dirname"><a href="#filename-dirname" class="headerlink" title="filename, dirname"></a><strong>filename, </strong>dirname</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(__filename);</span><br><span class="line">console.log(__dirname);</span><br><span class="line"></span><br><span class="line">/Users/kijinpark/pkjStudy/new_node/TestApp/p88.js</span><br><span class="line">/Users/kijinpark/pkjStudy/new_node/TestApp</span><br></pre></td></tr></table></figure><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; process.version</span><br><span class="line">&apos;v8.11.3&apos;</span><br><span class="line">&gt; process.arch</span><br><span class="line">&apos;x64&apos;</span><br><span class="line">&gt; process.platform</span><br><span class="line">&apos;darwin&apos;</span><br><span class="line">&gt; process.pid</span><br><span class="line">7079</span><br><span class="line">&gt; process.uptime()</span><br><span class="line">31.58</span><br><span class="line">&gt; process.execPath</span><br><span class="line">&apos;/Users/kijinpark/.nvm/versions/node/v8.11.3/bin/node&apos;</span><br><span class="line">&gt; process.cwd()</span><br><span class="line">&apos;/Users/kijinpark/pkjStudy/test_node&apos;</span><br><span class="line">&gt; process.cpuUsage()</span><br><span class="line">&#123; user: 110927, system: 23011 &#125;</span><br></pre></td></tr></table></figure><h3 id="fs모듈"><a href="#fs모듈" class="headerlink" title="fs모듈"></a>fs모듈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;./testread.txt&apos;, (err, data) =&gt; &#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        throw  err;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data);</span><br><span class="line">    console.log(data.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;REPL&quot;&gt;&lt;a href=&quot;#REPL&quot; class=&quot;headerlink&quot; title=&quot;REPL&quot;&gt;&lt;/a&gt;REPL&lt;/h3&gt;&lt;p&gt;자바스크립트는 스크립트 언어이므로 미리 컴파일을 하지 않아도 즉석에서 코드를 실행할수 있습니다. 입력한 코드를 
      
    
    </summary>
    
      <category term="node.js" scheme="http://yoursite.com/categories/node-js/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>var, const, let</title>
    <link href="http://yoursite.com/2018/08/19/JavaScript/basic/"/>
    <id>http://yoursite.com/2018/08/19/JavaScript/basic/</id>
    <published>2018-08-19T05:10:00.000Z</published>
    <updated>2018-08-19T06:17:12.766Z</updated>
    
    <content type="html"><![CDATA[<h2 id="var-const-let"><a href="#var-const-let" class="headerlink" title="var, const, let"></a>var, const, let</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">    var i = 1;</span><br><span class="line">    const b = 1;</span><br><span class="line">&#125;</span><br><span class="line">console.log(i);</span><br><span class="line">console.log(b);</span><br><span class="line"></span><br><span class="line">Uncaught ReferenceError: b is not defined</span><br><span class="line">    at &lt;anonymous&gt;:7:13</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const p = 0;</span><br><span class="line"></span><br><span class="line">p = 1;</span><br><span class="line"></span><br><span class="line">VM130:1 Uncaught TypeError: Assignment to constant variable.</span><br><span class="line">    at &lt;anonymous&gt;:1:3</span><br><span class="line"></span><br><span class="line">let i = 0;</span><br><span class="line">i = 3;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;var-const-let&quot;&gt;&lt;a href=&quot;#var-const-let&quot; class=&quot;headerlink&quot; title=&quot;var, const, let&quot;&gt;&lt;/a&gt;var, const, let&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="JavsScript" scheme="http://yoursite.com/categories/JavsScript/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>node.js basic</title>
    <link href="http://yoursite.com/2018/08/18/nodejs/concept_of_node/"/>
    <id>http://yoursite.com/2018/08/18/nodejs/concept_of_node/</id>
    <published>2018-08-18T06:00:00.000Z</published>
    <updated>2018-08-19T07:15:24.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><ul><li>크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임입니다.<ul><li>(런타임 - 특정 언어로 만든 프로그램들을 실행 할수 있는 환경)</li></ul></li><li>node.js는 이벤트 기반, 논블로킹 I/O모델을 사용해 가볍고 효율적입니다.</li><li>노드는 V8과 더불러 libuv라는 라이브러리를 사용<ul><li>V8, libuv(C, C++ 로 구현되어 있음)</li></ul></li><li>libuv 라이브러리는 노드의 특성인 이벤트 기반, 논블로킹 I/O 모델을 구현</li><li>자바스크립트는 실행 시 기본적으로 전역 컨텍스트안에서 돌아간다 생각하는게 좋다</li></ul><h3 id="이벤트-기반-중요중요"><a href="#이벤트-기반-중요중요" class="headerlink" title="이벤트 기반 (중요중요))"></a>이벤트 기반 (중요중요))</h3><ul><li>이벤트가 발생 할 때 미리 지정해둔 작업을 수행하는 방식, ex: 클릭, client요청, etc..</li><li>특정 이벤트가 발생할때 무엇을 할지 등록-&gt; 이벤트 리스너에 콜백 함수를 등록</li><li>이벤트 루프(중요중요?) 여러 이벤트가 동시에 발생했을 때 어떤 순서로 콜백 함수를 호출할지는 이벤트 루프가 판단!</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function one()&#123;</span><br><span class="line">    two();</span><br><span class="line">    console.log(&apos;1번&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function two()&#123;</span><br><span class="line">    three();</span><br><span class="line">    console.log(&apos;2번&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function three()&#123;    </span><br><span class="line">    console.log(&apos;3번&apos;);</span><br><span class="line">&#125;</span><br><span class="line">one();</span><br></pre></td></tr></table></figure><p>당연하지만 3번,2번,1번 호출되어짐</p><p>다른 예<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function start()&#123;</span><br><span class="line">    console.log(&apos;2초 후 실행&apos;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;시작&apos;);</span><br><span class="line">setTimeout(start, 2000);</span><br><span class="line">console.log(&apos;끝&apos;);</span><br></pre></td></tr></table></figure></p><p>result<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">시작</span><br><span class="line">끝</span><br><span class="line">2초 후 실행</span><br></pre></td></tr></table></figure></p><h3 id="이벤트-루프"><a href="#이벤트-루프" class="headerlink" title="이벤트 루프"></a>이벤트 루프</h3><blockquote><p>이벤트 발생 시 호출할 콜백 함수를 관리, 호출된 콜백 함수의 실행 순서를 결정하는 역할을 담당. 노드가 종료 될 때까지 이벤트 처리를 위한 작업을 반복하므로 루프라 불려진다.(태스크 큐에 콜백 함수가 들어올때까지 계속 대기하게 된다.)</p></blockquote><p><a href="http://latentflip.com/loupe/" rel="external nofollow noopener noreferrer" target="_blank">http://latentflip.com/loupe/</a> 를 보자 </p><h3 id="태스트-큐-또는-콜백-큐"><a href="#태스트-큐-또는-콜백-큐" class="headerlink" title="태스트 큐 또는 콜백 큐"></a>태스트 큐 또는 콜백 큐</h3><blockquote><p>이벤트 발생 후 호출되어야 할 콜백 함수들이 기다리는 공간. </p></blockquote><h3 id="백그라운드"><a href="#백그라운드" class="headerlink" title="백그라운드"></a>백그라운드</h3><blockquote><p>타이머나 I/O 작업 콜백 또는 이벤트 리스너들이 대기하는 공간</p></blockquote><h3 id="논블로킹-I-O"><a href="#논블로킹-I-O" class="headerlink" title="논블로킹 I/O"></a>논블로킹 I/O</h3><blockquote><p>이전 작업이 완료될 때까지 멈추지 않고 다음 작업을 수행함을 뜻합니다.</p></blockquote><h3 id="싱글-스레드"><a href="#싱글-스레드" class="headerlink" title="싱글 스레드"></a>싱글 스레드</h3><p>자바스크립트와 노드에서 논블로킹이 중요한 이유는! 바로 싱글 스레드이기 떄문이다. 한번에 한가지 일밖에 처리하지 못하기 때무넹 어떠한 작업에서 블로킹이 발생하면 다음 일을 처리하지 못한다.</p><h2 id="server로서-노드"><a href="#server로서-노드" class="headerlink" title="server로서 노드"></a>server로서 노드</h2><ol><li>노드 서버는 I/O가 많은 작업에 적합</li><li>CPU부하가 큰 작업에는 적합히지 않음 -&gt; 싱글 스레드에서 일이 처리되는데 개발자가 작업한 코드가 CPU연산을 많이 요구하면 블로킹이 발생해 스레드하나가 감당하기 힘듬</li><li>에러처리 잘해야함(모든 서버는 예측할수 있는 에러는 잘 던지자)</li></ol><p>(node.js 교과서 참조)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;node-js&quot;&gt;&lt;a href=&quot;#node-js&quot; class=&quot;headerlink&quot; title=&quot;node.js&quot;&gt;&lt;/a&gt;node.js&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임입니다.&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="node.js" scheme="http://yoursite.com/categories/node-js/"/>
    
    
      <category term="node.js" scheme="http://yoursite.com/tags/node-js/"/>
    
  </entry>
  
</feed>
