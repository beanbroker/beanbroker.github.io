<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>beanbroker blog</title>
  
  <subtitle>끝없는 공부</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-28T05:31:02.519Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>beanbroker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring test code (일단 해보자)</title>
    <link href="http://yoursite.com/2019/07/27/Spring/test_code_0727/"/>
    <id>http://yoursite.com/2019/07/27/Spring/test_code_0727/</id>
    <published>2019-07-27T13:50:00.000Z</published>
    <updated>2019-07-28T05:31:02.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Junit-테스트"><a href="#Junit-테스트" class="headerlink" title="Junit 테스트"></a>Junit 테스트</h1><p><a href="https://beanbroker.github.io/2018/07/28/Spring/test_code1/" rel="external nofollow noopener noreferrer" target="_blank">test_code 1장</a> 링크</p><p><a href="https://beanbroker.github.io/2018/08/04/Spring/test_code2/" rel="external nofollow noopener noreferrer" target="_blank">test_code 2장</a> 링크</p><p><a href="https://beanbroker.github.io/2018/08/04/Spring/test_code3/" rel="external nofollow noopener noreferrer" target="_blank">test_code 3장</a> 링크</p><p>위의 글을 작성할것을.. 블로그에 올리기전에 발견.. 하 노답…. </p><p>지금 작성하고 있는 글은 100프로 정확하지 않으며 따라하지 않기를 권하며…. 혼자 공부한 글임을….</p><p><a href="https://github.com/beanbroker/querydsl_java_spring" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 링크</p><h2 id="테스트-코드의-필요성"><a href="#테스트-코드의-필요성" class="headerlink" title="테스트 코드의 필요성"></a>테스트 코드의 필요성</h2><p>테스트 코드가 중요한것은 모든 개발자들이 동감을 할것이다. 하지만… 시간이 없어서 테스트 코드때문에 자신이 짠 비지니스 로직을 바꿔야하는 경우도 있고, 환경에 따라 값이 변하는 경우도 있다, 테스트코드에서 environment를 local 또는 dev로 설정 후 하더라도 실제 테스트 하려는 코드에서 env를 직접 주입하여 해당 환경에서 인스턴스가 올라갈경우 테스트코드의 env와 테스트 대상인 env의 설정 값이 달라 틀려질 경우도 있다. 너무나 어려운것….하….</p><p>테스트 코드를 짜게되면 비지니스 로직이 변경되거나 사이드이펙트 체크가 쉽다. 해당 부분은 다른 블로그에서 찾아서 보는 것이 빠르다.</p><h2 id="SpringBootTest를-쓰기전에"><a href="#SpringBootTest를-쓰기전에" class="headerlink" title="SpringBootTest를 쓰기전에!"></a>SpringBootTest를 쓰기전에!</h2><p><strong>@SpringBootTest</strong> 를 사용하게 되면 ApplicationContext를 쉽게 생성 및 조작이 가능하다.</p><p>@RunWith(SpringRunner.class)와 스프링테스트는 같이쓰여져야 한다.</p><h2 id="실습을-해보자"><a href="#실습을-해보자" class="headerlink" title="실습을 해보자"></a>실습을 해보자</h2><p><a href="https://beanbroker.github.io/2019/07/13/Java/java_querydsl_gradle4-1/" rel="external nofollow noopener noreferrer" target="_blank">querydsl 관련 내용 블로그</a></p><p>위의 블로그에서 작성한 코드를 기반으로 테스트 코드를 작성해보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">(String userId, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>옛날 소스와 많이 다르지 않지만 덕지덕지 붙어있었던 불필요한 부분 삭제를 하였다.</p><blockquote><p>테스트 할 내용은 유저를 생성하고 조회한다 가정해보자</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String userId, String userName, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    userRepository.save(</span><br><span class="line">            UserEntity.builder().userId(userId).name(userName).age(age).build()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserId</span><span class="params">(String userId)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    userRepository.getByUserId(userId);</span><br><span class="line">    Optional&lt;UserEntity&gt; userEntity = Optional.ofNullable(userRepository.getByUserId(userId));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!userEntity.isPresent())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">"Not Found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">    userInfo.setUserAge(userEntity.get().getAge());</span><br><span class="line">    userInfo.setUserName(userEntity.get().getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> userEntity.get();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성과 삭제코드 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = UserService.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TEST_USER_ID = <span class="string">"powertest"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TEST_USER_NAME = <span class="string">"룰루랄라"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> TEST_USER_AGE = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        userService.deleteUser(TEST_USER_ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterSaveUser_GetUserInfo</span><span class="params">()</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Given 유저를 생성하였고</span></span><br><span class="line">        userService.createUser(TEST_USER_ID, TEST_USER_NAME, TEST_USER_AGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//When 유져를 찾을때</span></span><br><span class="line">        UserEntity userEntity = userService.getUserId(TEST_USER_ID);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then 유저의 이름은 룰루랄라이다</span></span><br><span class="line">        assertThat(userEntity.getName(), is(TEST_USER_NAME));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(expected = NotFoundException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkExpectedException</span><span class="params">()</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//When 유져를 찾을때</span></span><br><span class="line">        UserEntity userEntity = userService.getUserId(<span class="string">"sadfsd"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>물론 위처럼 작성하면 너무나 당연하게 통과한다… 위처럼 작성 후  다음에 다시 테스트를 돌릴경우 userId가 Unique값이라면 정상저긍로 작동하지 않을 것이다. 그렇기 때문에 After 생성한 삭제를 삭제해주자</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Junit-테스트&quot;&gt;&lt;a href=&quot;#Junit-테스트&quot; class=&quot;headerlink&quot; title=&quot;Junit 테스트&quot;&gt;&lt;/a&gt;Junit 테스트&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://beanbroker.github.io/2018
      
    
    </summary>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Spring/"/>
    
      <category term="Junit" scheme="http://yoursite.com/categories/Spring/Junit/"/>
    
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
      <category term="Junit" scheme="http://yoursite.com/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>Spring cloud 1장 (gateway)</title>
    <link href="http://yoursite.com/2019/07/21/spring_cloud/spring_cloud_gateway1/"/>
    <id>http://yoursite.com/2019/07/21/spring_cloud/spring_cloud_gateway1/</id>
    <published>2019-07-21T09:30:00.000Z</published>
    <updated>2019-07-21T09:29:29.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-cloud-1장-gateway"><a href="#Spring-cloud-1장-gateway" class="headerlink" title="Spring cloud 1장 (gateway)"></a>Spring cloud 1장 (gateway)</h1><p>심심해서 해보는 스프링 클라우드 샘플코드 만들어보기</p><p><a href="https://github.com/beanbroker/sample_spring_cloud_gw" rel="external nofollow noopener noreferrer" target="_blank">github 소스</a> 링크</p><h1 id="Spring-cloud란"><a href="#Spring-cloud란" class="headerlink" title="Spring cloud란"></a>Spring cloud란</h1><p><a href="https://spring.io/projects/spring-cloud-gateway" rel="external nofollow noopener noreferrer" target="_blank">Spring 공홈 </a> 링크</p><p>이것을 설명하기보다는… 유명한 네이버, 우아한형제 등등 기술블로그에서 검색하여 간단하게 읽는 것을 강력하게 추천! 설명 잘되어있음</p><h2 id="A-시작해보자"><a href="#A-시작해보자" class="headerlink" title="A. 시작해보자"></a>A. 시작해보자</h2><blockquote><p>build.gradle</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-gateway'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-sleuth'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-zipkin'</span></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line"></span><br><span class="line">    compileOnly <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-data-redis'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'it.ozimov'</span>, name: <span class="string">'embedded-redis'</span>, version: <span class="string">'0.7.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다른것을 해보기 위해 미리 디펜던시들을 추가하였고 이번장에서 중요허게 봐야할 부분은 gateway, sleuth이다. 물론 zuul도 나중에.. 시간이 된다면 추가해서 무엇이 다른지에 대한 설명을 추가해야된다.</p><h3 id="게이트웨이란"><a href="#게이트웨이란" class="headerlink" title="게이트웨이란?"></a>게이트웨이란?</h3><ul><li>end point를 통합하는 서버이다( 클라이언트 요청의 집합소!). like 프록시 서버</li></ul><h3 id="슬루스란"><a href="#슬루스란" class="headerlink" title="슬루스란?"></a>슬루스란?</h3><ul><li>SOA, MSA이건 여러개의 서비스에서 서로간의 통신을 한다고 가정을 하자!<ul><li>로그 추적을 어떻게??</li><li>이를 쉽게 해주는 서비스 Sleuth</li><li>Sleuth traceId와 spanId제공</li></ul></li></ul><h3 id="Span-ID"><a href="#Span-ID" class="headerlink" title="Span ID"></a>Span ID</h3><ul><li>작업의 기본 단위이다. 각 서비스 호출시에 새로운 Span이 하나 생성  </li><li>Description, key-value annotation, process ID 등의 추가 정보를 가짐</li><li>Trace에서 제일 처음 만들어지는 Span을 root span이라 함(trace id와 동일)</li></ul><h3 id="Trace-ID"><a href="#Trace-ID" class="headerlink" title="Trace ID"></a>Trace ID</h3><ul><li>최초 호출시 인입 서비스에서 생성 </li></ul><h2 id="B-소스를-적용해보자"><a href="#B-소스를-적용해보자" class="headerlink" title="B. 소스를 적용해보자"></a>B. 소스를 적용해보자</h2><blockquote><p>RouterConfig.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebFlux</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterConfig</span> <span class="keyword">implements</span> <span class="title">WebFluxConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">routes</span><span class="params">(HelloWorldHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> route(GET(<span class="string">"/"</span>), handler::helloWorld);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>HelloWorldHandler.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HelloWorldHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">helloWorld</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"start to get healthcheck"</span>);</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().body(Mono.just(<span class="string">"hello"</span>), String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 하면 끝이다. 물론 현재 프록시하는 역할을 가지고 있지 않다. 2장에서 서비스 서버 하나를 띄우고 어찌작동되는지 함께 보여줄 예정</p><p>위처럼 하고 실행! 후 <a href="http://localhost:9000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:9000/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-07-21 18:19:10.084  INFO [gateway,3fb0ee4984a21a7e,3fb0ee4984a21a7e,false] 37457 --- [ctor-http-nio-2] c.b.beangw.handler.HelloWorldHandler     : start to get healthcheck</span><br></pre></td></tr></table></figure><p>앞쪽이 traceId, 뒤쪽이 spanid이다</p><blockquote><p>집킨설정을 통해 로그를 바꿔보자</p></blockquote><blockquote><p>application.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    service:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">sample-gw</span></span><br></pre></td></tr></table></figure></p></blockquote><p>재기동 후 로그는 아래처럼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-07-21 18:22:25.117  INFO [sample-gw,1c296c8c12cc57b5,1c296c8c12cc57b5,false] 37462 --- [ctor-http-nio-2] c.b.beangw.handler.HelloWorldHandler     : start to get healthcheck</span><br></pre></td></tr></table></figure><h2 id="C-헤더에-traceID를-심어보자"><a href="#C-헤더에-traceID를-심어보자" class="headerlink" title="C. 헤더에 traceID를 심어보자"></a>C. 헤더에 traceID를 심어보자</h2><blockquote><p>GatewayDefaultConfig.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayDefaultConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Tracer tracer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayDefaultConfig</span><span class="params">(Tracer tracer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tracer = tracer;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GatewayDefaultConfig.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">lifeLandGlobalFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String tracerId = tracer.currentSpan().context().traceIdString();</span><br><span class="line"></span><br><span class="line">                exchange.getResponse().getHeaders().set(<span class="string">"X-BEANBROKER-TRACE"</span>, tracerId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>음 실제로 운영하다보면 헤더에 trace-id를 넣어서 하면 좋은 경우가 있다.</p><p>2장에서 실제로 서비스서버로 호출하여 trace-id가 찍히는지 확인해보자!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-cloud-1장-gateway&quot;&gt;&lt;a href=&quot;#Spring-cloud-1장-gateway&quot; class=&quot;headerlink&quot; title=&quot;Spring cloud 1장 (gateway)&quot;&gt;&lt;/a&gt;Spring cloud 1장
      
    
    </summary>
    
      <category term="spring_cloud" scheme="http://yoursite.com/categories/spring-cloud/"/>
    
      <category term="gateway" scheme="http://yoursite.com/categories/spring-cloud/gateway/"/>
    
    
      <category term="spring_cloud" scheme="http://yoursite.com/tags/spring-cloud/"/>
    
      <category term="gateway" scheme="http://yoursite.com/tags/gateway/"/>
    
  </entry>
  
  <entry>
    <title>OBJECT 1장</title>
    <link href="http://yoursite.com/2019/07/21/Java/Object_java1/"/>
    <id>http://yoursite.com/2019/07/21/Java/Object_java1/</id>
    <published>2019-07-21T08:00:00.000Z</published>
    <updated>2019-07-21T07:53:19.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Obejct-1장"><a href="#Obejct-1장" class="headerlink" title="Obejct 1장"></a>Obejct 1장</h1><blockquote><p>해당 블로그 컨텐츠는 Object 책을 공부하며 생각을 정리한 내용입니다.</p></blockquote><p><a href="https://wikibook.co.kr/object/" rel="external nofollow noopener noreferrer" target="_blank">Object wikibook</a> 링크</p><p><a href="https://github.com/eternity-oop/object" rel="external nofollow noopener noreferrer" target="_blank">해당 책 예제 소스 </a> 링크</p><h1 id="A-객체지향이란"><a href="#A-객체지향이란" class="headerlink" title="A. 객체지향이란?"></a>A. 객체지향이란?</h1><blockquote><p>p41</p></blockquote><p>말 그대로 객체를 지향하는 것이다. 진정한 객체지향 페러다임으로의 전환은 클래스가 아닌 객체에 초점을 맞출 떄에만 얻을 수 있다. 이를 위해 2가지에 집중이 필요</p><ol><li>어떤 클래스가 필요한지를 고민하기 전에 어떤 객체들이 필요한지 고민하라! <ul><li>클래스는 공통적인 <strong>상태와 행동</strong> 을 공유하는 객체들을 추상화 한것이다.</li></ul></li><li>객체를 독립적인 존재가 아니라 기능을 구현하기 위한 협력하는 공동체의 일월으로 봐야 한다.<ul><li>객체는 다른 객체에게 도움을 주거나 의존하면서 살아가는 협력적인 존재</li><li>객체를 고립된 존재로 바로보지 말고 협력에 참여하는 협력자로 바라보자.</li><li>객체들의 모양과 윤곽이 잡히면 <strong>공통된 특성과 상태</strong> 를 가진 각채들을 <strong>타입으로 분류</strong> 하고 이 타입을 기반으로 클래스를 구현하라.</li></ul></li></ol><p>즉! -&gt; 현실 세계의 state와 behavior를 추상화 -&gt; 클래스</p><p>객체지향의 본질은 협력하는 객체들의 공동체를 창조하는 것이다. 핵심은 <strong>역할, 책임, 협력</strong> 이다. 가장 중효하다 생각하는 부분은 당연히 책임이다.</p><p>객체의 상태에 초점을 맞추기 보다는 객체의 행동에 집중해야 한다. 객체의 내누 구현에 초점을 맞춘 설계 방법을 데이터 주도 설계(Data-Driven Design)</p><h2 id="책과의-별도-내용-Abstract-Class와-interface의-차이는-개인적인-생각-2년차부터-생각한"><a href="#책과의-별도-내용-Abstract-Class와-interface의-차이는-개인적인-생각-2년차부터-생각한" class="headerlink" title="(책과의 별도 내용) Abstract Class와 interface의 차이는? (개인적인 생각! 2년차부터 생각한!)"></a>(책과의 별도 내용) Abstract Class와 interface의 차이는? (개인적인 생각! 2년차부터 생각한!)</h2><p><strong>같은 상속구조 트리안에 있냐 없냐</strong> 가 중요하다고 생각한다. 기능을 제공할때 추상클래스에 위임할지 인터페이스에 위임할지 설계시 많은 고민을 한다. 같은 상속구조트리안에 있다면 추상클래스에 기능을 위임하고 같은 상속구조트라 안에 있지 않다면 인터페이스에 기능을 위임하는 것이 맞다고 생각한다. 이는 요구조건을 파악하고 설계시 매우 중요하다고 생각한다. 추상화한 클래스에 억지로 이러한 기능이 필요할거야 라는 좋지 않은 생각을 버리도록 항상 노력하자!</p><p>이를 통해 높은 응집도와 낮은 결합도를 추구할수 있다 생각한다. 객체지향은 항상 어려운것이다.</p><h2 id="B-method-or-message"><a href="#B-method-or-message" class="headerlink" title="B. method or message"></a>B. method or message</h2><blockquote><p>p49</p></blockquote><p>객체게 다른 객체와 상호작용할수 있는 유일한 방법을 메시지를 전송하는 것뿐이다. 다른 객체에게 요청이 도달할 때 해당 객체가 메시지를 수신했다고 이야기한다. 수진된 메시지를 처리하기 위한 자신만의 방법을 메서드라고 부른다.</p><p>how to 구분? 메시지와 메서드 : <strong>다형성</strong> 과 연관</p><p>메시지와 메서드를 실행 시점에 바인당한다. </p><ol><li><p>지연 바인딩 or 동적 바인딩</p><ul><li>메서드를 실행 시점에 바인딩한다.</li></ul></li><li><p>초기 바인딩 or 동적 바인딩</p><ul><li>전통적인 함수 호출처럼 컴파일 시점에 실행된 함수나 프로시저를 결정하는 것</li></ul></li></ol><p>객체지향이 컴파일 시점의 의존성과 실행 시점의 인존성을 분리하고, 하나의 메시지를 선택적으로 서로 다른 메서드에 연결할수 있는 이유가 바로 지연 바인딩이라는 메커니즘을 사용하기 때문</p><p>책에 나와있는 모든 샘플 코드와 왜 이와같이 변경되는지도 포함시켜 업로드하고 싶지만.. 이건 직접봐야하는 책이라고 생각한다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Obejct-1장&quot;&gt;&lt;a href=&quot;#Obejct-1장&quot; class=&quot;headerlink&quot; title=&quot;Obejct 1장&quot;&gt;&lt;/a&gt;Obejct 1장&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;해당 블로그 컨텐츠는 Object 책을 공부하며 생각
      
    
    </summary>
    
      <category term="Obejct" scheme="http://yoursite.com/categories/Obejct/"/>
    
      <category term="Java" scheme="http://yoursite.com/categories/Obejct/Java/"/>
    
    
      <category term="Obejct" scheme="http://yoursite.com/tags/Obejct/"/>
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot With Querydsl Java (gradle 4 버젼용) 2장</title>
    <link href="http://yoursite.com/2019/07/14/Java/java_querydsl_gradle4-2/"/>
    <id>http://yoursite.com/2019/07/14/Java/java_querydsl_gradle4-2/</id>
    <published>2019-07-14T09:15:00.000Z</published>
    <updated>2019-07-14T09:20:25.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PREDICATOR"><a href="#PREDICATOR" class="headerlink" title="PREDICATOR"></a>PREDICATOR</h1><p><a href="https://github.com/beanbroker/querydsl_java_spring" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 링크</p><p><a href="https://beanbroker.github.io/2019/03/09/Kotlin/kotlin_queryDsl3/" rel="external nofollow noopener noreferrer" target="_blank">kotlin_version</a> 링크</p><p>PREDICATOR가 왜필요할지는  동적쿼리를 매번매번 function으로 추가하여 쓸데없는 메소드 추가를 방지</p><h2 id="바로-소스-카즈아"><a href="#바로-소스-카즈아" class="headerlink" title="바로 소스 카즈아"></a>바로 소스 카즈아</h2><p><strong>중요부분</strong> 매우 중요</p><p>괜히 이펙티브자바에서 빌더를 써라라고 하는것이 아님!</p><blockquote><p>UserPredicator.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.beanbroker.sample.api.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.QUserEntity;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.BooleanBuilder;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.Predicate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPredicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> QUserEntity table = QUserEntity.userEntity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BooleanBuilder builder = <span class="keyword">new</span> BooleanBuilder();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserPredicator <span class="title">userId</span><span class="params">(String userId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(userId != <span class="keyword">null</span>)&#123;</span><br><span class="line">            builder.and(table.userId.eq(userId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserPredicator <span class="title">name</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(name != <span class="keyword">null</span>)&#123;</span><br><span class="line">            builder.and(table.name.eq(name));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserPredicator <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            builder.and(table.age.eq(age));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Predicate <span class="title">values</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>참쉬죠잉?</p><blockquote><p>UserRepositoryCustom.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.Predicate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">UserEntity <span class="title">getByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line">    <span class="function">UserEntity <span class="title">getUserInfoWithPredicator</span><span class="params">(Predicate predicate)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserRepositoryImpl.java</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class UserRepositoryImpl extends QuerydslRepositorySupport</span><br><span class="line">        implements UserRepositoryCustom &#123;</span><br><span class="line"></span><br><span class="line">    private static final QUserEntity table = QUserEntity.userEntity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;@link QuerydslRepositorySupport&#125; instance for the given domain type.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param domainClass must not be &#123;@literal null&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public UserRepositoryImpl() &#123;</span><br><span class="line">        super(UserEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserEntity getByUserId(String userId) &#123;</span><br><span class="line"></span><br><span class="line">        return  from(table)</span><br><span class="line">                .where(table.userId.eq(userId))</span><br><span class="line">                .fetchOne();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserEntity getUserInfoWithPredicator(Predicate userPredicator) &#123;</span><br><span class="line">        return from(table)</span><br><span class="line">                .where(userPredicator)</span><br><span class="line">                .fetchOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="셋팅은-끝낫는데-how-to-use"><a href="#셋팅은-끝낫는데-how-to-use" class="headerlink" title="셋팅은 끝낫는데 how to use?"></a>셋팅은 끝낫는데 how to use?</h2><p>아래가 핵심코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserInfoWithPredicator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           String userId,</span></span></span><br><span class="line"><span class="function"><span class="params">           String name,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> age</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">   )</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> userRepository.getUserInfoWithPredicator(</span><br><span class="line">               setUserQuery(userId, name, age)</span><br><span class="line">       );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Predicate <span class="title">setUserQuery</span><span class="params">( String userId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> UserPredicator()</span><br><span class="line">               .userId(userId)</span><br><span class="line">               .name(name)</span><br><span class="line">               .age(age)</span><br><span class="line">               .values();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="그럼-써보자"><a href="#그럼-써보자" class="headerlink" title="그럼 써보자"></a>그럼 써보자</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">UserEntity test1 = userService.getUserInfoWithPredicator(</span><br><span class="line">             <span class="string">"beanbroker"</span>,</span><br><span class="line">             <span class="keyword">null</span>,</span><br><span class="line">             <span class="number">0</span></span><br><span class="line"></span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line">     System.out.println(test1.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     UserEntity test2 = userService.getUserInfoWithPredicator(</span><br><span class="line">             <span class="string">"beanbroker"</span>,</span><br><span class="line">                 <span class="string">"pkj"</span>,</span><br><span class="line">             <span class="number">0</span></span><br><span class="line"></span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     System.out.println(test2.toString());</span><br><span class="line"></span><br><span class="line">     UserEntity test3 = userService.getUserInfoWithPredicator(</span><br><span class="line">             <span class="keyword">null</span>,</span><br><span class="line">             <span class="keyword">null</span>,</span><br><span class="line">             <span class="number">32</span></span><br><span class="line"></span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line">     System.out.println(test3.toString());</span><br></pre></td></tr></table></figure><p>아 요즘은 왜 저렇게써야하는지 설명 적는게 귀찮다…. 활용방법은 다양하니! 잘사용합시당</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PREDICATOR&quot;&gt;&lt;a href=&quot;#PREDICATOR&quot; class=&quot;headerlink&quot; title=&quot;PREDICATOR&quot;&gt;&lt;/a&gt;PREDICATOR&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/beanbroker
      
    
    </summary>
    
      <category term="Querydsl" scheme="http://yoursite.com/categories/Querydsl/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Querydsl/Spring/"/>
    
    
      <category term="Querydsl" scheme="http://yoursite.com/tags/Querydsl/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot With Querydsl Java (gradle 4 버젼용) 1장</title>
    <link href="http://yoursite.com/2019/07/13/Java/java_querydsl_gradle4-1/"/>
    <id>http://yoursite.com/2019/07/13/Java/java_querydsl_gradle4-1/</id>
    <published>2019-07-13T08:50:00.000Z</published>
    <updated>2019-07-14T09:13:41.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-기본셋팅"><a href="#1-기본셋팅" class="headerlink" title="1. 기본셋팅"></a>1. 기본셋팅</h1><p>5버젼과 4버젼의 차이를 추후 블로그에 공유할예정! </p><p>회사에서 gradle 4버젼을 사용함을 인지!</p><p>build.gradle에서 가장 중요하게 봐야하는 부분은 <strong>// querydsl 적용</strong> 이라 적혀있는 부분</p><blockquote><p>build.gradle (메이븐일 경우 다른데곳에서 찾아서….하시길..)</p></blockquote><blockquote><p>build.gradle</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line"></span><br><span class="line">        springBootVersion = <span class="string">'2.1.6.RELEASE'</span></span><br><span class="line">        querydslPluginVersion = <span class="string">'1.0.10'</span></span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">        maven &#123; url <span class="string">"https://plugins.gradle.org/m2/"</span> &#125; <span class="comment">// plugin 저장소</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</span><br><span class="line">        classpath(<span class="string">"gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:$&#123;querydslPluginVersion&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">apply plugin: <span class="string">'org.springframework.boot'</span></span><br><span class="line">apply plugin: <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.beanbroker'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="string">'1.8'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">"com.querydsl:querydsl-jpa"</span>) <span class="comment">// querydsl</span></span><br><span class="line">    compile(<span class="string">"com.querydsl:querydsl-apt"</span>) <span class="comment">// querydsl</span></span><br><span class="line"></span><br><span class="line">    compile(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line">    compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    runtimeOnly('com.h2database:h2')</span></span><br><span class="line">    runtimeOnly <span class="string">'mysql:mysql-connector-java'</span></span><br><span class="line">    compile(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">    testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// querydsl 적용</span></span><br><span class="line">apply plugin: <span class="string">"com.ewerk.gradle.plugins.querydsl"</span></span><br><span class="line">def querydslSrcDir = <span class="string">'src/main/generated'</span></span><br><span class="line"></span><br><span class="line">querydsl &#123;</span><br><span class="line">    library = <span class="string">"com.querydsl:querydsl-apt"</span></span><br><span class="line">    jpa = <span class="keyword">true</span></span><br><span class="line">    querydslSourcesDir = querydslSrcDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [<span class="string">'src/main/java'</span>, querydslSrcDir]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def querydslSrcDir = <span class="string">'src/main/generated'</span></span><br><span class="line"></span><br><span class="line">querydsl &#123;</span><br><span class="line">    library = <span class="string">"com.querydsl:querydsl-apt"</span></span><br><span class="line">    jpa = <span class="keyword">true</span></span><br><span class="line">    querydslSourcesDir = querydslSrcDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileQuerydsl&#123;</span><br><span class="line">    options.annotationProcessorPath = configurations.querydsl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    querydsl.extendsFrom compileClasspath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [<span class="string">'src/main/java'</span>, querydslSrcDir]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>application.yml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">    datasource:</span><br><span class="line">        url: jdbc:mysql://localhost:3306/study</span><br><span class="line">        username: root</span><br><span class="line">        password: password</span><br></pre></td></tr></table></figure><blockquote><p>user.sql</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><blockquote><p>UserEntity.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">(String userId, String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-repository"><a href="#2-repository" class="headerlink" title="2. repository"></a>2. repository</h1><blockquote><p>반드시 읽고 왜 레포구성이 아래와 같이 진행되는지!</p></blockquote><p>아래의 설명을 읽어야하는이유! ( you must )</p><p><strong>you must</strong> first define a fragment interface and an implementation for the custom functionality, as shown in the following example:</p><p><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations</a></p><p>참고하면 좋을 사항<br><a href="https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl</a></p><blockquote><p>UserRepository.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">        <span class="title">JpaRepository</span>&lt;<span class="title">UserEntity</span>, <span class="title">Long</span>&gt;,</span></span><br><span class="line"><span class="class">//        <span class="title">QuerydslPredicateExecutor</span>&lt;<span class="title">UserEntity</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserRepositoryCustom.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">UserEntity <span class="title">getByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserRepositoryImpl.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.QUserEntity;</span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">extends</span> <span class="title">QuerydslRepositorySupport</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> QUserEntity table = QUserEntity.userEntity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@link</span> QuerydslRepositorySupport&#125; instance for the given domain type.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> domainClass must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserRepositoryImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(UserEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getByUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  from(table)</span><br><span class="line">                .where(table.userId.eq(userId))</span><br><span class="line">                .fetchOne();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Service-and-Domain-and-Controller"><a href="#3-Service-and-Domain-and-Controller" class="headerlink" title="3. Service and Domain and Controller"></a>3. Service and Domain and Controller</h1><p>에러 처리밑 중복처리 안되어있음 그냥 쓰는 방법만 알고 알아서</p><blockquote><p>UserService.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.domain.UserInfo;</span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> javassist.NotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserRepository userRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userRepository = userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        userRepository.save(</span><br><span class="line">                <span class="keyword">new</span> UserEntity(<span class="string">"beanbroker"</span>, <span class="string">"pkj"</span>, <span class="number">32</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserId</span><span class="params">(String userId)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Optional&lt;UserEntity&gt; userEntity = Optional.ofNullable(userRepository.getByUserId(userId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!userEntity.isPresent())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">"Not Found"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">        userInfo.setUserAge(userEntity.get().getAge());</span><br><span class="line">        userInfo.setUserName(userEntity.get().getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userEntity.get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserInfo.java</p></blockquote><p>entity와 client에게 갈 response가 왜따로따로 나가야할가라는 고민을 꼭하자…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userAge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserAge</span><span class="params">(<span class="keyword">int</span> userAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userAge = userAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserController.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserEntity <span class="title">testUser</span><span class="params">()</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        userService.createUser();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.getUserId(<span class="string">"beanbroker"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>약속이 있으므로 빠르게 튀튀 다음장에서 github과 다른 부분들 더자세하게</p><p>2019년 7월 17일 깃헙 추가</p><p><a href="https://github.com/beanbroker/querydsl_java_spring" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 링크</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-기본셋팅&quot;&gt;&lt;a href=&quot;#1-기본셋팅&quot; class=&quot;headerlink&quot; title=&quot;1. 기본셋팅&quot;&gt;&lt;/a&gt;1. 기본셋팅&lt;/h1&gt;&lt;p&gt;5버젼과 4버젼의 차이를 추후 블로그에 공유할예정! &lt;/p&gt;
&lt;p&gt;회사에서 gradle 4버젼
      
    
    </summary>
    
      <category term="Querydsl" scheme="http://yoursite.com/categories/Querydsl/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Querydsl/Spring/"/>
    
    
      <category term="Querydsl" scheme="http://yoursite.com/tags/Querydsl/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot With Querydsl Java (gradle 5.0 이상)</title>
    <link href="http://yoursite.com/2019/07/13/Java/java_querydsl_gradle5/"/>
    <id>http://yoursite.com/2019/07/13/Java/java_querydsl_gradle5/</id>
    <published>2019-07-13T02:50:00.000Z</published>
    <updated>2019-07-13T06:37:17.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-boot-With-Querydsl"><a href="#Spring-boot-With-Querydsl" class="headerlink" title="Spring boot With Querydsl"></a>Spring boot With Querydsl</h2><p>옛날부터 꼭 올려야 된다 생각하였지만….. 그렇게 하면… 너무 많아서 잠을 잘수가 없다..</p><p><a href="https://beanbroker.github.io/2019/02/10/Kotlin/kotlin_queryDsl1/" rel="external nofollow noopener noreferrer" target="_blank">코틀린 with QueryDsl</a> 과거 코틀린편은 올렸으나 자바로 한 적이 없어서…. 이글을 쓴다.</p><h2 id="1-Why-QueryDsl"><a href="#1-Why-QueryDsl" class="headerlink" title="1. Why QueryDsl"></a>1. Why QueryDsl</h2><ol><li>Type-check가 불가능하다. -&gt; SQL, JPQL은 문자열임</li><li>컴파일 시점에… 알수가 없다.</li><li>쿼리 실행이 어플리케이션에 실행되었을 때 아이고 저런.. 하며 후회한다.</li><li>그럼 어찌해야하느냐!! -&gt; QueryDsl 또는 Jooq를 쓰자</li></ol><blockquote><p>QueryDsl -&gt; 쓰면서 느끼는 점</p></blockquote><ol><li>Sql이 클래스처럼 Type이 있어 <strong>type-safe</strong>하다</li><li><strong>다이나미쿼리</strong>(동적쿼리)를 짜기 편하다.</li><li>Jooq가 QueryDsl보다 편하지만 아직은 대중적이지 않다. 개인적으로 Jooq는 rdb로 통계쿼리 뽑아내는 부분은 짱이다.</li></ol><h2 id="2-바로-실습"><a href="#2-바로-실습" class="headerlink" title="2. 바로 실습"></a>2. 바로 실습</h2><blockquote><p>build.gradle (메이븐일 경우 다른데곳에서 찾아서….하시길..)</p></blockquote><p>대충 아래처럼 추가라고 말했지만.. 이기준은 gradle 5이상에서의 셋팅이다.. 아.. 5버젼에서 처음 셋팅하느라 고생을 ….하였다. 빨리하고 자려고 했는데..</p><blockquote><p>build.gradle</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.1.5.RELEASE'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">    id <span class="string">"com.ewerk.gradle.plugins.querydsl"</span> version <span class="string">"1.0.10"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">중략</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> compile(<span class="string">"com.querydsl:querydsl-jpa"</span>) <span class="comment">// querydsl</span></span><br><span class="line">compile(<span class="string">"com.querydsl:querydsl-apt"</span>) <span class="comment">// querydsl</span></span><br><span class="line">runtimeOnly <span class="string">'mysql:mysql-connector-java'</span></span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">중략</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def querydslSrcDir = <span class="string">'src/main/generated'</span></span><br><span class="line"></span><br><span class="line">querydsl &#123;</span><br><span class="line">    library = <span class="string">"com.querydsl:querydsl-apt"</span></span><br><span class="line">    jpa = <span class="keyword">true</span></span><br><span class="line">    querydslSourcesDir = querydslSrcDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileQuerydsl&#123;</span><br><span class="line">    options.annotationProcessorPath = configurations.querydsl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    querydsl.extendsFrom compileClasspath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [<span class="string">'src/main/java'</span>, querydslSrcDir]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>application.yml</p></blockquote><p>ddl 트루로 하자 구찮다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">    datasource:</span><br><span class="line">        url: jdbc:mysql://localhost:3306/study</span><br><span class="line">        username: root</span><br><span class="line">        password: password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    jpa:</span><br><span class="line">        generate-ddl: true</span><br><span class="line">        hibernate.ddl-auto: create-drop</span><br></pre></td></tr></table></figure><blockquote><p>UserEntity.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">(String userId, String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-gradle-build"><a href="#3-gradle-build" class="headerlink" title="3. gradle build"></a>3. gradle build</h2><p>아래와 같은 QClass가 위에서 명시한 src/main/generate아래에 생성되어진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.querydsl.core.types.PathMetadataFactory.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.dsl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.PathMetadata;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Generated;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.Path;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * QUserEntity is a Querydsl query type for UserEntity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Generated</span>(<span class="string">"com.querydsl.codegen.EntitySerializer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QUserEntity</span> <span class="keyword">extends</span> <span class="title">EntityPathBase</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1472300146L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> QUserEntity userEntity = <span class="keyword">new</span> QUserEntity(<span class="string">"userEntity"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath age = createString(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> NumberPath&lt;Long&gt; id = createNumber(<span class="string">"id"</span>, Long.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath name = createString(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath userId = createString(<span class="string">"userId"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QUserEntity</span><span class="params">(String variable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(UserEntity.class, forVariable(variable));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QUserEntity</span><span class="params">(Path&lt;? extends UserEntity&gt; path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(path.getType(), path.getMetadata());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QUserEntity</span><span class="params">(PathMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(UserEntity.class, metadata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-repository"><a href="#4-repository" class="headerlink" title="4. repository"></a>4. repository</h2><p>아래의 설명을 읽어야하는이유! ( you must )</p><p><strong>you must</strong> first define a fragment interface and an implementation for the custom functionality, as shown in the following example:</p><p><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations</a></p><p>참고하면 좋을 사항<br><a href="https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-boot-With-Querydsl&quot;&gt;&lt;a href=&quot;#Spring-boot-With-Querydsl&quot; class=&quot;headerlink&quot; title=&quot;Spring boot With Querydsl&quot;&gt;&lt;/a&gt;Spring boot
      
    
    </summary>
    
      <category term="Querydsl" scheme="http://yoursite.com/categories/Querydsl/"/>
    
      <category term="Spring" scheme="http://yoursite.com/categories/Querydsl/Spring/"/>
    
    
      <category term="Querydsl" scheme="http://yoursite.com/tags/Querydsl/"/>
    
      <category term="Spring" scheme="http://yoursite.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>Docker Mysql 인코딩 해결</title>
    <link href="http://yoursite.com/2019/07/07/docekr_encode/"/>
    <id>http://yoursite.com/2019/07/07/docekr_encode/</id>
    <published>2019-07-07T09:50:00.000Z</published>
    <updated>2019-07-07T09:47:10.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-Mysql-인코딩-해결"><a href="#Docker-Mysql-인코딩-해결" class="headerlink" title="Docker Mysql 인코딩 해결"></a>Docker Mysql 인코딩 해결</h2><p>옛날부터 꼭 올려야 된다 생각하였지만..</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>꼭 도커 컨테이너를 실행시 뒤에 char set 설정을 해야 한다. 그렇지 않을 경우 한글 insert시 다깨져서 나온다….</p><h3 id="1-도커-mysql-접속"><a href="#1-도커-mysql-접속" class="headerlink" title="1. 도커 mysql 접속"></a>1. 도커 mysql 접속</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i -t some-mysql bash</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line">패스워드 입력</span><br></pre></td></tr></table></figure><h3 id="2-status-명령어-입력"><a href="#2-status-명령어-입력" class="headerlink" title="2. status 명령어 입력"></a>2. status 명령어 입력</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; status</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.26, for Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:6</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@localhost</span><br><span class="line">SSL:Not in use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:&apos;&apos;</span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:5.7.26 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:Localhost via UNIX socket</span><br><span class="line">Server characterset:utf8mb4</span><br><span class="line">Db     characterset:utf8mb4</span><br><span class="line">Client characterset:latin1</span><br><span class="line">Conn.  characterset:latin1</span><br><span class="line">UNIX socket:/var/run/mysqld/mysqld.sock</span><br><span class="line">Uptime:8 min 27 sec</span><br><span class="line"></span><br><span class="line">Threads: 3  Questions: 53  Slow queries: 0  Opens: 111  Flush tables: 1  Open tables: 104  Queries per second avg: 0.104</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><h3 id="3-뒤에-charset을-붙이지-않고-테스트-진행"><a href="#3-뒤에-charset을-붙이지-않고-테스트-진행" class="headerlink" title="3. 뒤에 charset을 붙이지 않고 테스트 진행"></a>3. 뒤에 charset을 붙이지 않고 테스트 진행</h3><p>docker run -d –name test-mysql -p 3308:3308 -e MYSQL_ROOT_PASSWORD=password mysql:5.7</p><h3 id="위와-차이점을-확인하자"><a href="#위와-차이점을-확인하자" class="headerlink" title="위와 차이점을 확인하자!"></a>위와 차이점을 확인하자!</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.26, for Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:2</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@localhost</span><br><span class="line">SSL:Not in use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:&apos;&apos;</span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:5.7.26 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:Localhost via UNIX socket</span><br><span class="line">Server characterset:latin1</span><br><span class="line">Db     characterset:latin1</span><br><span class="line">Client characterset:latin1</span><br><span class="line">Conn.  characterset:latin1</span><br><span class="line">UNIX socket:/var/run/mysqld/mysqld.sock</span><br><span class="line">Uptime:14 sec</span><br><span class="line"></span><br><span class="line">Threads: 1  Questions: 5  Slow queries: 0  Opens: 105  Flush tables: 1  Open tables: 98  Queries per second avg: 0.357</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><p>끝!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-Mysql-인코딩-해결&quot;&gt;&lt;a href=&quot;#Docker-Mysql-인코딩-해결&quot; class=&quot;headerlink&quot; title=&quot;Docker Mysql 인코딩 해결&quot;&gt;&lt;/a&gt;Docker Mysql 인코딩 해결&lt;/h2&gt;&lt;p&gt;옛날
      
    
    </summary>
    
      <category term="Docker" scheme="http://yoursite.com/categories/Docker/"/>
    
      <category term="mysql" scheme="http://yoursite.com/categories/Docker/mysql/"/>
    
    
      <category term="Docker" scheme="http://yoursite.com/tags/Docker/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Back up</title>
    <link href="http://yoursite.com/2019/07/07/back/"/>
    <id>http://yoursite.com/2019/07/07/back/</id>
    <published>2019-07-07T06:50:00.000Z</published>
    <updated>2019-07-07T09:00:01.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-blog-back-up-test"><a href="#Hexo-blog-back-up-test" class="headerlink" title="Hexo blog back up test"></a>Hexo blog back up test</h3><p>블로그를 옮길때 꼭 theme back-up을 해야함을.. 몸으로 느끼며…..u</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo-blog-back-up-test&quot;&gt;&lt;a href=&quot;#Hexo-blog-back-up-test&quot; class=&quot;headerlink&quot; title=&quot;Hexo blog back up test&quot;&gt;&lt;/a&gt;Hexo blog back up te
      
    
    </summary>
    
      <category term="HEXO" scheme="http://yoursite.com/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="http://yoursite.com/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>CI 3장, Amazon CodeStar</title>
    <link href="http://yoursite.com/2019/06/09/CI/codestar3/"/>
    <id>http://yoursite.com/2019/06/09/CI/codestar3/</id>
    <published>2019-06-09T09:10:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-CodeStar-3장"><a href="#Amazon-CodeStar-3장" class="headerlink" title="Amazon CodeStar 3장"></a>Amazon CodeStar 3장</h1><p><a href="https://beanbroker.github.io/2019/06/09/CI/codestar1/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CodeStar 1장</a> </p><p><a href="https://beanbroker.github.io/2019/06/09/CI/codestar2/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CodeStar 2장</a> </p><p>2장에서 깜빡한 부분이…. 깃이그노어를 추가해야된다는…것을 깜빡…</p><h2 id="STEP-14"><a href="#STEP-14" class="headerlink" title="STEP 14"></a>STEP 14</h2><ul><li>.gitignore 파일 추가</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line"></span><br><span class="line">### STS ###</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line">.sts4-cache</span><br><span class="line"></span><br><span class="line">### IntelliJ IDEA ###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line"></span><br><span class="line">### NetBeans ###</span><br><span class="line">/nbproject/private/</span><br><span class="line">/build/</span><br><span class="line">/nbbuild/</span><br><span class="line">/dist/</span><br><span class="line">/nbdist/</span><br><span class="line">/.nb-gradle/</span><br></pre></td></tr></table></figure><ul><li>깃 이그노어를 추가 후 push하자마자 아래의 사진과 같이 재배포 시작</li><li>커밋 이력이 보이며, 오른쪽에 연속배포가 변화함을 알수 있음</li><li>마스터 브랜치 기준으로 배포가 진행되니 develope branch생성하여 푸쉬하자!</li><li>해당 실습에서 배포 기준은 master로</li></ul><p><img src="/images/codestar/14.png" alt="14"></p><h2 id="STEP-15-마무리"><a href="#STEP-15-마무리" class="headerlink" title="STEP 15 마무리"></a>STEP 15 마무리</h2><blockquote><ol><li>테스트 코드 작성 중요성</li></ol></blockquote><ol><li>강제로 테스트코드에 무조건 fail 하는 코드 생성 후 master brach에 push시 빌드 실패하여 배포 안됨</li><li>이를 통해 사이드이펙트 미리 방지 할수 있으며 테스트 코드를 통한 음… 안정성? 및 안전한 배포 가능</li><li>깃 branch를 직접생성하거나 git-flow를 활용하여! 코드 리뷰를 진행해야 한다.</li></ol><blockquote><ol start="2"><li>codebuild</li></ol></blockquote><ol><li>aws codebuild를 통해 디폴트 환경변수 셋팅 가능</li><li>인증서 추가 가능 등등 다양한 빌드 옵션 추가 가능</li></ol><blockquote><ol start="3"><li>배포 브런치 선택가능</li></ol></blockquote><ol><li>어떠한 브런치 기준으로 커밋이되었을 때 자동으로 배포됨을 설정 가능</li></ol><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>CI의 중요성이나 테스트 코드 및 다양한 codestar 기능을 추가하고 싶으나! CI의 중요성은 이미 훌륭하신 개발자 분들께서 블로그에 올려두셨으니 참고 바람(꼭)</p><p>실제로 진행하면서 버튼 몇번으로 끝나서 무언가 쉽다 느끼지만 이것을 만들기 위한 aws노력에 감탄하며!</p><p>다양한 환경 구성을 통해 CI를 구축하며 노력하는 개발자가 되어야겠음을 반성</p><p>무언가 필요함을 느끼는 것을 전략! 그것을 풀어나가는 것이 전술! ( 개발을 가르쳐준 o효섭 개발자의 말을 따르면… ) - 전략이 중요하고 전술은 풀어과는 과정</p><p>CI을 필요함을 느껴 codestar로…… 다음주에는 travis를 통해 CI를 구축해볼 생각!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-CodeStar-3장&quot;&gt;&lt;a href=&quot;#Amazon-CodeStar-3장&quot; class=&quot;headerlink&quot; title=&quot;Amazon CodeStar 3장&quot;&gt;&lt;/a&gt;Amazon CodeStar 3장&lt;/h1&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Amazon" scheme="http://yoursite.com/categories/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/categories/Amazon/CodeStar/"/>
    
    
      <category term="Amazon" scheme="http://yoursite.com/tags/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/tags/CodeStar/"/>
    
  </entry>
  
  <entry>
    <title>CI 2장, Amazon CodeStar</title>
    <link href="http://yoursite.com/2019/06/09/CI/codestar2/"/>
    <id>http://yoursite.com/2019/06/09/CI/codestar2/</id>
    <published>2019-06-09T08:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-CodeStar-2장"><a href="#Amazon-CodeStar-2장" class="headerlink" title="Amazon CodeStar 2장"></a>Amazon CodeStar 2장</h1><p><a href="https://beanbroker.github.io/2019/06/09/CI/codestar1/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CodeStar 1장</a> 을 보고 오신 분들은 해당 2장을 이어서 나가시면 됩니다</p><p>스템 10으로 시작하는 이유는… 1장에서 이어서 나갔기 때문입니다.</p><h2 id="STEP-10"><a href="#STEP-10" class="headerlink" title="STEP 10"></a>STEP 10</h2><ul><li>1장에서 로그인 하였던 깃헙아이디로 깃헙 로그인을 하게되면 놀랍게도 기본으로 생성된 레포지토리를 확인 할수 있다.</li><li>readme.md파일에서 getting Started전까지만 보고 패스</li><li>해당 프로젝트를 clone 땡겨오자( cli, sourceTree, git kraken 등등)</li></ul><p><img src="/images/codestar/10.png" alt="10"></p><h2 id="STEP-11"><a href="#STEP-11" class="headerlink" title="STEP 11"></a>STEP 11</h2><ul><li>maven프로젝트로 기본 셋팅</li><li>간단한 헬로 컨트롤러와 테스트 코드가 작성되어 있음</li><li>gradle로 변경 가능(pom.xml 지우고, build.gradle 추가하고 등등….)</li></ul><p><img src="/images/codestar/11.png" alt="11"></p><blockquote><p>헬로 컨트롤러</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aws.codestar.projecttemplates.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Basic Spring web service controller that handles all GET requests.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MESSAGE_FORMAT = <span class="string">"Hello %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">helloWorldGet</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"World"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(createResponse(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">helloWorldPost</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"World"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(createResponse(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createResponse</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JSONObject().put(<span class="string">"Output"</span>, String.format(MESSAGE_FORMAT, name)).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>간단한 테스트 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aws.codestar.projecttemplates.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests for &#123;<span class="doctag">@link</span> HelloWorldController&#125;. Modify the tests in order to support your use case as you build your project.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"Tests for HelloWorldController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXPECTED_RESPONSE_VALUE = <span class="string">"Hello AWS CodeStar!"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT_NAME = <span class="string">"AWS CodeStar"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloWorldController controller = <span class="keyword">new</span> HelloWorldController();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializing variables before we run the tests.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@BeforeAll</span> for initializing static variables at the start of the test class execution.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@BeforeEach</span> for initializing variables before each test is run.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use as needed.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * De-initializing variables after we run the tests.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@AfterAll</span> for de-initializing static variables at the end of the test class execution.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@AfterEach</span> for de-initializing variables at the end of each test.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use as needed.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Basic test to verify the result obtained when calling &#123;<span class="doctag">@link</span> HelloWorldController#helloWorldGet&#125; successfully.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"Basic test for GET request"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity responseEntity = controller.helloWorldGet(INPUT_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify the response obtained matches the values we expect.</span></span><br><span class="line">        JSONObject jsonObjectFromResponse = <span class="keyword">new</span> JSONObject(responseEntity.getBody().toString());</span><br><span class="line">        assertEquals(EXPECTED_RESPONSE_VALUE, jsonObjectFromResponse.get(<span class="string">"Output"</span>));</span><br><span class="line">        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Basic test to verify the result obtained when calling &#123;<span class="doctag">@link</span> HelloWorldController#helloWorldPost&#125; successfully.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"Basic test for POST request"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testPostRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity responseEntity = controller.helloWorldPost(INPUT_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify the response obtained matches the values we expect.</span></span><br><span class="line">        JSONObject jsonObjectFromResponse = <span class="keyword">new</span> JSONObject(responseEntity.getBody().toString());</span><br><span class="line">        assertEquals(EXPECTED_RESPONSE_VALUE, jsonObjectFromResponse.get(<span class="string">"Output"</span>));</span><br><span class="line">        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약에 테스트코드가 존재하지 않는다면 CI 도입이 필요하지 않음</p><ul><li>코드를 작성 후 테스틐 코드 없이 배포를 자동으로 맡겨버리게 된다면 사이드이펙트 체크 불가</li><li>테스트 코드가 없다면 수동배포와 별차이가 없음</li></ul><h2 id="STEP-12"><a href="#STEP-12" class="headerlink" title="STEP 12"></a>STEP 12</h2><ul><li>글을 작성하다보니 빌드 및 배포 완료</li></ul><p><img src="/images/codestar/12.png" alt="12"></p><h2 id="STEP-13"><a href="#STEP-13" class="headerlink" title="STEP 13"></a>STEP 13</h2><ul><li>오른쪽 소스, 빌드, 디플로이 시간</li><li>커밋이력 또한 볼수 있음! jira컨플런스랑 연동도 가능합니다. </li></ul><p><img src="/images/codestar/13.png" alt="13"></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>많은 셋팅 없이 ci구축이 가능하며, aws에서 제공해주는 다양한 서비스들을 한번에 올라옴</li><li>3장으로 이어가야…. 할듯….</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-CodeStar-2장&quot;&gt;&lt;a href=&quot;#Amazon-CodeStar-2장&quot; class=&quot;headerlink&quot; title=&quot;Amazon CodeStar 2장&quot;&gt;&lt;/a&gt;Amazon CodeStar 2장&lt;/h1&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Amazon" scheme="http://yoursite.com/categories/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/categories/Amazon/CodeStar/"/>
    
      <category term="CI" scheme="http://yoursite.com/categories/Amazon/CodeStar/CI/"/>
    
    
      <category term="Amazon" scheme="http://yoursite.com/tags/Amazon/"/>
    
      <category term="CodeStar" scheme="http://yoursite.com/tags/CodeStar/"/>
    
      <category term="CI" scheme="http://yoursite.com/tags/CI/"/>
    
  </entry>
  
</feed>
