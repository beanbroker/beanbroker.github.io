<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>beanbroker blog</title>
  
  <subtitle>끝없는 공부</subtitle>
  <link href="/feed.xml" rel="self"/>
  
  <link href="https://beanbroker.github.io/"/>
  <updated>2019-12-14T11:40:24.855Z</updated>
  <id>https://beanbroker.github.io/</id>
  
  <author>
    <name>beanbroker</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSE(Server-Sent Events) with Spring kotlin</title>
    <link href="https://beanbroker.github.io/2019/12/14/Kotlin/kotlin_webflux_sse/"/>
    <id>https://beanbroker.github.io/2019/12/14/Kotlin/kotlin_webflux_sse/</id>
    <published>2019-12-14T11:30:00.000Z</published>
    <updated>2019-12-14T11:40:24.855Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SSE-Server-Sent-Events-with-Spring"><a href="#SSE-Server-Sent-Events-with-Spring" class="headerlink" title="SSE(Server-Sent Events) with Spring"></a>SSE(Server-Sent Events) with Spring</h1><p>SSE? -&gt; <a href="https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events" rel="external nofollow noopener noreferrer" target="_blank">SSE?</a> </p><p>실시간으로 서버의 데이터를 stream하는 기술 - 지속적으로 데이터가 변경을 노출해야 할 경우 또는 유저에게 알림을 날릴 경우에 쓰이면 좋을 것으로 보인다.</p><p>기존에는 서버의 변경된 데이터를 가져오기 위해선 새로고침 or 폴링 등을 활용 할 수 있다.</p><p>뜬금없지만 브러우저별 web socket max limit <a href="https://docs.pushtechnology.com/cloud/latest/manual/html/designguide/solution/support/connection_limitations.html" rel="external nofollow noopener noreferrer" target="_blank">limit of web socket?</a></p><h2 id="sample-with-spring-webflux-kotlin"><a href="#sample-with-spring-webflux-kotlin" class="headerlink" title="sample with spring webflux kotlin"></a>sample with spring webflux kotlin</h2><ol><li>Flux.interval</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping</span>(path = [<span class="string">"/test-sse"</span>], produces = [MediaType.TEXT_EVENT_STREAM_VALUE])</span><br><span class="line">    <span class="function">fun <span class="title">testSse</span><span class="params">()</span>: Flux&lt;String&gt;? </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Flux.interval(Duration.ofSeconds(<span class="number">10</span>))</span><br><span class="line">                .map &#123; <span class="string">"data from server - "</span> + LocalTime.now().toString() &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>브라우저에서 <a href="http://localhost:8080/test-sse" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/test-sse</a> 호출</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">data:data from server - 20:30:09.938</span><br><span class="line"></span><br><span class="line">data:data from server - 20:30:19.928</span><br><span class="line"></span><br><span class="line">data:data from server - 20:30:29.929</span><br><span class="line"></span><br><span class="line">data:data from server - 20:30:39.928</span><br></pre></td></tr></table></figure><p>클라이언트에서 새로고침 또는 request를 날리지 않았지만 지속적으로 데이터가 들어옴을 확인 할수 있다. 아… 정말 빠르고 쉽다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;SSE-Server-Sent-Events-with-Spring&quot;&gt;&lt;a href=&quot;#SSE-Server-Sent-Events-with-Spring&quot; class=&quot;headerlink&quot; title=&quot;SSE(Server-Sent Events) 
      
    
    </summary>
    
      <category term="SSE" scheme="https://beanbroker.github.io/categories/SSE/"/>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/SSE/Spring/"/>
    
      <category term="kotlin" scheme="https://beanbroker.github.io/categories/SSE/Spring/kotlin/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="kotlin" scheme="https://beanbroker.github.io/tags/kotlin/"/>
    
      <category term="SSE" scheme="https://beanbroker.github.io/tags/SSE/"/>
    
  </entry>
  
  <entry>
    <title>CORS 체크 curl</title>
    <link href="https://beanbroker.github.io/2019/12/01/etc/cors_curl/"/>
    <id>https://beanbroker.github.io/2019/12/01/etc/cors_curl/</id>
    <published>2019-12-01T06:30:00.000Z</published>
    <updated>2019-12-01T06:58:02.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CORS-체크-방법"><a href="#CORS-체크-방법" class="headerlink" title="CORS 체크 방법"></a>CORS 체크 방법</h1><p>cors란? -&gt; <a href="https://developer.mozilla.org/ko/docs/Web/HTTP/Access_control_CORS" rel="external nofollow noopener noreferrer" target="_blank">cors란?</a> </p><p>간단정리 : CORS (Cross Origin Resource Sharing) - 안전한 Origin들의 SOP 보안정책을 풀어줌</p><p>그렇다면 origin이란? - Hostname, port, Uri의 조합</p><p>직접! 모질라형들이 정리해둔 글을 읽어보자</p><p>아래의 코드가 있다고 가정한 후 우리가 로컬에서 테스트시 postman이나 스웨거를 통해 테스트 할때는 너무나도 당연히 ok라는 값을 받는다. 그러면 front는 잘받을가?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/v1/sample"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>아래의 curl을 활용하여 테스트 해보자</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -I -X OPTIONS \</span><br><span class="line">  -H <span class="string">"Origin: http://127.0.0.1:5003"</span> \</span><br><span class="line">  -H <span class="string">'Access-Control-Request-Method: GET'</span> \</span><br><span class="line">  -H <span class="string">'Content-Type: application/json'</span> \</span><br><span class="line">  http://localhost:9001/v1/sample 2&gt;&amp;1 | grep <span class="string">'Access-Control-Allow-Origin'</span></span><br></pre></td></tr></table></figure><p>서버의 port는 8080, 프론트가 사용하는 port는 5003이다.(물론 호스트명과 포트가 같게 셋팅되어있으면 우리는 쉽게 넘어갈수 있다.)<br>위의 curl을 터미널에서 실행시 아무런 값도 나오지 않는다. 아무런 값이 나오지 않는 다는 것은 cross origin 에러는 크롬 검사도구 등에서 발견할수 있다.</p><p>아래처럼 @CrossOrigin를 추가하게 되면 해당 엔드포인트 전역을 허용해준다.<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/v1/sample"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위의 curl을 실행하면 <strong>Access-Control-Allow-Origin: *</strong> 전부를 허용함을 확인할수 있다.</p><p>아.. 그냥 curl을 통해 cors확인하는 방법만 적으려고 했는데 블로그가 길어지고 있다…</p><h2 id="특정-origin만-cors-허용시"><a href="#특정-origin만-cors-허용시" class="headerlink" title="특정 origin만 cors 허용시"></a>특정 origin만 cors 허용시</h2><p>아래의 코드를 작성 후 실행<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebCorsConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">"/**"</span>).allowedOrigins(<span class="string">"http://127.0.0.1:5003"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위의 curl을 실행하게되면 <strong>Access-Control-Allow-Origin: <a href="http://127.0.0.1:5003" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1:5003</a></strong> 결과를 얻을수 있다.</p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>프론트 개발자들과 개발을 진행하다가 cors확인 부탁드려요 하면 직접 front자리에 가거나 front 코드를 실행하지 않고도 아래의 스크립트를 잘 활용하자!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -I -X OPTIONS \</span><br><span class="line">  -H <span class="string">"Origin: http://127.0.0.1:5003"</span> \</span><br><span class="line">  -H <span class="string">'Access-Control-Request-Method: GET'</span> \</span><br><span class="line">  -H <span class="string">'Content-Type: application/json'</span> \</span><br><span class="line">  http://localhost:9001/v1/sample 2&gt;&amp;1 | grep <span class="string">'Access-Control-Allow-Origin'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CORS-체크-방법&quot;&gt;&lt;a href=&quot;#CORS-체크-방법&quot; class=&quot;headerlink&quot; title=&quot;CORS 체크 방법&quot;&gt;&lt;/a&gt;CORS 체크 방법&lt;/h1&gt;&lt;p&gt;cors란? -&amp;gt; &lt;a href=&quot;https://develope
      
    
    </summary>
    
      <category term="CORS" scheme="https://beanbroker.github.io/categories/CORS/"/>
    
    
      <category term="CORS" scheme="https://beanbroker.github.io/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>Java8 default method</title>
    <link href="https://beanbroker.github.io/2019/11/09/Java/Java8_default_method/"/>
    <id>https://beanbroker.github.io/2019/11/09/Java/Java8_default_method/</id>
    <published>2019-11-09T12:30:00.000Z</published>
    <updated>2019-11-09T12:15:52.126Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-default-method"><a href="#Java-default-method" class="headerlink" title="Java default method"></a>Java default method</h1><p>해당 글은<br><a href="http://book.interpark.com/product/BookDisplay.do?_method=detail&amp;sc.prdNo=312915546&amp;gclid=CjwKCAiA5JnuBRA-EiwA-0ggPf6YNFuNagNQ_hcc550NLsYURaYXUo5zRptwEdMxaBRqslZcR74k5xoCRK0QAvD_BwE" rel="external nofollow noopener noreferrer" target="_blank">자바8 인 액션</a> 의 내용을 포함하고 있습니다.</p><ul><li>전통 자바에선 인터페이스와 관련 메서드는 항상 함께한다.</li><li>Java 7 -&gt; 8로 올라가면서 문제가 발생하지 않을가? <ul><li>자바 List 인터페이스의 특정 method가 변경되면 기존 List 인터페이스를 구현한 모든 컬렉션프레임워크의 모든 클래스를 고쳐야 한다는 것이다.</li></ul></li></ul><blockquote><p>자바 8은 이를 어떻게 해결하였는가?</p></blockquote><ul><li>인터페이스의 기본 구현을 제공할수 있도록 default method 제공</li></ul><p>기존 인터페이스를 쓰던 클래스들은 디폴트 메서드를 통해 기존 코드를 수정 하지 않고 인터페이스들을 바꿀 수 있다.</p><p>대표적인 예를 찾아보자</p><p>거의 모든 서비스 비지니스로직은 컬랙션프레임워크를 많이 쓰게 된다 생각한다. 자바8하면 떠오르는 stream!!!!</p><p>아래의 예시를 보자</p><blockquote><p>Collection interface</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Collection</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">Iterable</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a sequential &#123;<span class="doctag">@code</span> Stream&#125; with this collection as its source.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method should be overridden when the &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment">     * method cannot return a spliterator that is &#123;<span class="doctag">@code</span> IMMUTABLE&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> CONCURRENT&#125;, or &lt;em&gt;late-binding&lt;/em&gt;. (See &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment">     * for details.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * The default implementation creates a sequential &#123;<span class="doctag">@code</span> Stream&#125; from the</span></span><br><span class="line"><span class="comment">     * collection's &#123;<span class="doctag">@code</span> Spliterator&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a sequential &#123;<span class="doctag">@code</span> Stream&#125; over the elements in this collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">stream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a possibly parallel &#123;<span class="doctag">@code</span> Stream&#125; with this collection as its</span></span><br><span class="line"><span class="comment">     * source.  It is allowable for this method to return a sequential stream.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;This method should be overridden when the &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment">     * method cannot return a spliterator that is &#123;<span class="doctag">@code</span> IMMUTABLE&#125;,</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@code</span> CONCURRENT&#125;, or &lt;em&gt;late-binding&lt;/em&gt;. (See &#123;<span class="doctag">@link</span> #spliterator()&#125;</span></span><br><span class="line"><span class="comment">     * for details.)</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@implSpec</span></span></span><br><span class="line"><span class="comment">     * The default implementation creates a parallel &#123;<span class="doctag">@code</span> Stream&#125; from the</span></span><br><span class="line"><span class="comment">     * collection's &#123;<span class="doctag">@code</span> Spliterator&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> a possibly parallel &#123;<span class="doctag">@code</span> Stream&#125; over the elements in this</span></span><br><span class="line"><span class="comment">     * collection</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@since</span> 1.8</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">default</span> Stream&lt;E&gt; <span class="title">parallelStream</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StreamSupport.stream(spliterator(), <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>디폴트 메서드가 있음으로 과거와 달리 추가된 메소드를 모든 클래스가에서 새로 정의해야하는 일을 사라지게 되었다.</p><h2 id="주의점"><a href="#주의점" class="headerlink" title="주의점"></a>주의점</h2><blockquote><p>DoSomethingFirst interface<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DoSomethingFirst</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Do something from first"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>DoSomethingSecond interface<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DoSomethingSecond</span> <span class="keyword">extends</span> <span class="title">DoSomethingFirst</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Do something from second"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>DoSomething class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoSomething</span> <span class="keyword">implements</span> <span class="title">DoSomethingFirst</span>, <span class="title">DoSomethingSecond</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> DoSomething().doSomething();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>무엇이 호출될가?<br>정답은 Do something from second</p><p>규칙을 알자!</p><ol><li>클래스가 항상 최우선. 클래스는 슈퍼클래스에서 정의한 메서드가 디폴트 메서드보다 우선이다.</li><li>1번 규칙 이외 상황에선 서브인터페이스가 이긴다. 즉 위의 Second가 First를 상속 받는다면 Second가 이긴다.</li><li>여러 인터페이스를 구현하는 클래스가 명시적으로 디폴트 메서드를 오버라이드하고 호출하면 우선순위가 정해진다.</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-default-method&quot;&gt;&lt;a href=&quot;#Java-default-method&quot; class=&quot;headerlink&quot; title=&quot;Java default method&quot;&gt;&lt;/a&gt;Java default method&lt;/h1&gt;&lt;p&gt;해당
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="default method" scheme="https://beanbroker.github.io/categories/Java/default-method/"/>
    
      <category term="Java8" scheme="https://beanbroker.github.io/categories/Java/default-method/Java8/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="default method" scheme="https://beanbroker.github.io/tags/default-method/"/>
    
      <category term="Java8" scheme="https://beanbroker.github.io/tags/Java8/"/>
    
  </entry>
  
  <entry>
    <title>understanding proxy usage in Spring</title>
    <link href="https://beanbroker.github.io/2019/10/12/Spring/understanding_proxy/"/>
    <id>https://beanbroker.github.io/2019/10/12/Spring/understanding_proxy/</id>
    <published>2019-10-12T10:30:00.000Z</published>
    <updated>2019-10-12T11:35:02.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="understanding-proxy-usage-in-Spring"><a href="#understanding-proxy-usage-in-Spring" class="headerlink" title="understanding proxy usage in Spring"></a>understanding proxy usage in Spring</h1><p>자료를 찾고 찾다보니… 좋은글을 발견. </p><p>Only external method calls coming in through the proxy are intercepted. This means that self-invocation, in effect, a method within the target object calling another method of the target object, will not lead to an actual cache interception at runtime even if the invoked method is marked with @Cacheable.</p><p><a href="https://spring.io/blog/2012/05/23/transactions-caching-and-aop-understanding-proxy-usage-in-spring" rel="external nofollow noopener noreferrer" target="_blank">Transactions, Caching and AOP: understanding proxy usage in Spring</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;understanding-proxy-usage-in-Spring&quot;&gt;&lt;a href=&quot;#understanding-proxy-usage-in-Spring&quot; class=&quot;headerlink&quot; title=&quot;understanding proxy us
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Java/Spring/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 10장 예외 - 2</title>
    <link href="https://beanbroker.github.io/2019/10/06/effective_java/effective_10-2/"/>
    <id>https://beanbroker.github.io/2019/10/06/effective_java/effective_10-2/</id>
    <published>2019-10-06T09:00:00.000Z</published>
    <updated>2019-10-06T08:54:34.404Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Effective-Java-10장-예외-2"><a href="#Effective-Java-10장-예외-2" class="headerlink" title="Effective Java 10장 예외 - 2"></a>Effective Java 10장 예외 - 2</h1><p><a href="http://www.yes24.com/Product/Goods/65551284" rel="external nofollow noopener noreferrer" target="_blank">Effective Java 3/E</a> </p><p>해당 블로그는 Effective 3을 읽고 공부한 내용을 정리한 블로그입니다.</p><h2 id="P396-표준-예외를-사용하라"><a href="#P396-표준-예외를-사용하라" class="headerlink" title="P396 표준 예외를 사용하라"></a>P396 표준 예외를 사용하라</h2><ul><li>Exception, RuntimeException, Throwable, error는 직접 재사용하지 말자. 해당 클래스들은 추상 클래스라 생각하자</li></ul><h2 id="P399-추상화-수준에-맞는-예외를-던지라"><a href="#P399-추상화-수준에-맞는-예외를-던지라" class="headerlink" title="P399 추상화 수준에 맞는 예외를 던지라"></a>P399 추상화 수준에 맞는 예외를 던지라</h2><ul><li>무작정 예외를 전파하는 것보다 예외 번역이 우수한 방법이지만, 그렇다고 남용해서는 안된다.</li></ul><h2 id="P402-메서드가-던지는-모든-예외를-문서화하라"><a href="#P402-메서드가-던지는-모든-예외를-문서화하라" class="headerlink" title="P402 메서드가 던지는 모든 예외를 문서화하라"></a>P402 메서드가 던지는 모든 예외를 문서화하라</h2><ul><li>검사 예외는 항상 별도로 선언하고, 각 예외가 발생하는 상황을 자바독의 @throws 태그를 사용하여 정확히 문서화하자.</li><li>비검사 예외는 메서드 선언의 throws 목록에 넣지말자.</li></ul><h2 id="P404-예외의-상세-메시지에-실패-관련-정보를-담으라"><a href="#P404-예외의-상세-메시지에-실패-관련-정보를-담으라" class="headerlink" title="P404 예외의 상세 메시지에 실패 관련 정보를 담으라"></a>P404 예외의 상세 메시지에 실패 관련 정보를 담으라</h2><h1 id="예외-처리-중요-키워드"><a href="#예외-처리-중요-키워드" class="headerlink" title="예외 처리 중요 키워드"></a>예외 처리 중요 키워드</h1><blockquote><p>중요 키워드</p></blockquote><ul><li>try</li><li>catch</li><li>finally</li><li>throw</li></ul><h2 id="1-try"><a href="#1-try" class="headerlink" title="1. try"></a>1. try</h2><ul><li>코드를 작성하며 아마 Exception이 발생 할 곳을 block 할 때</li><li>try-block은 반드시 catch-block 또는 finally-block이 따라온다</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//에러가 발생 할수 있는 코드 블록</span></span><br><span class="line">    <span class="comment">//요즘은 ide에서 알아서 경고를 내줌</span></span><br><span class="line">&#125;<span class="keyword">catch</span> (e: Exception)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-catch"><a href="#2-catch" class="headerlink" title="2. catch"></a>2. catch</h2><ul><li>try block에서 발생한 에러를 핸들링</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (e: Exception)&#123;</span><br><span class="line">    <span class="comment">//try block에서 발생한 에러를 핸들링</span></span><br><span class="line">    <span class="comment">//또는 발생한 예외를 전환해서 throw</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-finally"><a href="#3-finally" class="headerlink" title="3. finally"></a>3. finally</h2><ul><li>try-catch 블록과 연관지어져 있다.</li><li>connection(database, socket, filestream) 을 할때 커넥션을 닫을 때</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//에러가 발생 할수 있는 코드 블록</span></span><br><span class="line">        <span class="comment">//요즘은 ide에서 알아서 경고를 내줌</span></span><br><span class="line">    &#125;<span class="keyword">catch</span> (e: Exception)&#123;</span><br><span class="line">         <span class="comment">//try block에서 발생한 에러를 핸들링</span></span><br><span class="line">        <span class="comment">//또는 발생한 예외를 전환해서 throw</span></span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">//try-catch 블록이 끝난 후 진행</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="4-throw"><a href="#4-throw" class="headerlink" title="4. throw"></a>4. throw</h2><ul><li>말 그대로 예외를 던진다</li></ul><p>정말 말이 안되지만 아래와 같은 코드가 있다 가정해보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">"사장님 마표대교는 막혔는데요?"</span>)</span><br><span class="line">    <span class="keyword">throw</span> NullPointerException(<span class="string">"마표대교가 막힘"</span>)</span><br><span class="line"></span><br><span class="line">&#125;<span class="keyword">catch</span> (e : Exception)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 한강에 다리가 하나냐? 한남대교로 가 &lt;--</span></span><br><span class="line">    <span class="comment">// 2. 또는 정의한 예외를 던짐</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Effective-Java-10장-예외-2&quot;&gt;&lt;a href=&quot;#Effective-Java-10장-예외-2&quot; class=&quot;headerlink&quot; title=&quot;Effective Java 10장 예외 - 2&quot;&gt;&lt;/a&gt;Effective Java 
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Java/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Effective Java 10장 예외 - 1</title>
    <link href="https://beanbroker.github.io/2019/10/06/effective_java/effective_10-1/"/>
    <id>https://beanbroker.github.io/2019/10/06/effective_java/effective_10-1/</id>
    <published>2019-10-06T08:00:00.000Z</published>
    <updated>2019-10-06T07:54:47.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Effective-Java-10장-예외-1"><a href="#Effective-Java-10장-예외-1" class="headerlink" title="Effective Java 10장 예외 - 1"></a>Effective Java 10장 예외 - 1</h1><p><a href="http://www.yes24.com/Product/Goods/65551284" rel="external nofollow noopener noreferrer" target="_blank">Effective Java 3/E</a> </p><p>해당 블로그는 Effective 3을 읽고 공부한 내용을 정리한 블로그입니다.</p><h2 id="P386-예외는-진자-예외-상황에서만-사용하라"><a href="#P386-예외는-진자-예외-상황에서만-사용하라" class="headerlink" title="P386 예외는 진자 예외 상황에서만 사용하라"></a>P386 예외는 진자 예외 상황에서만 사용하라</h2><ul><li>예외는 오직 예외 상황에서만 써야 한다. 절대로 일상적인 제어 흐름용으로 쓰여선 안된다.</li></ul><h2 id="P390-복구할-수-있는-상황에서는-검사-예외를-프로그래밍-오류에는-런타임-예외를-사용하라"><a href="#P390-복구할-수-있는-상황에서는-검사-예외를-프로그래밍-오류에는-런타임-예외를-사용하라" class="headerlink" title="P390 복구할 수 있는 상황에서는 검사 예외를, 프로그래밍 오류에는 런타임 예외를 사용하라"></a>P390 복구할 수 있는 상황에서는 검사 예외를, 프로그래밍 오류에는 런타임 예외를 사용하라</h2><blockquote><p>문제 상황을 알리는 타입(throwable)</p></blockquote><ul><li>검사 예외 : 호출하는 쪽에서 복구를 해야하는 상황이면 검사 예외를 사용</li><li>런타임 예외 : 프로그래밍 오류를 나타낼 때<ul><li>ex : Array?IndexOutOfBoundsException이 발생 즉 전제조건을 만족하지 못할때 발생</li></ul></li><li>에러 : JVM자원 부족, 불변식 깨짐 등 더 이상 수행을 계속할수 상황에 삳용<ul><li>구현하는 비검사 throawable든 모두 RuntimeException의 하위 클래스</li></ul></li></ul><p><img src="https://www.oracleimg.com/technetwork/articles/entarch/javaexceptions-107916.jpg" alt="Java Exception Class Hierarchy" title="Java Exception Class Hierarchy"></p><p><img src="https://www.benchresources.net/wp-content/uploads/2017/02/exception-hierarchy-in-java.png" alt="Java Exception Error" title="Java Exception Error"></p><blockquote><p>Exception - Error 간단 정리</p></blockquote><table><thead><tr><th>Exception</th><th>Error</th></tr></thead><tbody><tr><td>개발자가 프로그래밍상 핸들링 가능하다면</td><td>Error like 메모리관련</td></tr><tr><td>처리 가능</td><td>불가능</td></tr><tr><td>Exception is due to programmatic logic and it is recoverable. Therefore it must be handled using either try-catch block or throws clause</td><td>Error is due to lack of system resources and it is non-recoverable. Therefore it isn’t feasible to handled by programmer</td></tr></tbody></table><blockquote><p>checked - unchecked 간단 정리</p></blockquote><table><thead><tr><th></th><th>checked exception</th><th>unchecked exception</th></tr></thead><tbody><tr><td>처리 여부</td><td>반드시 예외 처리해야함</td><td>명시적인 처리를 강제하지 않음</td></tr><tr><td>확인 시점</td><td>컴파일 단계(실행 전에 알수 있음, ide에서 컴파일시 이미 체크를 다해줌, 아 좋은 세상)</td><td>실행 단계(실행 해야 알수 있음)</td></tr><tr><td>예외 발생시 transaction 처리</td><td>롤백하지 않은</td><td>롤백 함</td></tr><tr><td>대표 예외</td><td>RuntimeException을 제외한 모든 예외 <br> ex) SqlException,</td><td>runtime에 발생하는 예외 <br> RuntimeExceoption 하위의 모든 예외 <br> 널포인터익셉션 <br> IndexOutOfBoundExcepiton</td></tr></tbody></table><h2 id="P393-필요-없는-검사-예외-사용은-피하라"><a href="#P393-필요-없는-검사-예외-사용은-피하라" class="headerlink" title="P393 필요 없는 검사 예외 사용은 피하라"></a>P393 필요 없는 검사 예외 사용은 피하라</h2><ul><li>꼭 필요한 곳에서 사용하면 프로그램의 안전성을 높여주지만, 남용하면 쓰레기(직역…) 가 된다. Api 호출시 예외 상황에서 복수할 방법이 없다면 비검사 예외를 던지자. </li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Effective-Java-10장-예외-1&quot;&gt;&lt;a href=&quot;#Effective-Java-10장-예외-1&quot; class=&quot;headerlink&quot; title=&quot;Effective Java 10장 예외 - 1&quot;&gt;&lt;/a&gt;Effective Java 
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Java/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Redis Client with Kotlin Spring</title>
    <link href="https://beanbroker.github.io/2019/10/05/Kotlin/spring_redis_client_kotlin/"/>
    <id>https://beanbroker.github.io/2019/10/05/Kotlin/spring_redis_client_kotlin/</id>
    <published>2019-10-05T10:00:00.000Z</published>
    <updated>2019-10-05T08:55:59.141Z</updated>
    
    <content type="html"><![CDATA[<h1 id="자바-Redis-Client"><a href="#자바-Redis-Client" class="headerlink" title="자바 Redis Client"></a>자바 Redis Client</h1><p><a href="https://github.com/xetorthio/jedis" rel="external nofollow noopener noreferrer" target="_blank">jedis github</a> </p><p><a href="https://github.com/lettuce-io/lettuce-core" rel="external nofollow noopener noreferrer" target="_blank">lettuce github</a> </p><p><a href="https://lettuce.io/core/release/reference/" rel="external nofollow noopener noreferrer" target="_blank">lettuce spring</a> </p><p>자바에서 Redis를 쓸 때 대표적으로 2개의 클라이언트가 있다.</p><p>Jedis와 lettuce</p><p>Lettuce - Advanced Java Redis client 라 소개 되어있으며, 비동기를 지원한다. 또한 스프링부트 2.0 위의 버젼부터는 lettuce를 기본적으로 redis client로 사용하고 있다. 즉…. Redis를 사용할 때 lettuce를 쓰자이다.. 물론.. 이미 부트 2.0에서 lettuce를 default로 물고 있으니 자연스럽게 2.0버젼부터는 쓰게 될것이다.</p><blockquote><p>Lettuce is a scalable thread-safe Redis client based on netty and Reactor. Lettuce provides synchronous, asynchronous and reactive APIs to interact with Redis.</p></blockquote><p>2.0 이하 버젼에서 lettuce를 적용해본적은 없으나 지금 테스트 해보는 부분은 부트2.0 이상이다.</p><h1 id="간단-Spring-boot-2-0-redis-설정"><a href="#간단-Spring-boot-2-0-redis-설정" class="headerlink" title="간단 Spring boot 2.0 redis 설정"></a>간단 Spring boot 2.0 redis 설정</h1><p>블로그를 어디 찾다가 보면 무료 redis cloud를 쓸수 있지만 귀찮으므로 내장 redis를 활용해보자.. 상용환경에서는 절대 쓰면 안된다. </p><p>코드는 kotlin으로 작성</p><blockquote><p>EmbeddedRedisConfig<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmbeddedRedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPort: Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> redisServer: RedisServer? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="meta">@Throws</span>(IOException::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">    <span class="title">fun</span> <span class="title">redisServer</span>() </span>&#123;</span><br><span class="line">        redisServer = RedisServer(redisPort)</span><br><span class="line">        redisServer!!.start()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="function">fun <span class="title">stopRedis</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (redisServer != <span class="keyword">null</span>) &#123;</span><br><span class="line">            redisServer!!.stop()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'org.springframework.boot:spring-boot-starter-data-redis'</span></span><br><span class="line"><span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'it.ozimov'</span>, name: <span class="string">'embedded-redis'</span>, version: <span class="string">'0.7.2'</span></span><br></pre></td></tr></table></figure><p>build.gradle추가 </p><h2 id="A-Lettuce-설정"><a href="#A-Lettuce-설정" class="headerlink" title="A - Lettuce 설정"></a>A - Lettuce 설정</h2><p>아래와 같이 default spring redis client인 lettuce설정</p><p>정상적으로 작동함을 확인 할수 있으며 물론 CacheErrorHandler 오버라이드 해서 반드시 더 자세한 에러처리를 해야한다.</p><p>또한 value 시리얼라이져를 왜 잭슨 2로 해야 하는지 고민해야한다. 다른것으로 해보고 테스트 해야하지만 이번 블로그는 이와 해당내용되지 않기 때문에 패스</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisRepositories</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line">class RedisConfig : CachingConfigurerSupport() &#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisHost: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPort: Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPassword: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>()</span><br><span class="line">    <span class="function">fun <span class="title">lettuceConnectionFactory</span><span class="params">()</span>: RedisConnectionFactory </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> LettuceConnectionFactory(redisHost!!, redisPort)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"redisTemplateWithLettuce"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">redisTemplateWithLettuce</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>: RedisTemplate&lt;*, *&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        val template = RedisTemplate&lt;String, Any&gt;()</span><br><span class="line">        template.keySerializer = StringRedisSerializer()</span><br><span class="line">        template.valueSerializer = GenericJackson2JsonRedisSerializer()</span><br><span class="line">        template.hashKeySerializer = StringRedisSerializer()</span><br><span class="line">        template.hashValueSerializer = GenericJackson2JsonRedisSerializer()</span><br><span class="line"></span><br><span class="line">        template.setConnectionFactory(lettuceConnectionFactory())</span><br><span class="line">        template.setEnableTransactionSupport(<span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="B-Jeddis-설정"><a href="#B-Jeddis-설정" class="headerlink" title="B - Jeddis 설정"></a>B - Jeddis 설정</h2><p>아래와 같이 설정하면 에러가 발생한다 왜일가?</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableRedisRepositories</span></span><br><span class="line"><span class="meta">@EnableCaching</span></span><br><span class="line">class RedisConfig : CachingConfigurerSupport() &#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisHost: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPort: Int = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"\$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> val redisPassword: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>()</span><br><span class="line">    <span class="function">fun <span class="title">jedisConnectionFactory</span><span class="params">()</span>: JedisConnectionFactory </span>&#123;</span><br><span class="line"></span><br><span class="line">        val redisStandaloneConfiguration = RedisStandaloneConfiguration(redisHost!!, redisPort)</span><br><span class="line">        redisStandaloneConfiguration.setPassword(redisPassword)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JedisConnectionFactory(redisStandaloneConfiguration)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(<span class="string">"redisTemplateWithJedis"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">redisTemplateWithJedis</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    )</span>: RedisTemplate&lt;*, *&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        val template = RedisTemplate&lt;String, Any&gt;()</span><br><span class="line">        template.keySerializer = StringRedisSerializer()</span><br><span class="line">        template.valueSerializer = GenericJackson2JsonRedisSerializer()</span><br><span class="line">        template.hashKeySerializer = StringRedisSerializer()</span><br><span class="line">        template.hashValueSerializer = GenericJackson2JsonRedisSerializer()</span><br><span class="line"></span><br><span class="line">        template.setConnectionFactory(jedisConnectionFactory())</span><br><span class="line">        template.setEnableTransactionSupport(<span class="keyword">true</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> template</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &apos;cacheManager&apos; defined in class path resource [org/springframework/boot/autoconfigure/cache/RedisCacheConfiguration.class]: Unsatisfied dependency expressed through method &apos;cacheManager&apos; parameter 0; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name &apos;jedisConnectionFactory&apos; defined in class path resource [com/beanbroker/sample/config/cache/RedisConfig.class]: Bean instantiation via factory method failed; nested exception is org.springframework.beans.BeanInstantiationException: Failed to instantiate [org.springframework.data.redis.connection.jedis.JedisConnectionFactory]: Factory method &apos;jedisConnectionFactory&apos; threw exception; nested exception is java.lang.NoClassDefFoundError: redis/clients/jedis/Tuple</span><br></pre></td></tr></table></figure><p>스프링 2.0이상으로 올라오면서 jedis와 관련된 dependency를 추가해주지 않으면 deprecated되었기 때문에 올릴수가 없다. 아래와 같이 build.gradle에 추가하고 사용해야한다.</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation <span class="string">'redis.clients:jedis'</span></span><br></pre></td></tr></table></figure><p>스프리 부트1.5에서 정말 만약에 2.0으로 올렸을 경우 너무나도 많은 설정이 변경되어야 한다. 가능할지는 모르겠지만….</p><p>끝으로 물론 성능 테스트나 다른 테스트를 진행해야 하지만 이미 많은 선배개발자들이 성능관련 테스트를 이미 많이 진행해주었기에 글을 마치며! 사실 예외와 관련된 글을 쓰려고 하였으나 너무나……. 부족하여.. 블로그에 올릴수가 없다…</p><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">code sample github</a> </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;자바-Redis-Client&quot;&gt;&lt;a href=&quot;#자바-Redis-Client&quot; class=&quot;headerlink&quot; title=&quot;자바 Redis Client&quot;&gt;&lt;/a&gt;자바 Redis Client&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://g
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
      <category term="Redis" scheme="https://beanbroker.github.io/categories/Kotlin/Redis/"/>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Kotlin/Redis/Spring/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Redis" scheme="https://beanbroker.github.io/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>Junit @Before vs @BeforeClass</title>
    <link href="https://beanbroker.github.io/2019/10/05/Java/test_after_before/"/>
    <id>https://beanbroker.github.io/2019/10/05/Java/test_after_before/</id>
    <published>2019-10-05T10:00:00.000Z</published>
    <updated>2019-10-06T06:33:04.386Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Junit-Before-Beforeclass"><a href="#Junit-Before-Beforeclass" class="headerlink" title="Junit Before? Beforeclass?"></a>Junit Before? Beforeclass?</h2><p>테스트 코드를 짜며 (더 잘짜고 싶다… 하..) 짠 테스크 코드에 대한 리뷰를 받았다. 선배 개발자로부터 @Before과 @BeforeClass 차이를 아냐 물어보시기에 저는 ㅠㅠㅠㅠ를 외쳤다. 요즘 항상 좋으신 말을 해주시는 선배 개발자이시다.</p><p>현재 개발하는 환경이 Junit4이지만 해당 블로그는 Junit5로 작성할 예정이다</p><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">code sample github</a> </p><h2 id="Junit4-gt-Junit5"><a href="#Junit4-gt-Junit5" class="headerlink" title="Junit4 -&gt; Junit5"></a>Junit4 -&gt; Junit5</h2><table><thead><tr><th>Junit4</th><th>Junit5</th><th>특징</th></tr></thead><tbody><tr><td>@BeforeClass</td><td>@BeforeAll</td><td><br> - 테스트 클래스의 모든 테스트 메소드가 실행되기 전에 실행 <br>-  static method <br>- 초기화 코드가 들어갈수 있음</td></tr><tr><td>@AfterClass</td><td>@AfterAll</td><td><br> - 테스트 클래스의 모든 테스트 메소드가 종료된 후 실행 <br>-  static method <br>- 코드를 클린업 할수 있음</td></tr><tr><td>@Before</td><td>@BeforeEach</td><td><br> - 테스트 클래스 안의 테스트 메소드가 한번 실행 될때 마다 실행   <br>-  초기화 코드를 재설정 할수 있음 하지만 초기화 처럼 쓰면 테스트시 힘들어짐</td></tr><tr><td>@After</td><td>@AfterEach</td><td><br> -테스트 클래스 안의 테스트 메소드가 한번 실행 될때 마다 실행  <br>- 예를 들어 테스트가 끝나고 롤백해야 할때</td></tr></tbody></table><blockquote><p>이미지 설명</p></blockquote><p><img src="https://i.stack.imgur.com/HKspz.png" alt="실행 순서" title="실행 순서"></p><p>위의 이미지 순서대로 테스트 코드를 작성해보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"BeforeAll"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeEach</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"BeforeEach"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterEach</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AfterEach"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterAll</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"AfterAll"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCodeOne</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testCodeOne start "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCodeTwo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"testCodetwo start "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>실행결과 아래와 같은 결과를 얻는다<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BeforeAll</span><br><span class="line">BeforeEach</span><br><span class="line">testCodeOne start </span><br><span class="line">AfterEach</span><br><span class="line">BeforeEach</span><br><span class="line">testCodetwo start </span><br><span class="line">AfterEach</span><br><span class="line">AfterAll</span><br></pre></td></tr></table></figure></p><p>Junit5에 어노테이션 명이 좀더 정확하게 의미를 알려주는것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Junit-Before-Beforeclass&quot;&gt;&lt;a href=&quot;#Junit-Before-Beforeclass&quot; class=&quot;headerlink&quot; title=&quot;Junit Before? Beforeclass?&quot;&gt;&lt;/a&gt;Junit Before
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/categories/Java/Junit/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin, Auth with JWT 2장</title>
    <link href="https://beanbroker.github.io/2019/09/08/Kotlin/kotlin_jwt_spring2/"/>
    <id>https://beanbroker.github.io/2019/09/08/Kotlin/kotlin_jwt_spring2/</id>
    <published>2019-09-08T08:30:00.000Z</published>
    <updated>2019-09-08T08:32:57.985Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin-Auth-with-JWT-2장"><a href="#Kotlin-Auth-with-JWT-2장" class="headerlink" title="Kotlin, Auth with JWT 2장"></a>Kotlin, Auth with JWT 2장</h1><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 샘플소스 링크</p><p>대충 다만들고 나니.. 순서대로 어떻게 해야할지를 까먹어 모든 소스 첨부</p><h2 id="인터셉터에-토큰-검증-해보기"><a href="#인터셉터에-토큰-검증-해보기" class="headerlink" title="인터셉터에 토큰 검증 해보기"></a>인터셉터에 토큰 검증 해보기</h2><blockquote><p>SampleAuthInterceptor.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAuthInterceptor</span>(</span></span><br><span class="line">        val tokenService: SampleTokenService</span><br><span class="line">) : HandlerInterceptor &#123;</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line"></span><br><span class="line">        val HEADER_NAME = <span class="string">"X-token"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> val HEADER_NAME = <span class="string">"X-token"</span></span><br><span class="line"></span><br><span class="line">     <span class="function">override fun <span class="title">preHandle</span><span class="params">(request: HttpServletRequest, response: HttpServletResponse, handler: Any)</span>: Boolean </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (handler !is HandlerMethod) <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">        val handlerMethod = handler</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!handlerMethod.hasMethodAnnotation(SampleAuthorization::<span class="class"><span class="keyword">class</span>.<span class="title">java</span>))</span></span><br><span class="line"><span class="class">            <span class="title">return</span> <span class="title">true</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">        <span class="title">val</span> <span class="title">token</span> </span>= request.getHeader(HEADER_NAME)</span><br><span class="line"></span><br><span class="line">        token?.let &#123;</span><br><span class="line">            tokenService.decodeToken(it)</span><br><span class="line">        &#125;?: <span class="keyword">throw</span> RuntimeException(<span class="string">"없으면 앙대유"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>handlerMethod.hasMethodAnnotation(SampleAuthorization::class.java)<br> 해당 메소드에 SampleAuthorization어노테이션이 붙어있는지 없는지?</p></li><li><p>있을경우에는 토큰 검증</p></li><li><p>token없으면 안됨 팅겨버림</p></li></ol><h2 id="어노테이션을-만들어보자"><a href="#어노테이션을-만들어보자" class="headerlink" title="어노테이션을 만들어보자"></a>어노테이션을 만들어보자</h2><p>어노테이션을 만들기전에 아래의 링크 필수 참고</p><p><a href="https://kotlinlang.org/docs/reference/annotations.html" rel="external nofollow noopener noreferrer" target="_blank">kotlin annotation</a> 링크</p><p>ava annotations are 100% compatible with Kotlin ( 기존 자바 하시던 분들은 이해하는데 문제가 전혀 없음 )</p><blockquote><p>SampleAuthorization<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(AnnotationTarget.FUNCTION)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="function">annotation class <span class="title">SampleAuthorization</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        val data: Int = <span class="number">0</span></span></span></span><br><span class="line"><span class="function"><span class="params">)</span></span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="위의-interceptor를-등록하자"><a href="#위의-interceptor를-등록하자" class="headerlink" title="위의 interceptor를 등록하자"></a>위의 interceptor를 등록하자</h2><blockquote><p>SampleAuthConfig.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleAuthConfig</span>(</span></span><br><span class="line">        val tokenService: SampleTokenService</span><br><span class="line">) : WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">addInterceptors</span><span class="params">(registry: InterceptorRegistry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(SampleAuthInterceptor(tokenService))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>InterceptorRegistry에  직접 구현한 SampleAuthInterceptor를 등록 또는 추가</li><li>정상작동</li></ol><h2 id="테스트를-해보자"><a href="#테스트를-해보자" class="headerlink" title="테스트를 해보자"></a>테스트를 해보자</h2><ul><li>예를 들어 토큰이 있어야만 볼수 있는 유저의 정보가 있다고 가정하였을 때 아래와같이 정보를 제공한다</li><li>SampleAuthorization를 붙임으로서 위의 토큰 검증</li></ul><blockquote><p>AuthController</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/auth"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuthController</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@SampleAuthorization</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">testGetInfo</span><span class="params">()</span>: String </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>테스트 진행</p><ol><li><p>header 에 토큰이 없을 경우</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-09-08T08:24:31.358+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Internal Server Error"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"없으면 앙대유"</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/auth/test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>이상한 토큰이 있을 경우</p></li></ol><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"timestamp"</span>: <span class="string">"2019-09-08T08:30:51.329+0000"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: <span class="number">500</span>,</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"Internal Server Error"</span>,</span><br><span class="line">    <span class="attr">"message"</span>: <span class="string">"The token was expected to have 3 parts, but got 1."</span>,</span><br><span class="line">    <span class="attr">"path"</span>: <span class="string">"/auth/test"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>정상일 경우<br>success리턴</li></ol><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><ol><li>jwt와 auth를 꼭 스프링 시큐리티 없이도 간단하게 구현 할수 있다.</li><li>스프링 시큐리티는 해도해도 어렵다. 그래서 위처럼 샘플 코드를 만들어보았다.</li><li>에러가 발생시 위처럼 뜨는데 이상하지 않나요? -&gt; 직접 runtimeExeption을 상속받아 자신만의 Exception객체 생성하여 던지고 RestControllerAdvice에서 처리</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kotlin-Auth-with-JWT-2장&quot;&gt;&lt;a href=&quot;#Kotlin-Auth-with-JWT-2장&quot; class=&quot;headerlink&quot; title=&quot;Kotlin, Auth with JWT 2장&quot;&gt;&lt;/a&gt;Kotlin, Auth wit
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Spring/Kotlin/"/>
    
      <category term="JWT" scheme="https://beanbroker.github.io/categories/Spring/Kotlin/JWT/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="JWT" scheme="https://beanbroker.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin, Auth with JWT 1장</title>
    <link href="https://beanbroker.github.io/2019/09/08/Kotlin/kotlin_jwt_spring1/"/>
    <id>https://beanbroker.github.io/2019/09/08/Kotlin/kotlin_jwt_spring1/</id>
    <published>2019-09-08T07:50:00.000Z</published>
    <updated>2019-09-08T08:22:08.094Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin-Auth-with-JWT-1장"><a href="#Kotlin-Auth-with-JWT-1장" class="headerlink" title="Kotlin, Auth with JWT 1장"></a>Kotlin, Auth with JWT 1장</h1><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 샘플소스 링크</p><h2 id="사전작업"><a href="#사전작업" class="headerlink" title="사전작업"></a>사전작업</h2><blockquote><p>build.gradle</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">implementation(<span class="string">"com.auth0:java-jwt:3.8.1"</span>)</span><br></pre></td></tr></table></figure><p>jwt관련 부분 추가!</p><h2 id="우선-토큰을-생성해보자"><a href="#우선-토큰을-생성해보자" class="headerlink" title="우선 토큰을 생성해보자"></a>우선 토큰을 생성해보자</h2><blockquote><p>SampleTokenService.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SampleTokenService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line"></span><br><span class="line">        val ISSURE = <span class="string">"BEANBROKER"</span></span><br><span class="line">        val SCRET = <span class="string">"1234"</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">publish</span><span class="params">(id: Long, authType: String)</span>: String? </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//60 * 60 * 24</span></span><br><span class="line">        val now = LocalDateTime.now()</span><br><span class="line">        val expiredAt = now.plusSeconds(<span class="number">86400</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> JWT.create()</span><br><span class="line">                .withClaim(<span class="string">"id"</span>, id)</span><br><span class="line">                .withClaim(<span class="string">"authType"</span>, authType)</span><br><span class="line">                .withIssuedAt(Date.from(now.atZone(ZoneId.systemDefault()).toInstant()))</span><br><span class="line">                .withIssuer(ISSURE)</span><br><span class="line">                .withExpiresAt(Date.from(expiredAt.atZone(ZoneId.systemDefault()).toInstant()))</span><br><span class="line">                .sign(Algorithm.HMAC256(SCRET))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>해당 토큰의 만료기간은 하루</li><li>ISSURE: 토큰 발급자</li></ol><blockquote><p>SampleAuthTests.class</p></blockquote><p>테스트코드 짜기 귀찮으니 콘솔로 확인하자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SampleAuthTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> lateinit <span class="keyword">var</span> tokenService: SampleTokenService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function">fun <span class="title">createToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        val token = tokenService.publish(<span class="number">1000</span>, <span class="string">"USER"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        println(token)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>결과 : eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiJCRUFOQlJPS0VSIiwiaWQiOjEwMDAsImF1dGhUeXBlIjoiVVNFUiIsImV4cCI6MTU2ODAxNTE1MywiaWF0IjoxNTY3OTI4NzUzfQ.-9_1Cq7Tc19lo3lcNc0G4Y_CjVZDWmoHzWAE7iWNWYM</p><h2 id="토큰을-생성했으니-토큰을-decode해보자"><a href="#토큰을-생성했으니-토큰을-decode해보자" class="headerlink" title="토큰을 생성했으니 토큰을 decode해보자"></a>토큰을 생성했으니 토큰을 decode해보자</h2><blockquote><p>SampleTokenService.class 에 추가</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">decodeToken</span><span class="params">(token : String)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       val jwt = JWT.require(Algorithm.HMAC256(SCRET))</span><br><span class="line">               .withIssuer(ISSURE)</span><br><span class="line">               .build()</span><br><span class="line">               .verify(token)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>위와같이 jwt 생성 및 디코드를 진행해보았다.</p><p>자… 그럼 이걸 서비스 로직에서 쓰일 정도로 올리는 작업을 해보자</p><h2 id="리팩토링을-해보자"><a href="#리팩토링을-해보자" class="headerlink" title="리팩토링을 해보자"></a>리팩토링을 해보자</h2><ul><li>우선 client에게 제공할수 있도록 데이터를 만들어보자</li></ul><blockquote><p>BeanbrokerToken.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BeanbrokerToken</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> token: String = <span class="string">""</span></span><br><span class="line">    <span class="keyword">var</span> expireDate: LocalDateTime? = <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>token : 방금 위에서 생성한 토큰<br>expireDate : 만료시간(클라이언트에게 만료시간 전달)</p><blockquote><p>SampleTokenService.class createToken변경</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">createToken</span><span class="params">(id: Long, authType: String)</span>: BeanbrokerToken </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//60 * 60 * 24</span></span><br><span class="line">       val now = LocalDateTime.now()</span><br><span class="line">       val expiredAt = now.plusSeconds(<span class="number">86400</span>)</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> BeanbrokerToken().apply &#123;</span><br><span class="line">           <span class="keyword">this</span>.expireDate = expiredAt</span><br><span class="line">           <span class="keyword">this</span>.token = JWT.create()</span><br><span class="line">                   .withClaim(<span class="string">"id"</span>, id)</span><br><span class="line">                   .withClaim(<span class="string">"authType"</span>, authType)</span><br><span class="line">                   .withIssuedAt(Date.from(now.atZone(ZoneId.systemDefault()).toInstant()))</span><br><span class="line">                   .withIssuer(ISSURE)</span><br><span class="line">                   .withExpiresAt(Date.from(expiredAt.atZone(ZoneId.systemDefault()).toInstant()))</span><br><span class="line">                   .sign(Algorithm.HMAC256(SCRET))</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="만약에-위와같이-하고-사용하게-한다면"><a href="#만약에-위와같이-하고-사용하게-한다면" class="headerlink" title="만약에 위와같이 하고 사용하게 한다면?"></a>만약에 위와같이 하고 사용하게 한다면?</h2><p>header에 토큰 정보를 심어 보낸다고 가정하였을때 컨트롤러 단에서 헤더 매번까서 확인하는게 좋을가요…? 아니면 interceptor(AOP)에서 검증하는게 좋을가요?</p><p>라는 고민을 하였을 때 당연히 후자! 해당 부분을 추가해보자 2장에서</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kotlin-Auth-with-JWT-1장&quot;&gt;&lt;a href=&quot;#Kotlin-Auth-with-JWT-1장&quot; class=&quot;headerlink&quot; title=&quot;Kotlin, Auth with JWT 1장&quot;&gt;&lt;/a&gt;Kotlin, Auth wit
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Spring/Kotlin/"/>
    
      <category term="JWT" scheme="https://beanbroker.github.io/categories/Spring/Kotlin/JWT/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="JWT" scheme="https://beanbroker.github.io/tags/JWT/"/>
    
  </entry>
  
  <entry>
    <title>redis 무료 cloud 사용해보기</title>
    <link href="https://beanbroker.github.io/2019/08/31/etc/redis_cloud/"/>
    <id>https://beanbroker.github.io/2019/08/31/etc/redis_cloud/</id>
    <published>2019-08-31T07:50:00.000Z</published>
    <updated>2019-08-31T08:01:16.788Z</updated>
    
    <content type="html"><![CDATA[<h1 id="무료-redis-cloud-사용해보기"><a href="#무료-redis-cloud-사용해보기" class="headerlink" title="무료 redis cloud 사용해보기"></a>무료 redis cloud 사용해보기</h1><p><a href="https://zetawiki.com/wiki/Redis_Cloud_%EB%AC%B4%EB%A3%8C_%EC%82%AC%EC%9A%A9%ED%95%B4%EB%B3%B4%EA%B8%B0" rel="external nofollow noopener noreferrer" target="_blank">제타 위키 Redis Cloud 무료 사용해보기 </a></p><h2 id="설치-후-접속할때-redis-cli만-설치하여-사용해보자"><a href="#설치-후-접속할때-redis-cli만-설치하여-사용해보자" class="headerlink" title="설치 후 접속할때 redis-cli만 설치하여 사용해보자"></a>설치 후 접속할때 redis-cli만 설치하여 사용해보자</h2><p>home brew설정 알아서… 블로그에 많이나옴</p><p>레디스cli만 설치하자!</p><blockquote><p>cli는 아래와 같음</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew tap ringohub/redis-cli</span><br><span class="line">brew update &amp;&amp; brew doctor</span><br><span class="line">brew install redis-cli</span><br></pre></td></tr></table></figure><p>설치가 정상적으로 끝난 후</p><blockquote><p>예시</p></blockquote><p>redis-cli -h redis-호스트호스트호스트loud.redislabs.com -p ‘port(포트)’ -a ‘password(비밀번호)’</p><p>redis-cli -h samplehost.com -p 12345 -a ‘password123’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;무료-redis-cloud-사용해보기&quot;&gt;&lt;a href=&quot;#무료-redis-cloud-사용해보기&quot; class=&quot;headerlink&quot; title=&quot;무료 redis cloud 사용해보기&quot;&gt;&lt;/a&gt;무료 redis cloud 사용해보기&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="redis" scheme="https://beanbroker.github.io/categories/redis/"/>
    
      <category term="redis-cli" scheme="https://beanbroker.github.io/categories/redis/redis-cli/"/>
    
    
      <category term="redis" scheme="https://beanbroker.github.io/tags/redis/"/>
    
      <category term="redis-cli" scheme="https://beanbroker.github.io/tags/redis-cli/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin, Querydsl 5장(audit 추가분)</title>
    <link href="https://beanbroker.github.io/2019/08/25/Kotlin/kotlin_queryDsl5/"/>
    <id>https://beanbroker.github.io/2019/08/25/Kotlin/kotlin_queryDsl5/</id>
    <published>2019-08-25T07:50:00.000Z</published>
    <updated>2019-08-25T07:46:25.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin-Querydsl-5장-JPA-Auditing-추가-분"><a href="#Kotlin-Querydsl-5장-JPA-Auditing-추가-분" class="headerlink" title="Kotlin, Querydsl 5장 (JPA Auditing) 추가 분"></a>Kotlin, Querydsl 5장 (JPA Auditing) 추가 분</h1><p><a href="https://beanbroker.github.io/2019/02/13/Kotlin/kotlin_queryDsl2/">코틀린 2장 audit </a> 기존 audit 관련 링크</p><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 샘플소스 링크</p><h2 id="기존-코드의-문제점"><a href="#기존-코드의-문제점" class="headerlink" title="기존 코드의 문제점"></a>기존 코드의 문제점</h2><p>아래오 같이 모든 enitiy에 createdAt, updatedAy, etc..등이 모두 붙어있다.. 해당 부분만을 빼보자 코드를 중복할수 없지 아니한가!</p><blockquote><p>기존 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">UserEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"seq"</span>)</span><br><span class="line">    <span class="keyword">var</span> seq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>)</span><br><span class="line">    <span class="keyword">var</span> gender = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_at"</span> , nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>,  columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_at"</span>, columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> updatedAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> updateBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>변경 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line">class UserEntity : BaseEntity() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"seq"</span>)</span><br><span class="line">    <span class="keyword">var</span> seq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>)</span><br><span class="line">    <span class="keyword">var</span> gender = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"user_Id"</span>)</span><br><span class="line">    <span class="keyword">var</span> userId = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"email"</span>)</span><br><span class="line">    <span class="keyword">var</span> email = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">@EntityListeners(value = [AuditingEntityListener::class])</span><br><span class="line"><span class="meta">@MappedSuperclass</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_by"</span>, length = <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">var</span> createBy: String? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_at"</span> , nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>,  columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdAt: LocalDateTime? = <span class="keyword">null</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_at"</span>, columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> updatedAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_by"</span>, length = <span class="number">15</span>)</span><br><span class="line">    <span class="keyword">var</span> updateBy: String? = <span class="keyword">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>누구든.. 쉽게 이해가 가능!</p><p>@MappedSuperclass -&gt;  맵핑되는 정보만 제공하고 싶을때 더 자세한 내용은 영어로 된글을 읽으면 이해가 됩니다. </p><p>스프링 시큐리티 없이 권한 부여 및 회원가입 진행해보기 프로젝트를 해당 프로젝트에 이어서 할예정!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kotlin-Querydsl-5장-JPA-Auditing-추가-분&quot;&gt;&lt;a href=&quot;#Kotlin-Querydsl-5장-JPA-Auditing-추가-분&quot; class=&quot;headerlink&quot; title=&quot;Kotlin, Querydsl 5장 
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="jpa" scheme="https://beanbroker.github.io/categories/Spring/jpa/"/>
    
      <category term="audit" scheme="https://beanbroker.github.io/categories/Spring/jpa/audit/"/>
    
      <category term="querydsl" scheme="https://beanbroker.github.io/categories/Spring/jpa/audit/querydsl/"/>
    
      <category term="kotlin" scheme="https://beanbroker.github.io/categories/Spring/jpa/audit/querydsl/kotlin/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="jpa" scheme="https://beanbroker.github.io/tags/jpa/"/>
    
      <category term="audit" scheme="https://beanbroker.github.io/tags/audit/"/>
    
      <category term="querydsl" scheme="https://beanbroker.github.io/tags/querydsl/"/>
    
      <category term="kotlin" scheme="https://beanbroker.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Java File 모니터링</title>
    <link href="https://beanbroker.github.io/2019/08/11/Java/file_observer/"/>
    <id>https://beanbroker.github.io/2019/08/11/Java/file_observer/</id>
    <published>2019-08-11T07:30:00.000Z</published>
    <updated>2019-08-11T07:24:36.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-File-모니터링"><a href="#Java-File-모니터링" class="headerlink" title="Java File 모니터링"></a>Java File 모니터링</h1><p>Java File Walk활용하여 파일을 모니터링해보자</p><p><a href="https://github.com/beanbroker/spring_file_work" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 소스 링크</p><p>왜 이러한 것이 추가되었을까에 대한 고찰?</p><blockquote><p>협력사 또는 회사 내부에서 특정 시간에 데이터(파일)들이 꾸준하게 ftp를 통해 파일이 생성되어진다고 가정을 하였을떄!</p></blockquote><ul><li>배치로 작동하는것이 옳을가? (만약 파일이 너무 무거워서 배치가 돌아야 할 시간에 정상적으로 업로드 되지 않은 경우)</li><li>누군가 같은 정해진 네이밍으로 한 파일을 올리고 잘못올림을 감지하고 다시 올렸을 경우(어찌 할것인가? 직접 서버로 들어가서 수정된시간을 볼것인가?)</li></ul><p>위와 같은 고민에서 시작한 선배 개발자의 의견에 키워드를 얻게되었고 해결방법에 대한 가이드를 전달받아 이 블로그를 작성합니다.</p><h2 id="1-키워드"><a href="#1-키워드" class="headerlink" title="1. 키워드"></a>1. 키워드</h2><p>WatchService ( 자바 1.7 도입 ) - 옵져버라 생각</p><p>StandardWatchEventKinds</p><ul><li>ENTRY_CREATE : 생성시</li><li>ENTRY_DELETE : 삭제시</li><li>ENTRY_MODIFY : 수정시</li></ul><h2 id="2-파일-생성-감지"><a href="#2-파일-생성-감지" class="headerlink" title="2. 파일 생성 감지"></a>2. 파일 생성 감지</h2><p>생성, 수정, 삭제에 대한 피드</p><blockquote><p>FileObserver.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       String searchFileFolder = <span class="string">"search_file"</span>;</span><br><span class="line">       String targetDirectory = getWorkingDirectory() + <span class="string">"/"</span> + searchFileFolder;</span><br><span class="line">       observeFileCreated(targetDirectory);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">observeFileCreated</span><span class="params">(String targetDirectory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       Path faxFolder = Paths.get(targetDirectory);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">           WatchService fileWatchService = FileSystems.getDefault().newWatchService();</span><br><span class="line">           faxFolder.register(fileWatchService, StandardWatchEventKinds.ENTRY_CREATE);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line">           <span class="keyword">do</span> &#123;</span><br><span class="line">               WatchKey watchKey = fileWatchService.take();</span><br><span class="line"></span><br><span class="line">               <span class="keyword">for</span> (WatchEvent event : watchKey.pollEvents()) &#123;</span><br><span class="line">                   WatchEvent.Kind kind = event.kind();</span><br><span class="line">                   <span class="keyword">if</span> (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) &#123;</span><br><span class="line">                       String fileName = event.context().toString();</span><br><span class="line">                       System.out.println(<span class="string">"start to notify file Created :"</span> + fileName + <span class="string">" , time : "</span> + LocalDateTime.now());</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               valid = watchKey.reset();</span><br><span class="line"></span><br><span class="line">           &#125; <span class="keyword">while</span> (valid);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>run후 파일을 새로 생성해보자</p><blockquote><p>console.log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">start to notify file Created :test1 복사본.txt , time : 2019-08-11T16:11:29.992</span><br><span class="line">start to notify file Created :test3 복사본.txt , time : 2019-08-11T16:11:29.992</span><br></pre></td></tr></table></figure></p></blockquote><ol start="3"><li>파일 생성, 삭제 수정에 대한 모든 부분을 커버할수 있도록 해보자</li></ol><blockquote><p>FileObserverUpgrade.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">      String searchFileFolder = <span class="string">"search_file"</span>;</span><br><span class="line">      String targetDirectory = getWorkingDirectory() + <span class="string">"/"</span> + searchFileFolder;</span><br><span class="line">      observeFileStatus(targetDirectory);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">observeFileStatus</span><span class="params">(String targetDirectory)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      Path faxFolder = Paths.get(targetDirectory);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">          <span class="comment">//워치 서비스에 이벤트들 등</span></span><br><span class="line">          WatchService fileWatchService = FileSystems.getDefault().newWatchService();</span><br><span class="line">          faxFolder.register(fileWatchService,</span><br><span class="line">                  StandardWatchEventKinds.ENTRY_CREATE,</span><br><span class="line">                  StandardWatchEventKinds.ENTRY_MODIFY,</span><br><span class="line">                  StandardWatchEventKinds.ENTRY_DELETE,</span><br><span class="line">                  StandardWatchEventKinds.OVERFLOW</span><br><span class="line"></span><br><span class="line">                  );</span><br><span class="line"></span><br><span class="line">          <span class="keyword">boolean</span> valid = <span class="keyword">true</span>;</span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">              WatchKey watchKey = fileWatchService.take();</span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span> (WatchEvent event : watchKey.pollEvents()) &#123;</span><br><span class="line"></span><br><span class="line">                  <span class="keyword">if</span> (StandardWatchEventKinds.ENTRY_CREATE.equals(event.kind())) &#123;</span><br><span class="line">                      String fileName = event.context().toString();</span><br><span class="line">                      System.out.println(<span class="string">"start to notify file Created :"</span> + fileName + <span class="string">" , time : "</span> + LocalDateTime.now());</span><br><span class="line">                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(StandardWatchEventKinds.ENTRY_MODIFY.equals(event.kind()))&#123;</span><br><span class="line">                      String fileName = event.context().toString();</span><br><span class="line">                      System.out.println(<span class="string">"start to notify file modified :"</span> + fileName + <span class="string">" , time : "</span> + LocalDateTime.now());</span><br><span class="line">                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(StandardWatchEventKinds.ENTRY_DELETE.equals(event.kind()))&#123;</span><br><span class="line">                      String fileName = event.context().toString();</span><br><span class="line">                      System.out.println(<span class="string">"start to notify file deleted :"</span> + fileName + <span class="string">" , time : "</span> + LocalDateTime.now());</span><br><span class="line">                  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(StandardWatchEventKinds.OVERFLOW.equals(event.kind())) &#123;</span><br><span class="line">                      String fileName = event.context().toString();</span><br><span class="line">                      System.out.println(<span class="string">"start to notify OVERFLOW  time : "</span> + LocalDateTime.now());</span><br><span class="line">                  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                      System.out.println(<span class="string">"UNKNOWN EVENT ......"</span>);</span><br><span class="line">                  &#125;</span><br><span class="line">              &#125;</span><br><span class="line">              valid = watchKey.reset();</span><br><span class="line"></span><br><span class="line">          &#125; <span class="keyword">while</span> (valid);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException | InterruptedException e) &#123;</span><br><span class="line">          e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>console.log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">start to notify file Created :test1 복사본 2.txt , time : 2019-08-11T16:19:18.057</span><br><span class="line">start to notify file modified :.DS_Store , time : 2019-08-11T16:19:37.999</span><br><span class="line">start to notify file deleted :test1 복사본 2.txt , time : 2019-08-11T16:19:37.999</span><br><span class="line">start to notify file modified :test3 복사본.txt , time : 2019-08-11T16:19:57.999</span><br></pre></td></tr></table></figure></p><p>정상작동 체크!</p><p>물론 비정상적으로 작동하는 부분 체크나, 대용량 처리 등의 테스트는 반드시 필요함을 인지해야한다. 아마 이러한 부분을 다른 방법으로 쓸수 있는 여러가지 서비스들이 있을 것이다. 대표적으로 aws cloud watch같은 경우 버튼 몇번과 해당 디렉토리 설정해주는 config만 변경시 모든 로그를 땡겨서 쓸수 있다. cloud watch의 filter 로그 검색기능은 환상적이다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-File-모니터링&quot;&gt;&lt;a href=&quot;#Java-File-모니터링&quot; class=&quot;headerlink&quot; title=&quot;Java File 모니터링&quot;&gt;&lt;/a&gt;Java File 모니터링&lt;/h1&gt;&lt;p&gt;Java File Walk활용하여 파일을
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="File Walk" scheme="https://beanbroker.github.io/categories/Java/File-Walk/"/>
    
      <category term="WatchService" scheme="https://beanbroker.github.io/categories/Java/File-Walk/WatchService/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="File Walk" scheme="https://beanbroker.github.io/tags/File-Walk/"/>
    
      <category term="WatchService" scheme="https://beanbroker.github.io/tags/WatchService/"/>
    
  </entry>
  
  <entry>
    <title>Java File Walk</title>
    <link href="https://beanbroker.github.io/2019/08/11/Java/walk_file1/"/>
    <id>https://beanbroker.github.io/2019/08/11/Java/walk_file1/</id>
    <published>2019-08-11T06:00:00.000Z</published>
    <updated>2019-08-11T06:17:30.986Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-File-Walk"><a href="#Java-File-Walk" class="headerlink" title="Java File Walk"></a>Java File Walk</h1><p>Java File Walk를 활용해보자</p><p><a href="https://github.com/beanbroker/spring_file_work" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 소스 링크</p><h2 id="1-자신의-워킹디렉토리를-알아보자"><a href="#1-자신의-워킹디렉토리를-알아보자" class="headerlink" title="1. 자신의 워킹디렉토리를 알아보자"></a>1. 자신의 워킹디렉토리를 알아보자</h2><p>자신의 워킹디렉토리를 알아보는 방법</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getWorkingDirectory</span><span class="params">()</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">return</span> System.getProperty(<span class="string">"user.dir"</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="2-타켓-하위-디렉토리-아래-모든-파일-가져오기"><a href="#2-타켓-하위-디렉토리-아래-모든-파일-가져오기" class="headerlink" title="2. 타켓 하위 디렉토리 아래 모든 파일 가져오기"></a>2. 타켓 하위 디렉토리 아래 모든 파일 가져오기</h2><p>목표로 하는 폴더 생성 후 해당 폴더안에 test1.txt, test2.txt, test3.txt 파일 생성 등등 목표 디렉토리 안에 파일 생성</p><ul><li>타켓 디렉토리 밑에있는 모든 파일 가져오기</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//2. 해당 하위 디렉토리 아래 모든 파일 가져오기</span></span><br><span class="line">       String searchFileFolder = <span class="string">"search_file"</span>;</span><br><span class="line">       String targetDirectory = getWorkingDirectory()+<span class="string">"/"</span> + searchFileFolder;</span><br><span class="line">       List&lt;String&gt; allFiles = getAllFiles(targetDirectory);</span><br><span class="line"></span><br><span class="line">       allFiles.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getAllFiles</span><span class="params">(String targetPath)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> (Stream&lt;Path&gt; walk = Files.walk(Paths.get(targetPath))) &#123;</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> walk.filter(Files::isRegularFile)</span><br><span class="line">                   .map(Path::toString).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           e.printStackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><blockquote><p>console log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/.DS_Store</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/test1.txt</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/test2.txt</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/test3.txt</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/testFolder3/test1 복사본.txt</span><br></pre></td></tr></table></figure></p></blockquote><p>위와같이 목표하는 폴더 밑의 모든 파일들을 들고온다.</p><h2 id="3-타켓-하위-디렉토리-아래-모든-폴더-가져오기"><a href="#3-타켓-하위-디렉토리-아래-모든-폴더-가져오기" class="headerlink" title="3. 타켓 하위 디렉토리 아래 모든 폴더 가져오기"></a>3. 타켓 하위 디렉토리 아래 모든 폴더 가져오기</h2><p>동일하게 타멧 디렉토리 안에 원하는 만큼 폴더를 생성하자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String searchFileFolder = <span class="string">"search_file"</span>;</span><br><span class="line">    String targetDirectory = getWorkingDirectory() + <span class="string">"/"</span> + searchFileFolder;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3. 해당 하위 디렉토리 아래 모든 폴더 가져오기</span></span><br><span class="line">    List&lt;String&gt; allFolders = getAllFolders(targetDirectory);</span><br><span class="line">    allFolders.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getAllFolders</span><span class="params">(String targetPath)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (Stream&lt;Path&gt; walk = Files.walk(Paths.get(targetPath))) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> walk.filter(Files::isDirectory)</span><br><span class="line">                .map(Path::toString).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>console log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/testFolder1</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/testFolder2</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/testFolder3</span><br></pre></td></tr></table></figure></p></blockquote><p>결과는 위와 같이 정상적으로 잘노출된다.</p><h2 id="4-해당-하위-디렉토리-아래-목표로하는-확장자-파일들가져오기"><a href="#4-해당-하위-디렉토리-아래-목표로하는-확장자-파일들가져오기" class="headerlink" title="4. 해당 하위 디렉토리 아래 목표로하는 확장자 파일들가져오기"></a>4. 해당 하위 디렉토리 아래 목표로하는 확장자 파일들가져오기</h2><p>동일하게 타멧 디렉토리 안에 원하는 만큼 폴더를 생성하자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String searchFileFolder = <span class="string">"search_file"</span>;</span><br><span class="line">    String targetDirectory = getWorkingDirectory() + <span class="string">"/"</span> + searchFileFolder;</span><br><span class="line"></span><br><span class="line">     <span class="comment">//4. 해당 하위 디렉토리 아래 목표로하는 확장자 파일들가져오기</span></span><br><span class="line">    String targetFileExtension = <span class="string">"txt"</span>;</span><br><span class="line">    List&lt;String&gt; allFilesUnderFolders = getAllFilesWithFileExtension(targetDirectory, targetFileExtension);</span><br><span class="line">    allFilesUnderFolders.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">getAllFilesWithFileExtension</span><span class="params">(String targetPath, String extension)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (Stream&lt;Path&gt; walk = Files.walk(Paths.get(targetPath))) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> walk.map(Path::toString)</span><br><span class="line">                .filter(f -&gt; f.endsWith(extension)).collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>console log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/test1.txt</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/test2.txt</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/test3.txt</span><br><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/testFolder3/test1 복사본.txt</span><br></pre></td></tr></table></figure></p></blockquote><p>결과는 위와 같이 목표로 하는 확장자 파일들이 정상적으로 잘노출된다.</p><h2 id="5-해당-하위데릭토리에서-원하는-파일-찾기"><a href="#5-해당-하위데릭토리에서-원하는-파일-찾기" class="headerlink" title="5. 해당 하위데릭토리에서 원하는 파일 찾기"></a>5. 해당 하위데릭토리에서 원하는 파일 찾기</h2><p>동일하게 타멧 디렉토리 안에 원하는 만큼 폴더를 생성하자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    String searchFileFolder = <span class="string">"search_file"</span>;</span><br><span class="line">    String targetDirectory = getWorkingDirectory() + <span class="string">"/"</span> + searchFileFolder;</span><br><span class="line"></span><br><span class="line">      <span class="comment">//5. 해당 하위데릭토리에서 원하는 파일 찾기</span></span><br><span class="line">    String targetFileName = <span class="string">"test1.txt"</span>;</span><br><span class="line">    List&lt;String&gt; tatgetFile = findFileUnderTargetFolder(targetDirectory, targetFileName);</span><br><span class="line">    tatgetFile.forEach(System.out::println);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">findFileUnderTargetFolder</span><span class="params">(String targetPath, String fileName)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> (Stream&lt;Path&gt; walk = Files.walk(Paths.get(targetPath))) &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> walk.map(Path::toString)</span><br><span class="line">                .filter(f -&gt; f.contains(fileName))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>console log<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Users/beanbroker/pkj_private_work/spring_file_work/search_file/test1.txt</span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-File-Walk&quot;&gt;&lt;a href=&quot;#Java-File-Walk&quot; class=&quot;headerlink&quot; title=&quot;Java File Walk&quot;&gt;&lt;/a&gt;Java File Walk&lt;/h1&gt;&lt;p&gt;Java File Walk를 활용해보자&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="File Walk" scheme="https://beanbroker.github.io/categories/Java/File-Walk/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="File Walk" scheme="https://beanbroker.github.io/tags/File-Walk/"/>
    
  </entry>
  
  <entry>
    <title>Spring Jpa Rollback이 안될 떄</title>
    <link href="https://beanbroker.github.io/2019/08/04/Spring/spring_jpa_rollback_tip/"/>
    <id>https://beanbroker.github.io/2019/08/04/Spring/spring_jpa_rollback_tip/</id>
    <published>2019-08-04T07:50:00.000Z</published>
    <updated>2019-08-04T09:51:31.208Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Jpa-RollbackTest가-정상적으로-되지-않을-때"><a href="#Spring-Jpa-RollbackTest가-정상적으로-되지-않을-때" class="headerlink" title="Spring Jpa RollbackTest가 정상적으로 되지 않을 때"></a>Spring Jpa RollbackTest가 정상적으로 되지 않을 때</h1><h2 id="고생하엿던-부분"><a href="#고생하엿던-부분" class="headerlink" title="고생하엿던 부분."></a>고생하엿던 부분.</h2><p>스프링 jpa테스트를 진행하려고 하던 도중 만약에 안될시<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Issue is with MySQL Database engine. My engine was MYIsam which doesn&apos;t supports Transactions. I changed my DB engine to InnoDB and its working. Thanks for the contributions. Below are the queries for the same.</span><br><span class="line"></span><br><span class="line">SELECT ENGINE FROM information_schema.TABLES WHERE TABLE_NAME = &apos;tabel_name&apos; AND TABLE_SCHEMA=&apos;db_name&apos;;</span><br><span class="line"></span><br><span class="line">ALTER TABLE table_name ENGINE = INNODB;</span><br></pre></td></tr></table></figure></p><p>위의 부분을 확인해보자… (<a href="https://stackoverflow.com/questions/54293032/spring-boot-jpa-transactional-annotation-roll-back-is-not-working" rel="external nofollow noopener noreferrer" target="_blank">https://stackoverflow.com/questions/54293032/spring-boot-jpa-transactional-annotation-roll-back-is-not-working</a>)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Jpa-RollbackTest가-정상적으로-되지-않을-때&quot;&gt;&lt;a href=&quot;#Spring-Jpa-RollbackTest가-정상적으로-되지-않을-때&quot; class=&quot;headerlink&quot; title=&quot;Spring Jpa Rollb
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="jpa" scheme="https://beanbroker.github.io/categories/Spring/jpa/"/>
    
      <category term="rollback" scheme="https://beanbroker.github.io/categories/Spring/jpa/rollback/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="jpa" scheme="https://beanbroker.github.io/tags/jpa/"/>
    
      <category term="rollback" scheme="https://beanbroker.github.io/tags/rollback/"/>
    
  </entry>
  
  <entry>
    <title>Spring RestTemplate 실무 적용 추상화</title>
    <link href="https://beanbroker.github.io/2019/07/28/Spring/restTemplate/"/>
    <id>https://beanbroker.github.io/2019/07/28/Spring/restTemplate/</id>
    <published>2019-07-28T07:50:00.000Z</published>
    <updated>2019-07-28T07:36:22.452Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RestTemplate-실무에-제대로-적용해보자"><a href="#RestTemplate-실무에-제대로-적용해보자" class="headerlink" title="RestTemplate 실무에 제대로 적용해보자"></a>RestTemplate 실무에 제대로 적용해보자</h1><p><a href="https://github.com/beanbroker/querydsl_java_spring" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 링크</p><p>RestTemplate을 실무에 적용할수 있도록 추상화 해보자</p><p>특징</p><ol><li>동기 클라이언트</li><li>스프링5.0이 올라가면서 WebClient가 대세가 된! 그래도 좋은 client</li><li>fegin의 내부 구현체</li></ol><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><p>Create : Post Method<br>Read : Get Method<br>Update : Put Method<br>Delete : Delete Method</p><p>Post,Put : requestBody<br>Get, Delete : RequestBody 사용하지 않음</p><ul><li>공식 가이드에서는 그러함</li><li>Webclient 사용시 delete 에서 body에 데이터 넣을 수 없음 그럼 우찌함?</li><li>메서드 .delete()로 쓰지 말고 .method()해서 메소드 선택하면 쓸수 있음</li><li>이번 장의 강의는 webclient가 아닌 restTemplate</li></ul><h2 id="추상화-해보자"><a href="#추상화-해보자" class="headerlink" title="추상화 해보자"></a>추상화 해보자</h2><blockquote><p>SampleRestClient.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SampleRestClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String endPointHost;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate client;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">RequestEntity&lt;T&gt; <span class="title">beforeSend</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            String subUri, HttpMethod method, T bodyData</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"></span><br><span class="line">        RequestEntity&lt;T&gt; request = RequestEntity.method(method, <span class="keyword">new</span> URI(endPointHost + subUri))</span><br><span class="line">                .contentType(MediaType.APPLICATION_JSON)</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON)</span><br><span class="line">                .body(bodyData);</span><br><span class="line"></span><br><span class="line">        client.setErrorHandler(<span class="keyword">new</span> ClientErrorHandler());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> request;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;T, S&gt; <span class="function">ResponseEntity&lt;S&gt; <span class="title">send</span><span class="params">(String subUri, HttpMethod method, T bodyData, Class&lt;S&gt; returnClassName)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;S&gt; response = client.exchange(beforeSend(subUri, method, bodyData), returnClassName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;T, S&gt; <span class="function">ResponseEntity&lt;S&gt; <span class="title">send</span><span class="params">(String subUri, HttpMethod method, T bodyData, ParameterizedTypeReference&lt;S&gt; returnClassName)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;S&gt; response = client.exchange(beforeSend(subUri, method, bodyData), returnClassName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> RequestEntity&lt;Void&gt; <span class="title">beforeSendGetMethod</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            String subUri, HttpMethod method</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"></span><br><span class="line">        RequestEntity.BodyBuilder builder = RequestEntity.method(method, <span class="keyword">new</span> URI(endPointHost + subUri))</span><br><span class="line">                .accept(MediaType.APPLICATION_JSON);</span><br><span class="line"></span><br><span class="line">        client.setErrorHandler(<span class="keyword">new</span> ClientErrorHandler());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;S&gt; <span class="function">ResponseEntity&lt;S&gt; <span class="title">send</span><span class="params">(String subUri, HttpMethod method, Class&lt;S&gt; returnClassName)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;S&gt; response = client.exchange(beforeSendGetMethod(subUri, method), returnClassName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> &lt;S&gt; <span class="function">ResponseEntity&lt;S&gt; <span class="title">send</span><span class="params">(String subUri, HttpMethod method, ParameterizedTypeReference&lt;S&gt; returnClassName)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"></span><br><span class="line">        ResponseEntity&lt;S&gt; response = client.exchange(beforeSendGetMethod(subUri, method), returnClassName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><ol><li>명시적으로 return클래스 보여주자</li><li>ClientErrorHandler를 달아서 클라이언트 통신에서 발생하는 에러는 명시적으로 확인하자</li></ol><blockquote><p>ClientErrorHandler.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientErrorHandler</span> <span class="keyword">implements</span> <span class="title">ResponseErrorHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasError</span><span class="params">(ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> response.getStatusCode().series()!= HttpStatus.Series.SUCCESSFUL;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleError</span><span class="params">(ClientHttpResponse response)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String resString = StreamUtils.copyToString(response.getBody(), Charsets.UTF_8);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log.debug(<span class="string">"start to check what is wrong "</span>);</span><br><span class="line">        log.debug(<span class="string">"Status code  : &#123;&#125;"</span>, response.getStatusCode());</span><br><span class="line">        log.debug(<span class="string">"Status text  : &#123;&#125;"</span>, response.getStatusText());</span><br><span class="line">        log.debug(<span class="string">"Headers      : &#123;&#125;"</span>, response.getHeaders());</span><br><span class="line">        log.debug(<span class="string">"Response body: &#123;&#125;"</span>, resString);</span><br><span class="line">        log.debug(<span class="string">"end to check what is wrong"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//이쪽부분에서 정의한 exception으로 던진 후 adviceController에서 정의된 에러를 던져함</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>HttpStatus가 200이 아닐 경우 던져서 명시적으로 에러를 확인하자(귀찮아서 못달겟음;…..)</li></ol><h2 id="실제-구현체"><a href="#실제-구현체" class="headerlink" title="실제 구현체"></a>실제 구현체</h2><blockquote><p>UserClient.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserClient</span> <span class="keyword">extends</span> <span class="title">SampleRestClient</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String host = <span class="string">"http://localhost:9090"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String uri = <span class="string">"/user"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserClient</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.endPointHost = host;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(UserInfo userInfo)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        send(uri, HttpMethod.POST, userInfo, (Class&lt;Object&gt;) <span class="keyword">null</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateUser</span><span class="params">(UserInfo userInfo)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"></span><br><span class="line">        send(uri, HttpMethod.PUT, userInfo, (Class&lt;Object&gt;) <span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity&lt;UserInfo&gt; <span class="title">getUser</span><span class="params">(String userId)</span> <span class="keyword">throws</span> URISyntaxException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String temp = uri+ <span class="string">"?userId="</span> + userId;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> send(temp, HttpMethod.GET , UserInfo.class);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><ol><li>맨뒤에 파라미터는 null이 들어갈수 있게 하는 이유는 명시적으로 status code만 체크 할뿐! 바디값은 없다 이런뜻으로..</li></ol><p>샘플코드를 짤때 프로젝트를 분리해서 짜야 했으나.. 그렇게 하지 않아.. 불편함 점이 있음. 위의 글들을 다른 프로젝트에서 짜는 것을 추천</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RestTemplate-실무에-제대로-적용해보자&quot;&gt;&lt;a href=&quot;#RestTemplate-실무에-제대로-적용해보자&quot; class=&quot;headerlink&quot; title=&quot;RestTemplate 실무에 제대로 적용해보자&quot;&gt;&lt;/a&gt;RestTemp
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/categories/Spring/Junit/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>Spring test code (일단 해보자)</title>
    <link href="https://beanbroker.github.io/2019/07/27/Spring/test_code_0727/"/>
    <id>https://beanbroker.github.io/2019/07/27/Spring/test_code_0727/</id>
    <published>2019-07-27T13:50:00.000Z</published>
    <updated>2019-07-28T05:31:02.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Junit-테스트"><a href="#Junit-테스트" class="headerlink" title="Junit 테스트"></a>Junit 테스트</h1><p><a href="https://beanbroker.github.io/2018/07/28/Spring/test_code1/">test_code 1장</a> 링크</p><p><a href="https://beanbroker.github.io/2018/08/04/Spring/test_code2/">test_code 2장</a> 링크</p><p><a href="https://beanbroker.github.io/2018/08/04/Spring/test_code3/">test_code 3장</a> 링크</p><p>위의 글을 작성할것을.. 블로그에 올리기전에 발견.. 하 노답…. </p><p>지금 작성하고 있는 글은 100프로 정확하지 않으며 따라하지 않기를 권하며…. 혼자 공부한 글임을….</p><p><a href="https://github.com/beanbroker/querydsl_java_spring" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 링크</p><h2 id="테스트-코드의-필요성"><a href="#테스트-코드의-필요성" class="headerlink" title="테스트 코드의 필요성"></a>테스트 코드의 필요성</h2><p>테스트 코드가 중요한것은 모든 개발자들이 동감을 할것이다. 하지만… 시간이 없어서 테스트 코드때문에 자신이 짠 비지니스 로직을 바꿔야하는 경우도 있고, 환경에 따라 값이 변하는 경우도 있다, 테스트코드에서 environment를 local 또는 dev로 설정 후 하더라도 실제 테스트 하려는 코드에서 env를 직접 주입하여 해당 환경에서 인스턴스가 올라갈경우 테스트코드의 env와 테스트 대상인 env의 설정 값이 달라 틀려질 경우도 있다. 너무나 어려운것….하….</p><p>테스트 코드를 짜게되면 비지니스 로직이 변경되거나 사이드이펙트 체크가 쉽다. 해당 부분은 다른 블로그에서 찾아서 보는 것이 빠르다.</p><h2 id="SpringBootTest를-쓰기전에"><a href="#SpringBootTest를-쓰기전에" class="headerlink" title="SpringBootTest를 쓰기전에!"></a>SpringBootTest를 쓰기전에!</h2><p><strong>@SpringBootTest</strong> 를 사용하게 되면 ApplicationContext를 쉽게 생성 및 조작이 가능하다.</p><p>@RunWith(SpringRunner.class)와 스프링테스트는 같이쓰여져야 한다.</p><h2 id="실습을-해보자"><a href="#실습을-해보자" class="headerlink" title="실습을 해보자"></a>실습을 해보자</h2><p><a href="https://beanbroker.github.io/2019/07/13/Java/java_querydsl_gradle4-1/">querydsl 관련 내용 블로그</a></p><p>위의 블로그에서 작성한 코드를 기반으로 테스트 코드를 작성해보자</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@NoArgsConstructor</span>(access = AccessLevel.PROTECTED)</span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Column</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">(String userId, String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>옛날 소스와 많이 다르지 않지만 덕지덕지 붙어있었던 불필요한 부분 삭제를 하였다.</p><blockquote><p>테스트 할 내용은 유저를 생성하고 조회한다 가정해보자</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">(String userId, String userName, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    userRepository.save(</span><br><span class="line">            UserEntity.builder().userId(userId).name(userName).age(age).build()</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserId</span><span class="params">(String userId)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    userRepository.getByUserId(userId);</span><br><span class="line">    Optional&lt;UserEntity&gt; userEntity = Optional.ofNullable(userRepository.getByUserId(userId));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!userEntity.isPresent())&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">"Not Found"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">    userInfo.setUserAge(userEntity.get().getAge());</span><br><span class="line">    userInfo.setUserName(userEntity.get().getName());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> userEntity.get();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>생성과 삭제코드 </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = UserService.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@MockBean</span></span><br><span class="line">    UserRepository userRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TEST_USER_ID = <span class="string">"powertest"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TEST_USER_NAME = <span class="string">"룰루랄라"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> TEST_USER_AGE = <span class="number">13</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cleanup</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        userService.deleteUser(TEST_USER_ID);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AfterSaveUser_GetUserInfo</span><span class="params">()</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Given 유저를 생성하였고</span></span><br><span class="line">        userService.createUser(TEST_USER_ID, TEST_USER_NAME, TEST_USER_AGE);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//When 유져를 찾을때</span></span><br><span class="line">        UserEntity userEntity = userService.getUserId(TEST_USER_ID);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//then 유저의 이름은 룰루랄라이다</span></span><br><span class="line">        assertThat(userEntity.getName(), is(TEST_USER_NAME));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(expected = NotFoundException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkExpectedException</span><span class="params">()</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//When 유져를 찾을때</span></span><br><span class="line">        UserEntity userEntity = userService.getUserId(<span class="string">"sadfsd"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>물론 위처럼 작성하면 너무나 당연하게 통과한다… 위처럼 작성 후  다음에 다시 테스트를 돌릴경우 userId가 Unique값이라면 정상저긍로 작동하지 않을 것이다. 그렇기 때문에 After 생성한 삭제를 삭제해주자</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Junit-테스트&quot;&gt;&lt;a href=&quot;#Junit-테스트&quot; class=&quot;headerlink&quot; title=&quot;Junit 테스트&quot;&gt;&lt;/a&gt;Junit 테스트&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://beanbroker.github.io/2018
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/categories/Spring/Junit/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>Spring cloud 1장 (gateway)</title>
    <link href="https://beanbroker.github.io/2019/07/21/spring_cloud/spring_cloud_gateway1/"/>
    <id>https://beanbroker.github.io/2019/07/21/spring_cloud/spring_cloud_gateway1/</id>
    <published>2019-07-21T09:30:00.000Z</published>
    <updated>2019-07-21T09:29:29.652Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-cloud-1장-gateway"><a href="#Spring-cloud-1장-gateway" class="headerlink" title="Spring cloud 1장 (gateway)"></a>Spring cloud 1장 (gateway)</h1><p>심심해서 해보는 스프링 클라우드 샘플코드 만들어보기</p><p><a href="https://github.com/beanbroker/sample_spring_cloud_gw" rel="external nofollow noopener noreferrer" target="_blank">github 소스</a> 링크</p><h1 id="Spring-cloud란"><a href="#Spring-cloud란" class="headerlink" title="Spring cloud란"></a>Spring cloud란</h1><p><a href="https://spring.io/projects/spring-cloud-gateway" rel="external nofollow noopener noreferrer" target="_blank">Spring 공홈 </a> 링크</p><p>이것을 설명하기보다는… 유명한 네이버, 우아한형제 등등 기술블로그에서 검색하여 간단하게 읽는 것을 강력하게 추천! 설명 잘되어있음</p><h2 id="A-시작해보자"><a href="#A-시작해보자" class="headerlink" title="A. 시작해보자"></a>A. 시작해보자</h2><blockquote><p>build.gradle</p></blockquote><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">dependencies</span> &#123;</span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-gateway'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-sleuth'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.cloud:spring-cloud-starter-zipkin'</span></span><br><span class="line">    testImplementation <span class="string">'org.springframework.boot:spring-boot-starter-test'</span></span><br><span class="line"></span><br><span class="line">    compileOnly <span class="string">'org.projectlombok:lombok'</span></span><br><span class="line">    implementation <span class="string">'org.springframework.boot:spring-boot-starter-data-redis'</span></span><br><span class="line">    <span class="keyword">compile</span> <span class="keyword">group</span>: <span class="string">'it.ozimov'</span>, name: <span class="string">'embedded-redis'</span>, version: <span class="string">'0.7.2'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>다른것을 해보기 위해 미리 디펜던시들을 추가하였고 이번장에서 중요허게 봐야할 부분은 gateway, sleuth이다. 물론 zuul도 나중에.. 시간이 된다면 추가해서 무엇이 다른지에 대한 설명을 추가해야된다.</p><h3 id="게이트웨이란"><a href="#게이트웨이란" class="headerlink" title="게이트웨이란?"></a>게이트웨이란?</h3><ul><li>end point를 통합하는 서버이다( 클라이언트 요청의 집합소!). like 프록시 서버</li></ul><h3 id="슬루스란"><a href="#슬루스란" class="headerlink" title="슬루스란?"></a>슬루스란?</h3><ul><li>SOA, MSA이건 여러개의 서비스에서 서로간의 통신을 한다고 가정을 하자!<ul><li>로그 추적을 어떻게??</li><li>이를 쉽게 해주는 서비스 Sleuth</li><li>Sleuth traceId와 spanId제공</li></ul></li></ul><h3 id="Span-ID"><a href="#Span-ID" class="headerlink" title="Span ID"></a>Span ID</h3><ul><li>작업의 기본 단위이다. 각 서비스 호출시에 새로운 Span이 하나 생성  </li><li>Description, key-value annotation, process ID 등의 추가 정보를 가짐</li><li>Trace에서 제일 처음 만들어지는 Span을 root span이라 함(trace id와 동일)</li></ul><h3 id="Trace-ID"><a href="#Trace-ID" class="headerlink" title="Trace ID"></a>Trace ID</h3><ul><li>최초 호출시 인입 서비스에서 생성 </li></ul><h2 id="B-소스를-적용해보자"><a href="#B-소스를-적용해보자" class="headerlink" title="B. 소스를 적용해보자"></a>B. 소스를 적용해보자</h2><blockquote><p>RouterConfig.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebFlux</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RouterConfig</span> <span class="keyword">implements</span> <span class="title">WebFluxConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RouterFunction&lt;ServerResponse&gt; <span class="title">routes</span><span class="params">(HelloWorldHandler handler)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> route(GET(<span class="string">"/"</span>), handler::helloWorld);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>HelloWorldHandler.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(HelloWorldHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Mono&lt;ServerResponse&gt; <span class="title">helloWorld</span><span class="params">(ServerRequest request)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">"start to get healthcheck"</span>);</span><br><span class="line">        <span class="keyword">return</span> ServerResponse.ok().body(Mono.just(<span class="string">"hello"</span>), String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 하면 끝이다. 물론 현재 프록시하는 역할을 가지고 있지 않다. 2장에서 서비스 서버 하나를 띄우고 어찌작동되는지 함께 보여줄 예정</p><p>위처럼 하고 실행! 후 <a href="http://localhost:9000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:9000/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-07-21 18:19:10.084  INFO [gateway,3fb0ee4984a21a7e,3fb0ee4984a21a7e,false] 37457 --- [ctor-http-nio-2] c.b.beangw.handler.HelloWorldHandler     : start to get healthcheck</span><br></pre></td></tr></table></figure><p>앞쪽이 traceId, 뒤쪽이 spanid이다</p><blockquote><p>집킨설정을 통해 로그를 바꿔보자</p></blockquote><blockquote><p>application.yml<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  zipkin:</span></span><br><span class="line"><span class="attr">    service:</span></span><br><span class="line"><span class="attr">      name:</span> <span class="string">sample-gw</span></span><br></pre></td></tr></table></figure></p></blockquote><p>재기동 후 로그는 아래처럼</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2019-07-21 18:22:25.117  INFO [sample-gw,1c296c8c12cc57b5,1c296c8c12cc57b5,false] 37462 --- [ctor-http-nio-2] c.b.beangw.handler.HelloWorldHandler     : start to get healthcheck</span><br></pre></td></tr></table></figure><h2 id="C-헤더에-traceID를-심어보자"><a href="#C-헤더에-traceID를-심어보자" class="headerlink" title="C. 헤더에 traceID를 심어보자"></a>C. 헤더에 traceID를 심어보자</h2><blockquote><p>GatewayDefaultConfig.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GatewayDefaultConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Tracer tracer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GatewayDefaultConfig</span><span class="params">(Tracer tracer)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tracer = tracer;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LoggerFactory.getLogger(GatewayDefaultConfig.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> GlobalFilter <span class="title">lifeLandGlobalFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> (exchange, chain) -&gt; chain.filter(exchange).then(Mono.fromRunnable(() -&gt; &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            String tracerId = tracer.currentSpan().context().traceIdString();</span><br><span class="line"></span><br><span class="line">                exchange.getResponse().getHeaders().set(<span class="string">"X-BEANBROKER-TRACE"</span>, tracerId);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>음 실제로 운영하다보면 헤더에 trace-id를 넣어서 하면 좋은 경우가 있다.</p><p>2장에서 실제로 서비스서버로 호출하여 trace-id가 찍히는지 확인해보자!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-cloud-1장-gateway&quot;&gt;&lt;a href=&quot;#Spring-cloud-1장-gateway&quot; class=&quot;headerlink&quot; title=&quot;Spring cloud 1장 (gateway)&quot;&gt;&lt;/a&gt;Spring cloud 1장
      
    
    </summary>
    
      <category term="spring_cloud" scheme="https://beanbroker.github.io/categories/spring-cloud/"/>
    
      <category term="gateway" scheme="https://beanbroker.github.io/categories/spring-cloud/gateway/"/>
    
    
      <category term="spring_cloud" scheme="https://beanbroker.github.io/tags/spring-cloud/"/>
    
      <category term="gateway" scheme="https://beanbroker.github.io/tags/gateway/"/>
    
  </entry>
  
  <entry>
    <title>OBJECT 1장</title>
    <link href="https://beanbroker.github.io/2019/07/21/Java/Object_java1/"/>
    <id>https://beanbroker.github.io/2019/07/21/Java/Object_java1/</id>
    <published>2019-07-21T08:00:00.000Z</published>
    <updated>2019-07-21T07:53:19.520Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Obejct-1장"><a href="#Obejct-1장" class="headerlink" title="Obejct 1장"></a>Obejct 1장</h1><blockquote><p>해당 블로그 컨텐츠는 Object 책을 공부하며 생각을 정리한 내용입니다.</p></blockquote><p><a href="https://wikibook.co.kr/object/" rel="external nofollow noopener noreferrer" target="_blank">Object wikibook</a> 링크</p><p><a href="https://github.com/eternity-oop/object" rel="external nofollow noopener noreferrer" target="_blank">해당 책 예제 소스 </a> 링크</p><h1 id="A-객체지향이란"><a href="#A-객체지향이란" class="headerlink" title="A. 객체지향이란?"></a>A. 객체지향이란?</h1><blockquote><p>p41</p></blockquote><p>말 그대로 객체를 지향하는 것이다. 진정한 객체지향 페러다임으로의 전환은 클래스가 아닌 객체에 초점을 맞출 떄에만 얻을 수 있다. 이를 위해 2가지에 집중이 필요</p><ol><li>어떤 클래스가 필요한지를 고민하기 전에 어떤 객체들이 필요한지 고민하라! <ul><li>클래스는 공통적인 <strong>상태와 행동</strong> 을 공유하는 객체들을 추상화 한것이다.</li></ul></li><li>객체를 독립적인 존재가 아니라 기능을 구현하기 위한 협력하는 공동체의 일월으로 봐야 한다.<ul><li>객체는 다른 객체에게 도움을 주거나 의존하면서 살아가는 협력적인 존재</li><li>객체를 고립된 존재로 바로보지 말고 협력에 참여하는 협력자로 바라보자.</li><li>객체들의 모양과 윤곽이 잡히면 <strong>공통된 특성과 상태</strong> 를 가진 각채들을 <strong>타입으로 분류</strong> 하고 이 타입을 기반으로 클래스를 구현하라.</li></ul></li></ol><p>즉! -&gt; 현실 세계의 state와 behavior를 추상화 -&gt; 클래스</p><p>객체지향의 본질은 협력하는 객체들의 공동체를 창조하는 것이다. 핵심은 <strong>역할, 책임, 협력</strong> 이다. 가장 중효하다 생각하는 부분은 당연히 책임이다.</p><p>객체의 상태에 초점을 맞추기 보다는 객체의 행동에 집중해야 한다. 객체의 내누 구현에 초점을 맞춘 설계 방법을 데이터 주도 설계(Data-Driven Design)</p><h2 id="책과의-별도-내용-Abstract-Class와-interface의-차이는-개인적인-생각-2년차부터-생각한"><a href="#책과의-별도-내용-Abstract-Class와-interface의-차이는-개인적인-생각-2년차부터-생각한" class="headerlink" title="(책과의 별도 내용) Abstract Class와 interface의 차이는? (개인적인 생각! 2년차부터 생각한!)"></a>(책과의 별도 내용) Abstract Class와 interface의 차이는? (개인적인 생각! 2년차부터 생각한!)</h2><p><strong>같은 상속구조 트리안에 있냐 없냐</strong> 가 중요하다고 생각한다. 기능을 제공할때 추상클래스에 위임할지 인터페이스에 위임할지 설계시 많은 고민을 한다. 같은 상속구조트리안에 있다면 추상클래스에 기능을 위임하고 같은 상속구조트라 안에 있지 않다면 인터페이스에 기능을 위임하는 것이 맞다고 생각한다. 이는 요구조건을 파악하고 설계시 매우 중요하다고 생각한다. 추상화한 클래스에 억지로 이러한 기능이 필요할거야 라는 좋지 않은 생각을 버리도록 항상 노력하자!</p><p>이를 통해 높은 응집도와 낮은 결합도를 추구할수 있다 생각한다. 객체지향은 항상 어려운것이다.</p><h2 id="B-method-or-message"><a href="#B-method-or-message" class="headerlink" title="B. method or message"></a>B. method or message</h2><blockquote><p>p49</p></blockquote><p>객체게 다른 객체와 상호작용할수 있는 유일한 방법을 메시지를 전송하는 것뿐이다. 다른 객체에게 요청이 도달할 때 해당 객체가 메시지를 수신했다고 이야기한다. 수진된 메시지를 처리하기 위한 자신만의 방법을 메서드라고 부른다.</p><p>how to 구분? 메시지와 메서드 : <strong>다형성</strong> 과 연관</p><p>메시지와 메서드를 실행 시점에 바인당한다. </p><ol><li><p>지연 바인딩 or 동적 바인딩</p><ul><li>메서드를 실행 시점에 바인딩한다.</li></ul></li><li><p>초기 바인딩 or 동적 바인딩</p><ul><li>전통적인 함수 호출처럼 컴파일 시점에 실행된 함수나 프로시저를 결정하는 것</li></ul></li></ol><p>객체지향이 컴파일 시점의 의존성과 실행 시점의 인존성을 분리하고, 하나의 메시지를 선택적으로 서로 다른 메서드에 연결할수 있는 이유가 바로 지연 바인딩이라는 메커니즘을 사용하기 때문</p><p>책에 나와있는 모든 샘플 코드와 왜 이와같이 변경되는지도 포함시켜 업로드하고 싶지만.. 이건 직접봐야하는 책이라고 생각한다. </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Obejct-1장&quot;&gt;&lt;a href=&quot;#Obejct-1장&quot; class=&quot;headerlink&quot; title=&quot;Obejct 1장&quot;&gt;&lt;/a&gt;Obejct 1장&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;해당 블로그 컨텐츠는 Object 책을 공부하며 생각
      
    
    </summary>
    
      <category term="Obejct" scheme="https://beanbroker.github.io/categories/Obejct/"/>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Obejct/Java/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="Obejct" scheme="https://beanbroker.github.io/tags/Obejct/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot With Querydsl Java (gradle 4 버젼용) 2장</title>
    <link href="https://beanbroker.github.io/2019/07/14/Java/java_querydsl_gradle4-2/"/>
    <id>https://beanbroker.github.io/2019/07/14/Java/java_querydsl_gradle4-2/</id>
    <published>2019-07-14T09:15:00.000Z</published>
    <updated>2019-07-14T09:20:25.059Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PREDICATOR"><a href="#PREDICATOR" class="headerlink" title="PREDICATOR"></a>PREDICATOR</h1><p><a href="https://github.com/beanbroker/querydsl_java_spring" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 링크</p><p><a href="https://beanbroker.github.io/2019/03/09/Kotlin/kotlin_queryDsl3/">kotlin_version</a> 링크</p><p>PREDICATOR가 왜필요할지는  동적쿼리를 매번매번 function으로 추가하여 쓸데없는 메소드 추가를 방지</p><h2 id="바로-소스-카즈아"><a href="#바로-소스-카즈아" class="headerlink" title="바로 소스 카즈아"></a>바로 소스 카즈아</h2><p><strong>중요부분</strong> 매우 중요</p><p>괜히 이펙티브자바에서 빌더를 써라라고 하는것이 아님!</p><blockquote><p>UserPredicator.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.beanbroker.sample.api.user.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.QUserEntity;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.BooleanBuilder;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.Predicate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserPredicator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> QUserEntity table = QUserEntity.userEntity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BooleanBuilder builder = <span class="keyword">new</span> BooleanBuilder();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserPredicator <span class="title">userId</span><span class="params">(String userId)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(userId != <span class="keyword">null</span>)&#123;</span><br><span class="line">            builder.and(table.userId.eq(userId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserPredicator <span class="title">name</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(name != <span class="keyword">null</span>)&#123;</span><br><span class="line">            builder.and(table.name.eq(name));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserPredicator <span class="title">age</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(age &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            builder.and(table.age.eq(age));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Predicate <span class="title">values</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> builder.getValue();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>참쉬죠잉?</p><blockquote><p>UserRepositoryCustom.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.Predicate;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">UserEntity <span class="title">getByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line">    <span class="function">UserEntity <span class="title">getUserInfoWithPredicator</span><span class="params">(Predicate predicate)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserRepositoryImpl.java</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public class UserRepositoryImpl extends QuerydslRepositorySupport</span><br><span class="line">        implements UserRepositoryCustom &#123;</span><br><span class="line"></span><br><span class="line">    private static final QUserEntity table = QUserEntity.userEntity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;@link QuerydslRepositorySupport&#125; instance for the given domain type.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param domainClass must not be &#123;@literal null&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public UserRepositoryImpl() &#123;</span><br><span class="line">        super(UserEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserEntity getByUserId(String userId) &#123;</span><br><span class="line"></span><br><span class="line">        return  from(table)</span><br><span class="line">                .where(table.userId.eq(userId))</span><br><span class="line">                .fetchOne();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserEntity getUserInfoWithPredicator(Predicate userPredicator) &#123;</span><br><span class="line">        return from(table)</span><br><span class="line">                .where(userPredicator)</span><br><span class="line">                .fetchOne();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="셋팅은-끝낫는데-how-to-use"><a href="#셋팅은-끝낫는데-how-to-use" class="headerlink" title="셋팅은 끝낫는데 how to use?"></a>셋팅은 끝낫는데 how to use?</h2><p>아래가 핵심코드</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserInfoWithPredicator</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">           String userId,</span></span></span><br><span class="line"><span class="function"><span class="params">           String name,</span></span></span><br><span class="line"><span class="function"><span class="params">           <span class="keyword">int</span> age</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">   )</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> userRepository.getUserInfoWithPredicator(</span><br><span class="line">               setUserQuery(userId, name, age)</span><br><span class="line">       );</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> Predicate <span class="title">setUserQuery</span><span class="params">( String userId,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                                   <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> UserPredicator()</span><br><span class="line">               .userId(userId)</span><br><span class="line">               .name(name)</span><br><span class="line">               .age(age)</span><br><span class="line">               .values();</span><br><span class="line"></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="그럼-써보자"><a href="#그럼-써보자" class="headerlink" title="그럼 써보자"></a>그럼 써보자</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">UserEntity test1 = userService.getUserInfoWithPredicator(</span><br><span class="line">             <span class="string">"beanbroker"</span>,</span><br><span class="line">             <span class="keyword">null</span>,</span><br><span class="line">             <span class="number">0</span></span><br><span class="line"></span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line">     System.out.println(test1.toString());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     UserEntity test2 = userService.getUserInfoWithPredicator(</span><br><span class="line">             <span class="string">"beanbroker"</span>,</span><br><span class="line">                 <span class="string">"pkj"</span>,</span><br><span class="line">             <span class="number">0</span></span><br><span class="line"></span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">     System.out.println(test2.toString());</span><br><span class="line"></span><br><span class="line">     UserEntity test3 = userService.getUserInfoWithPredicator(</span><br><span class="line">             <span class="keyword">null</span>,</span><br><span class="line">             <span class="keyword">null</span>,</span><br><span class="line">             <span class="number">32</span></span><br><span class="line"></span><br><span class="line">     );</span><br><span class="line"></span><br><span class="line">     System.out.println(test3.toString());</span><br></pre></td></tr></table></figure><p>아 요즘은 왜 저렇게써야하는지 설명 적는게 귀찮다…. 활용방법은 다양하니! 잘사용합시당</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PREDICATOR&quot;&gt;&lt;a href=&quot;#PREDICATOR&quot; class=&quot;headerlink&quot; title=&quot;PREDICATOR&quot;&gt;&lt;/a&gt;PREDICATOR&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/beanbroker
      
    
    </summary>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/categories/Querydsl/"/>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Querydsl/Spring/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/tags/Querydsl/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot With Querydsl Java (gradle 4 버젼용) 1장</title>
    <link href="https://beanbroker.github.io/2019/07/13/Java/java_querydsl_gradle4-1/"/>
    <id>https://beanbroker.github.io/2019/07/13/Java/java_querydsl_gradle4-1/</id>
    <published>2019-07-13T08:50:00.000Z</published>
    <updated>2019-07-14T09:13:41.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-기본셋팅"><a href="#1-기본셋팅" class="headerlink" title="1. 기본셋팅"></a>1. 기본셋팅</h1><p>5버젼과 4버젼의 차이를 추후 블로그에 공유할예정! </p><p>회사에서 gradle 4버젼을 사용함을 인지!</p><p>build.gradle에서 가장 중요하게 봐야하는 부분은 <strong>// querydsl 적용</strong> 이라 적혀있는 부분</p><blockquote><p>build.gradle (메이븐일 경우 다른데곳에서 찾아서….하시길..)</p></blockquote><blockquote><p>build.gradle</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">buildscript &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line"></span><br><span class="line">        springBootVersion = <span class="string">'2.1.6.RELEASE'</span></span><br><span class="line">        querydslPluginVersion = <span class="string">'1.0.10'</span></span><br><span class="line">    &#125;</span><br><span class="line">    repositories &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">        maven &#123; url <span class="string">"https://plugins.gradle.org/m2/"</span> &#125; <span class="comment">// plugin 저장소</span></span><br><span class="line">    &#125;</span><br><span class="line">    dependencies &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:$&#123;springBootVersion&#125;"</span>)</span><br><span class="line">        classpath(<span class="string">"gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:$&#123;querydslPluginVersion&#125;"</span>)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">'java'</span></span><br><span class="line">apply plugin: <span class="string">'org.springframework.boot'</span></span><br><span class="line">apply plugin: <span class="string">'io.spring.dependency-management'</span></span><br><span class="line"></span><br><span class="line">group = <span class="string">'com.beanbroker'</span></span><br><span class="line">version = <span class="string">'0.0.1-SNAPSHOT'</span></span><br><span class="line">sourceCompatibility = <span class="string">'1.8'</span></span><br><span class="line"></span><br><span class="line">repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line">    compile(<span class="string">"com.querydsl:querydsl-jpa"</span>) <span class="comment">// querydsl</span></span><br><span class="line">    compile(<span class="string">"com.querydsl:querydsl-apt"</span>) <span class="comment">// querydsl</span></span><br><span class="line"></span><br><span class="line">    compile(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line">    compile(<span class="string">'org.springframework.boot:spring-boot-starter-web'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//    runtimeOnly('com.h2database:h2')</span></span><br><span class="line">    runtimeOnly <span class="string">'mysql:mysql-connector-java'</span></span><br><span class="line">    compile(<span class="string">'org.projectlombok:lombok'</span>)</span><br><span class="line">    testCompile(<span class="string">'org.springframework.boot:spring-boot-starter-test'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// querydsl 적용</span></span><br><span class="line">apply plugin: <span class="string">"com.ewerk.gradle.plugins.querydsl"</span></span><br><span class="line">def querydslSrcDir = <span class="string">'src/main/generated'</span></span><br><span class="line"></span><br><span class="line">querydsl &#123;</span><br><span class="line">    library = <span class="string">"com.querydsl:querydsl-apt"</span></span><br><span class="line">    jpa = <span class="keyword">true</span></span><br><span class="line">    querydslSourcesDir = querydslSrcDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [<span class="string">'src/main/java'</span>, querydslSrcDir]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def querydslSrcDir = <span class="string">'src/main/generated'</span></span><br><span class="line"></span><br><span class="line">querydsl &#123;</span><br><span class="line">    library = <span class="string">"com.querydsl:querydsl-apt"</span></span><br><span class="line">    jpa = <span class="keyword">true</span></span><br><span class="line">    querydslSourcesDir = querydslSrcDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileQuerydsl&#123;</span><br><span class="line">    options.annotationProcessorPath = configurations.querydsl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    querydsl.extendsFrom compileClasspath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [<span class="string">'src/main/java'</span>, querydslSrcDir]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>application.yml</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">    datasource:</span><br><span class="line">        url: jdbc:mysql://localhost:3306/study</span><br><span class="line">        username: root</span><br><span class="line">        password: password</span><br></pre></td></tr></table></figure><blockquote><p>user.sql</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`user_id`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><blockquote><p>UserEntity.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">(String userId, String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-repository"><a href="#2-repository" class="headerlink" title="2. repository"></a>2. repository</h1><blockquote><p>반드시 읽고 왜 레포구성이 아래와 같이 진행되는지!</p></blockquote><p>아래의 설명을 읽어야하는이유! ( you must )</p><p><strong>you must</strong> first define a fragment interface and an implementation for the custom functionality, as shown in the following example:</p><p><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations</a></p><p>참고하면 좋을 사항<br><a href="https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl</a></p><blockquote><p>UserRepository.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.JpaRepository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span></span></span><br><span class="line"><span class="class">        <span class="title">JpaRepository</span>&lt;<span class="title">UserEntity</span>, <span class="title">Long</span>&gt;,</span></span><br><span class="line"><span class="class">//        <span class="title">QuerydslPredicateExecutor</span>&lt;<span class="title">UserEntity</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserRepositoryCustom.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">UserEntity <span class="title">getByUserId</span><span class="params">(String userId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserRepositoryImpl.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.QUserEntity;</span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.jpa.repository.support.QuerydslRepositorySupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryImpl</span> <span class="keyword">extends</span> <span class="title">QuerydslRepositorySupport</span></span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">UserRepositoryCustom</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> QUserEntity table = QUserEntity.userEntity;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Creates a new &#123;<span class="doctag">@link</span> QuerydslRepositorySupport&#125; instance for the given domain type.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> domainClass must not be &#123;<span class="doctag">@literal</span> null&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserRepositoryImpl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(UserEntity.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getByUserId</span><span class="params">(String userId)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span>  from(table)</span><br><span class="line">                .where(table.userId.eq(userId))</span><br><span class="line">                .fetchOne();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-Service-and-Domain-and-Controller"><a href="#3-Service-and-Domain-and-Controller" class="headerlink" title="3. Service and Domain and Controller"></a>3. Service and Domain and Controller</h1><p>에러 처리밑 중복처리 안되어있음 그냥 쓰는 방법만 알고 알아서</p><blockquote><p>UserService.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.domain.UserInfo;</span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.entity.UserEntity;</span><br><span class="line"><span class="keyword">import</span> com.beanbroker.sample.api.user.repository.UserRepository;</span><br><span class="line"><span class="keyword">import</span> javassist.NotFoundException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Optional;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserRepository userRepository;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserService</span><span class="params">(UserRepository userRepository)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userRepository = userRepository;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createUser</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        userRepository.save(</span><br><span class="line">                <span class="keyword">new</span> UserEntity(<span class="string">"beanbroker"</span>, <span class="string">"pkj"</span>, <span class="number">32</span>)</span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUserId</span><span class="params">(String userId)</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Optional&lt;UserEntity&gt; userEntity = Optional.ofNullable(userRepository.getByUserId(userId));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!userEntity.isPresent())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NotFoundException(<span class="string">"Not Found"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo();</span><br><span class="line">        userInfo.setUserAge(userEntity.get().getAge());</span><br><span class="line">        userInfo.setUserName(userEntity.get().getName());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userEntity.get();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserInfo.java</p></blockquote><p>entity와 client에게 갈 response가 왜따로따로 나가야할가라는 고민을 꼭하자…</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserInfo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> userAge;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userName = userName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getUserAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userAge;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserAge</span><span class="params">(<span class="keyword">int</span> userAge)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userAge = userAge;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserController.java</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserController</span><span class="params">(UserService userService)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userService = userService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserEntity <span class="title">testUser</span><span class="params">()</span> <span class="keyword">throws</span> NotFoundException </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        userService.createUser();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userService.getUserId(<span class="string">"beanbroker"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>약속이 있으므로 빠르게 튀튀 다음장에서 github과 다른 부분들 더자세하게</p><p>2019년 7월 17일 깃헙 추가</p><p><a href="https://github.com/beanbroker/querydsl_java_spring" rel="external nofollow noopener noreferrer" target="_blank">git source</a> 링크</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1-기본셋팅&quot;&gt;&lt;a href=&quot;#1-기본셋팅&quot; class=&quot;headerlink&quot; title=&quot;1. 기본셋팅&quot;&gt;&lt;/a&gt;1. 기본셋팅&lt;/h1&gt;&lt;p&gt;5버젼과 4버젼의 차이를 추후 블로그에 공유할예정! &lt;/p&gt;
&lt;p&gt;회사에서 gradle 4버젼
      
    
    </summary>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/categories/Querydsl/"/>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Querydsl/Spring/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/tags/Querydsl/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot With Querydsl Java (gradle 5.0 이상)</title>
    <link href="https://beanbroker.github.io/2019/07/13/Java/java_querydsl_gradle5/"/>
    <id>https://beanbroker.github.io/2019/07/13/Java/java_querydsl_gradle5/</id>
    <published>2019-07-13T02:50:00.000Z</published>
    <updated>2019-07-13T06:37:17.632Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-boot-With-Querydsl"><a href="#Spring-boot-With-Querydsl" class="headerlink" title="Spring boot With Querydsl"></a>Spring boot With Querydsl</h2><p>옛날부터 꼭 올려야 된다 생각하였지만….. 그렇게 하면… 너무 많아서 잠을 잘수가 없다..</p><p><a href="https://beanbroker.github.io/2019/02/10/Kotlin/kotlin_queryDsl1/">코틀린 with QueryDsl</a> 과거 코틀린편은 올렸으나 자바로 한 적이 없어서…. 이글을 쓴다.</p><h2 id="1-Why-QueryDsl"><a href="#1-Why-QueryDsl" class="headerlink" title="1. Why QueryDsl"></a>1. Why QueryDsl</h2><ol><li>Type-check가 불가능하다. -&gt; SQL, JPQL은 문자열임</li><li>컴파일 시점에… 알수가 없다.</li><li>쿼리 실행이 어플리케이션에 실행되었을 때 아이고 저런.. 하며 후회한다.</li><li>그럼 어찌해야하느냐!! -&gt; QueryDsl 또는 Jooq를 쓰자</li></ol><blockquote><p>QueryDsl -&gt; 쓰면서 느끼는 점</p></blockquote><ol><li>Sql이 클래스처럼 Type이 있어 <strong>type-safe</strong>하다</li><li><strong>다이나미쿼리</strong>(동적쿼리)를 짜기 편하다.</li><li>Jooq가 QueryDsl보다 편하지만 아직은 대중적이지 않다. 개인적으로 Jooq는 rdb로 통계쿼리 뽑아내는 부분은 짱이다.</li></ol><h2 id="2-바로-실습"><a href="#2-바로-실습" class="headerlink" title="2. 바로 실습"></a>2. 바로 실습</h2><blockquote><p>build.gradle (메이븐일 경우 다른데곳에서 찾아서….하시길..)</p></blockquote><p>대충 아래처럼 추가라고 말했지만.. 이기준은 gradle 5이상에서의 셋팅이다.. 아.. 5버젼에서 처음 셋팅하느라 고생을 ….하였다. 빨리하고 자려고 했는데..</p><blockquote><p>build.gradle</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">plugins &#123;</span><br><span class="line">    id <span class="string">'org.springframework.boot'</span> version <span class="string">'2.1.5.RELEASE'</span></span><br><span class="line">    id <span class="string">'java'</span></span><br><span class="line">    id <span class="string">"com.ewerk.gradle.plugins.querydsl"</span> version <span class="string">"1.0.10"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dependencies &#123;</span><br><span class="line"></span><br><span class="line">중략</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> compile(<span class="string">"com.querydsl:querydsl-jpa"</span>) <span class="comment">// querydsl</span></span><br><span class="line">compile(<span class="string">"com.querydsl:querydsl-apt"</span>) <span class="comment">// querydsl</span></span><br><span class="line">runtimeOnly <span class="string">'mysql:mysql-connector-java'</span></span><br><span class="line">compile(<span class="string">'org.springframework.boot:spring-boot-starter-data-jpa'</span>)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">중략</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def querydslSrcDir = <span class="string">'src/main/generated'</span></span><br><span class="line"></span><br><span class="line">querydsl &#123;</span><br><span class="line">    library = <span class="string">"com.querydsl:querydsl-apt"</span></span><br><span class="line">    jpa = <span class="keyword">true</span></span><br><span class="line">    querydslSourcesDir = querydslSrcDir</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">compileQuerydsl&#123;</span><br><span class="line">    options.annotationProcessorPath = configurations.querydsl</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">configurations &#123;</span><br><span class="line">    querydsl.extendsFrom compileClasspath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sourceSets &#123;</span><br><span class="line">    main &#123;</span><br><span class="line">        java &#123;</span><br><span class="line">            srcDirs = [<span class="string">'src/main/java'</span>, querydslSrcDir]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>application.yml</p></blockquote><p>ddl 트루로 하자 구찮다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">spring: </span><br><span class="line">    datasource:</span><br><span class="line">        url: jdbc:mysql://localhost:3306/study</span><br><span class="line">        username: root</span><br><span class="line">        password: password</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    jpa:</span><br><span class="line">        generate-ddl: true</span><br><span class="line">        hibernate.ddl-auto: create-drop</span><br></pre></td></tr></table></figure><blockquote><p>UserEntity.class</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span>(strategy = GenerationType.IDENTITY)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String userId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Builder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserEntity</span><span class="params">(String userId, String name, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-gradle-build"><a href="#3-gradle-build" class="headerlink" title="3. gradle build"></a>3. gradle build</h2><p>아래와 같은 QClass가 위에서 명시한 src/main/generate아래에 생성되어진다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.querydsl.core.types.PathMetadataFactory.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.dsl.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.PathMetadata;</span><br><span class="line"><span class="keyword">import</span> javax.annotation.Generated;</span><br><span class="line"><span class="keyword">import</span> com.querydsl.core.types.Path;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * QUserEntity is a Querydsl query type for UserEntity</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Generated</span>(<span class="string">"com.querydsl.codegen.EntitySerializer"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QUserEntity</span> <span class="keyword">extends</span> <span class="title">EntityPathBase</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1472300146L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> QUserEntity userEntity = <span class="keyword">new</span> QUserEntity(<span class="string">"userEntity"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath age = createString(<span class="string">"age"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> NumberPath&lt;Long&gt; id = createNumber(<span class="string">"id"</span>, Long.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath name = createString(<span class="string">"name"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> StringPath userId = createString(<span class="string">"userId"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QUserEntity</span><span class="params">(String variable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(UserEntity.class, forVariable(variable));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QUserEntity</span><span class="params">(Path&lt;? extends UserEntity&gt; path)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(path.getType(), path.getMetadata());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">QUserEntity</span><span class="params">(PathMetadata metadata)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(UserEntity.class, metadata);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-repository"><a href="#4-repository" class="headerlink" title="4. repository"></a>4. repository</h2><p>아래의 설명을 읽어야하는이유! ( you must )</p><p><strong>you must</strong> first define a fragment interface and an implementation for the custom functionality, as shown in the following example:</p><p><a href="https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-data/jpa/docs/2.1.3.RELEASE/reference/html/#repositories.custom-implementations</a></p><p>참고하면 좋을 사항<br><a href="https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/blog/2011/04/26/advanced-spring-data-jpa-specifications-and-querydsl</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-boot-With-Querydsl&quot;&gt;&lt;a href=&quot;#Spring-boot-With-Querydsl&quot; class=&quot;headerlink&quot; title=&quot;Spring boot With Querydsl&quot;&gt;&lt;/a&gt;Spring boot
      
    
    </summary>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/categories/Querydsl/"/>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Querydsl/Spring/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/tags/Querydsl/"/>
    
  </entry>
  
  <entry>
    <title>Docker Mysql 인코딩 해결</title>
    <link href="https://beanbroker.github.io/2019/07/07/docekr_encode/"/>
    <id>https://beanbroker.github.io/2019/07/07/docekr_encode/</id>
    <published>2019-07-07T09:50:00.000Z</published>
    <updated>2019-07-07T09:47:10.472Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Docker-Mysql-인코딩-해결"><a href="#Docker-Mysql-인코딩-해결" class="headerlink" title="Docker Mysql 인코딩 해결"></a>Docker Mysql 인코딩 해결</h2><p>옛날부터 꼭 올려야 된다 생각하였지만..</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name some-mysql -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password mysql --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci</span><br></pre></td></tr></table></figure><p>꼭 도커 컨테이너를 실행시 뒤에 char set 설정을 해야 한다. 그렇지 않을 경우 한글 insert시 다깨져서 나온다….</p><h3 id="1-도커-mysql-접속"><a href="#1-도커-mysql-접속" class="headerlink" title="1. 도커 mysql 접속"></a>1. 도커 mysql 접속</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -i -t some-mysql bash</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line">패스워드 입력</span><br></pre></td></tr></table></figure><h3 id="2-status-명령어-입력"><a href="#2-status-명령어-입력" class="headerlink" title="2. status 명령어 입력"></a>2. status 명령어 입력</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; status</span><br><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.26, for Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:6</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@localhost</span><br><span class="line">SSL:Not in use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:&apos;&apos;</span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:5.7.26 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:Localhost via UNIX socket</span><br><span class="line">Server characterset:utf8mb4</span><br><span class="line">Db     characterset:utf8mb4</span><br><span class="line">Client characterset:latin1</span><br><span class="line">Conn.  characterset:latin1</span><br><span class="line">UNIX socket:/var/run/mysqld/mysqld.sock</span><br><span class="line">Uptime:8 min 27 sec</span><br><span class="line"></span><br><span class="line">Threads: 3  Questions: 53  Slow queries: 0  Opens: 111  Flush tables: 1  Open tables: 104  Queries per second avg: 0.104</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><h3 id="3-뒤에-charset을-붙이지-않고-테스트-진행"><a href="#3-뒤에-charset을-붙이지-않고-테스트-진행" class="headerlink" title="3. 뒤에 charset을 붙이지 않고 테스트 진행"></a>3. 뒤에 charset을 붙이지 않고 테스트 진행</h3><p>docker run -d –name test-mysql -p 3308:3308 -e MYSQL_ROOT_PASSWORD=password mysql:5.7</p><h3 id="위와-차이점을-확인하자"><a href="#위와-차이점을-확인하자" class="headerlink" title="위와 차이점을 확인하자!"></a>위와 차이점을 확인하자!</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--------------</span><br><span class="line">mysql  Ver 14.14 Distrib 5.7.26, for Linux (x86_64) using  EditLine wrapper</span><br><span class="line"></span><br><span class="line">Connection id:2</span><br><span class="line">Current database:</span><br><span class="line">Current user:root@localhost</span><br><span class="line">SSL:Not in use</span><br><span class="line">Current pager:stdout</span><br><span class="line">Using outfile:&apos;&apos;</span><br><span class="line">Using delimiter:;</span><br><span class="line">Server version:5.7.26 MySQL Community Server (GPL)</span><br><span class="line">Protocol version:10</span><br><span class="line">Connection:Localhost via UNIX socket</span><br><span class="line">Server characterset:latin1</span><br><span class="line">Db     characterset:latin1</span><br><span class="line">Client characterset:latin1</span><br><span class="line">Conn.  characterset:latin1</span><br><span class="line">UNIX socket:/var/run/mysqld/mysqld.sock</span><br><span class="line">Uptime:14 sec</span><br><span class="line"></span><br><span class="line">Threads: 1  Questions: 5  Slow queries: 0  Opens: 105  Flush tables: 1  Open tables: 98  Queries per second avg: 0.357</span><br><span class="line">--------------</span><br></pre></td></tr></table></figure><p>끝!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Docker-Mysql-인코딩-해결&quot;&gt;&lt;a href=&quot;#Docker-Mysql-인코딩-해결&quot; class=&quot;headerlink&quot; title=&quot;Docker Mysql 인코딩 해결&quot;&gt;&lt;/a&gt;Docker Mysql 인코딩 해결&lt;/h2&gt;&lt;p&gt;옛날
      
    
    </summary>
    
      <category term="Docker" scheme="https://beanbroker.github.io/categories/Docker/"/>
    
      <category term="mysql" scheme="https://beanbroker.github.io/categories/Docker/mysql/"/>
    
    
      <category term="Docker" scheme="https://beanbroker.github.io/tags/Docker/"/>
    
      <category term="mysql" scheme="https://beanbroker.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Back up</title>
    <link href="https://beanbroker.github.io/2019/07/07/back/"/>
    <id>https://beanbroker.github.io/2019/07/07/back/</id>
    <published>2019-07-07T06:50:00.000Z</published>
    <updated>2019-07-07T09:00:01.927Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Hexo-blog-back-up-test"><a href="#Hexo-blog-back-up-test" class="headerlink" title="Hexo blog back up test"></a>Hexo blog back up test</h3><p>블로그를 옮길때 꼭 theme back-up을 해야함을.. 몸으로 느끼며…..u</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Hexo-blog-back-up-test&quot;&gt;&lt;a href=&quot;#Hexo-blog-back-up-test&quot; class=&quot;headerlink&quot; title=&quot;Hexo blog back up test&quot;&gt;&lt;/a&gt;Hexo blog back up te
      
    
    </summary>
    
      <category term="HEXO" scheme="https://beanbroker.github.io/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="https://beanbroker.github.io/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>CI 3장, Amazon CodeStar</title>
    <link href="https://beanbroker.github.io/2019/06/09/CI/codestar3/"/>
    <id>https://beanbroker.github.io/2019/06/09/CI/codestar3/</id>
    <published>2019-06-09T09:10:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-CodeStar-3장"><a href="#Amazon-CodeStar-3장" class="headerlink" title="Amazon CodeStar 3장"></a>Amazon CodeStar 3장</h1><p><a href="https://beanbroker.github.io/2019/06/09/CI/codestar1/">Amazon CodeStar 1장</a> </p><p><a href="https://beanbroker.github.io/2019/06/09/CI/codestar2/">Amazon CodeStar 2장</a> </p><p>2장에서 깜빡한 부분이…. 깃이그노어를 추가해야된다는…것을 깜빡…</p><h2 id="STEP-14"><a href="#STEP-14" class="headerlink" title="STEP 14"></a>STEP 14</h2><ul><li>.gitignore 파일 추가</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">/target/</span><br><span class="line">!.mvn/wrapper/maven-wrapper.jar</span><br><span class="line"></span><br><span class="line">### STS ###</span><br><span class="line">.apt_generated</span><br><span class="line">.classpath</span><br><span class="line">.factorypath</span><br><span class="line">.project</span><br><span class="line">.settings</span><br><span class="line">.springBeans</span><br><span class="line">.sts4-cache</span><br><span class="line"></span><br><span class="line">### IntelliJ IDEA ###</span><br><span class="line">.idea</span><br><span class="line">*.iws</span><br><span class="line">*.iml</span><br><span class="line">*.ipr</span><br><span class="line"></span><br><span class="line">### NetBeans ###</span><br><span class="line">/nbproject/private/</span><br><span class="line">/build/</span><br><span class="line">/nbbuild/</span><br><span class="line">/dist/</span><br><span class="line">/nbdist/</span><br><span class="line">/.nb-gradle/</span><br></pre></td></tr></table></figure><ul><li>깃 이그노어를 추가 후 push하자마자 아래의 사진과 같이 재배포 시작</li><li>커밋 이력이 보이며, 오른쪽에 연속배포가 변화함을 알수 있음</li><li>마스터 브랜치 기준으로 배포가 진행되니 develope branch생성하여 푸쉬하자!</li><li>해당 실습에서 배포 기준은 master로</li></ul><p><img src="/images/codestar/14.png" alt="14"></p><h2 id="STEP-15-마무리"><a href="#STEP-15-마무리" class="headerlink" title="STEP 15 마무리"></a>STEP 15 마무리</h2><blockquote><ol><li>테스트 코드 작성 중요성</li></ol></blockquote><ol><li>강제로 테스트코드에 무조건 fail 하는 코드 생성 후 master brach에 push시 빌드 실패하여 배포 안됨</li><li>이를 통해 사이드이펙트 미리 방지 할수 있으며 테스트 코드를 통한 음… 안정성? 및 안전한 배포 가능</li><li>깃 branch를 직접생성하거나 git-flow를 활용하여! 코드 리뷰를 진행해야 한다.</li></ol><blockquote><ol start="2"><li>codebuild</li></ol></blockquote><ol><li>aws codebuild를 통해 디폴트 환경변수 셋팅 가능</li><li>인증서 추가 가능 등등 다양한 빌드 옵션 추가 가능</li></ol><blockquote><ol start="3"><li>배포 브런치 선택가능</li></ol></blockquote><ol><li>어떠한 브런치 기준으로 커밋이되었을 때 자동으로 배포됨을 설정 가능</li></ol><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>CI의 중요성이나 테스트 코드 및 다양한 codestar 기능을 추가하고 싶으나! CI의 중요성은 이미 훌륭하신 개발자 분들께서 블로그에 올려두셨으니 참고 바람(꼭)</p><p>실제로 진행하면서 버튼 몇번으로 끝나서 무언가 쉽다 느끼지만 이것을 만들기 위한 aws노력에 감탄하며!</p><p>다양한 환경 구성을 통해 CI를 구축하며 노력하는 개발자가 되어야겠음을 반성</p><p>무언가 필요함을 느끼는 것을 전략! 그것을 풀어나가는 것이 전술! ( 개발을 가르쳐준 o효섭 개발자의 말을 따르면… ) - 전략이 중요하고 전술은 풀어과는 과정</p><p>CI을 필요함을 느껴 codestar로…… 다음주에는 travis를 통해 CI를 구축해볼 생각!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-CodeStar-3장&quot;&gt;&lt;a href=&quot;#Amazon-CodeStar-3장&quot; class=&quot;headerlink&quot; title=&quot;Amazon CodeStar 3장&quot;&gt;&lt;/a&gt;Amazon CodeStar 3장&lt;/h1&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Amazon" scheme="https://beanbroker.github.io/categories/Amazon/"/>
    
      <category term="CodeStar" scheme="https://beanbroker.github.io/categories/Amazon/CodeStar/"/>
    
    
      <category term="Amazon" scheme="https://beanbroker.github.io/tags/Amazon/"/>
    
      <category term="CodeStar" scheme="https://beanbroker.github.io/tags/CodeStar/"/>
    
  </entry>
  
  <entry>
    <title>CI 2장, Amazon CodeStar</title>
    <link href="https://beanbroker.github.io/2019/06/09/CI/codestar2/"/>
    <id>https://beanbroker.github.io/2019/06/09/CI/codestar2/</id>
    <published>2019-06-09T08:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-CodeStar-2장"><a href="#Amazon-CodeStar-2장" class="headerlink" title="Amazon CodeStar 2장"></a>Amazon CodeStar 2장</h1><p><a href="https://beanbroker.github.io/2019/06/09/CI/codestar1/">Amazon CodeStar 1장</a> 을 보고 오신 분들은 해당 2장을 이어서 나가시면 됩니다</p><p>스템 10으로 시작하는 이유는… 1장에서 이어서 나갔기 때문입니다.</p><h2 id="STEP-10"><a href="#STEP-10" class="headerlink" title="STEP 10"></a>STEP 10</h2><ul><li>1장에서 로그인 하였던 깃헙아이디로 깃헙 로그인을 하게되면 놀랍게도 기본으로 생성된 레포지토리를 확인 할수 있다.</li><li>readme.md파일에서 getting Started전까지만 보고 패스</li><li>해당 프로젝트를 clone 땡겨오자( cli, sourceTree, git kraken 등등)</li></ul><p><img src="/images/codestar/10.png" alt="10"></p><h2 id="STEP-11"><a href="#STEP-11" class="headerlink" title="STEP 11"></a>STEP 11</h2><ul><li>maven프로젝트로 기본 셋팅</li><li>간단한 헬로 컨트롤러와 테스트 코드가 작성되어 있음</li><li>gradle로 변경 가능(pom.xml 지우고, build.gradle 추가하고 등등….)</li></ul><p><img src="/images/codestar/11.png" alt="11"></p><blockquote><p>헬로 컨트롤러</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aws.codestar.projecttemplates.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Basic Spring web service controller that handles all GET requests.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MESSAGE_FORMAT = <span class="string">"Hello %s!"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET, produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">helloWorldGet</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"World"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(createResponse(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST, produces = <span class="string">"application/json"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResponseEntity <span class="title">helloWorldPost</span><span class="params">(@RequestParam(value = <span class="string">"name"</span>, defaultValue = <span class="string">"World"</span>)</span> String name) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(createResponse(name));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">createResponse</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JSONObject().put(<span class="string">"Output"</span>, String.format(MESSAGE_FORMAT, name)).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>간단한 테스트 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.aws.codestar.projecttemplates.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeAll;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.DisplayName;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.junit.jupiter.api.Assertions.assertEquals;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests for &#123;<span class="doctag">@link</span> HelloWorldController&#125;. Modify the tests in order to support your use case as you build your project.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@DisplayName</span>(<span class="string">"Tests for HelloWorldController"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorldControllerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String EXPECTED_RESPONSE_VALUE = <span class="string">"Hello AWS CodeStar!"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INPUT_NAME = <span class="string">"AWS CodeStar"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> HelloWorldController controller = <span class="keyword">new</span> HelloWorldController();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initializing variables before we run the tests.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@BeforeAll</span> for initializing static variables at the start of the test class execution.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@BeforeEach</span> for initializing variables before each test is run.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@BeforeAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use as needed.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * De-initializing variables after we run the tests.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@AfterAll</span> for de-initializing static variables at the end of the test class execution.</span></span><br><span class="line"><span class="comment">     * Use <span class="doctag">@AfterEach</span> for de-initializing variables at the end of each test.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@AfterAll</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">tearDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Use as needed.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Basic test to verify the result obtained when calling &#123;<span class="doctag">@link</span> HelloWorldController#helloWorldGet&#125; successfully.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"Basic test for GET request"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testGetRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity responseEntity = controller.helloWorldGet(INPUT_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify the response obtained matches the values we expect.</span></span><br><span class="line">        JSONObject jsonObjectFromResponse = <span class="keyword">new</span> JSONObject(responseEntity.getBody().toString());</span><br><span class="line">        assertEquals(EXPECTED_RESPONSE_VALUE, jsonObjectFromResponse.get(<span class="string">"Output"</span>));</span><br><span class="line">        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Basic test to verify the result obtained when calling &#123;<span class="doctag">@link</span> HelloWorldController#helloWorldPost&#125; successfully.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="meta">@DisplayName</span>(<span class="string">"Basic test for POST request"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testPostRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ResponseEntity responseEntity = controller.helloWorldPost(INPUT_NAME);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Verify the response obtained matches the values we expect.</span></span><br><span class="line">        JSONObject jsonObjectFromResponse = <span class="keyword">new</span> JSONObject(responseEntity.getBody().toString());</span><br><span class="line">        assertEquals(EXPECTED_RESPONSE_VALUE, jsonObjectFromResponse.get(<span class="string">"Output"</span>));</span><br><span class="line">        assertEquals(HttpStatus.OK, responseEntity.getStatusCode());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>만약에 테스트코드가 존재하지 않는다면 CI 도입이 필요하지 않음</p><ul><li>코드를 작성 후 테스틐 코드 없이 배포를 자동으로 맡겨버리게 된다면 사이드이펙트 체크 불가</li><li>테스트 코드가 없다면 수동배포와 별차이가 없음</li></ul><h2 id="STEP-12"><a href="#STEP-12" class="headerlink" title="STEP 12"></a>STEP 12</h2><ul><li>글을 작성하다보니 빌드 및 배포 완료</li></ul><p><img src="/images/codestar/12.png" alt="12"></p><h2 id="STEP-13"><a href="#STEP-13" class="headerlink" title="STEP 13"></a>STEP 13</h2><ul><li>오른쪽 소스, 빌드, 디플로이 시간</li><li>커밋이력 또한 볼수 있음! jira컨플런스랑 연동도 가능합니다. </li></ul><p><img src="/images/codestar/13.png" alt="13"></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ul><li>많은 셋팅 없이 ci구축이 가능하며, aws에서 제공해주는 다양한 서비스들을 한번에 올라옴</li><li>3장으로 이어가야…. 할듯….</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-CodeStar-2장&quot;&gt;&lt;a href=&quot;#Amazon-CodeStar-2장&quot; class=&quot;headerlink&quot; title=&quot;Amazon CodeStar 2장&quot;&gt;&lt;/a&gt;Amazon CodeStar 2장&lt;/h1&gt;&lt;p&gt;&lt;a hre
      
    
    </summary>
    
      <category term="Amazon" scheme="https://beanbroker.github.io/categories/Amazon/"/>
    
      <category term="CodeStar" scheme="https://beanbroker.github.io/categories/Amazon/CodeStar/"/>
    
      <category term="CI" scheme="https://beanbroker.github.io/categories/Amazon/CodeStar/CI/"/>
    
    
      <category term="Amazon" scheme="https://beanbroker.github.io/tags/Amazon/"/>
    
      <category term="CodeStar" scheme="https://beanbroker.github.io/tags/CodeStar/"/>
    
      <category term="CI" scheme="https://beanbroker.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>CI 1장, Amazon CodeStar</title>
    <link href="https://beanbroker.github.io/2019/06/09/CI/codestar1/"/>
    <id>https://beanbroker.github.io/2019/06/09/CI/codestar1/</id>
    <published>2019-06-09T08:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.321Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-CodeStar"><a href="#Amazon-CodeStar" class="headerlink" title="Amazon CodeStar"></a>Amazon CodeStar</h1><p>aws 계정을 새로만들었으나.. 메일 인증을 안했던………</p><p>CI를 구축을 위해 이리저리 알아보다가 aws에서 제공해주는 CodeStar를 테스트하였고 아주 훌륭함을 느낌! 2장은 Travis로 간단한 테스트 예정!</p><blockquote><p>CodeStar란?</p></blockquote><p><a href="https://aws.amazon.com/ko/codestar/" rel="external nofollow noopener noreferrer" target="_blank">Amazon CodeStar</a></p><p>AWS CodeStar 사용에 대한 <strong>추가 비용은 없습니다.</strong> 애플리케이션을 개발하고 실행하기 위해 프로비저닝한 AWS 리소스에 대한 비용만 지불하면 됩니다(예: Amazon EC2 인스턴스).</p><p>추가비용이 없습니다!! S3에 파일 업로드되는 비용 또는 ec2인스턴스 등을 쓰는 비용만 지불</p><p>우선 aws무료계정을 만들고, 메일 인증을 꼭하자</p><h2 id="STEP-1"><a href="#STEP-1" class="headerlink" title="STEP 1"></a>STEP 1</h2><ul><li>로그인 후 서비스에서 codestar를 찾은 후 클릭</li><li>프로젝트 시작 클릭</li></ul><p><img src="/images/codestar/1.png" alt="1"></p><h2 id="STEP-2"><a href="#STEP-2" class="headerlink" title="STEP 2"></a>STEP 2</h2><ul><li>권한이 필요함을 알수 있음</li></ul><p><img src="/images/codestar/2.png" alt="2"></p><h2 id="STEP-3"><a href="#STEP-3" class="headerlink" title="STEP 3"></a>STEP 3</h2><ul><li>사람들이 많이 쓰는 다양한 프레임워크가 존재</li><li>우리는 Java Spring 웹 서비스, Elastic Beanstalk선택</li><li>여기서 잠깐 Elastic Beanstalk란? 직접 찾아서 검색</li><li>참고로 코틀린이 없다고 아쉬워 할필요 없음. 프로젝트 생성후 코틀린으로 바꿀수 있음(이미 실험완료)</li></ul><p><img src="/images/codestar/3.png" alt="3"></p><h2 id="STEP-4"><a href="#STEP-4" class="headerlink" title="STEP 4"></a>STEP 4</h2><ul><li>프로젝트 이름 대충 입력 후</li><li>github 클릭</li></ul><p><img src="/images/codestar/4.png" alt="4"></p><h2 id="STEP-5"><a href="#STEP-5" class="headerlink" title="STEP 5"></a>STEP 5</h2><ul><li>깃헙 로그인 후</li><li>레포지토리 이름 설정</li><li>private으로 만들어야한다. ( secret key 노출 가능성 있음)</li></ul><p><img src="/images/codestar/5.png" alt="5"></p><h2 id="STEP-6"><a href="#STEP-6" class="headerlink" title="STEP 6"></a>STEP 6</h2><ul><li>소스는 github에서 관리</li><li>빌드는 aws codebuild에서</li><li>테스트는 코드빌드에서 또한 진행(테스트 코드가 없다면 ci는 필요가 없다 생각)</li><li>배포는 beanstalk에 배포</li><li>모니터링은 cloudwatch에서! (cloudwatch를 쓰는 모든 개발자들에게 insight는 정말 신의 한수)</li></ul><p><img src="/images/codestar/6.png" alt="6"></p><h2 id="STEP-7"><a href="#STEP-7" class="headerlink" title="STEP 7"></a>STEP 7</h2><ul><li>Amazon EC2 Management Console에 로그인하고 키 페어 생성을 선택하여 키 페어를 생성합니다.</li><li>대충 생성 후 키페어 선택 옆에 새로고침 버튼 클릭</li><li>방금 만든 키페어는 어디에도 노출되면안됨!! 절대 안됨( 노출하게 되면 누군가 유럽 진형에서 비트코인 채굴하는 모습을 볼수 있음)</li></ul><p><img src="/images/codestar/7.png" alt="7"></p><h2 id="STEP-8"><a href="#STEP-8" class="headerlink" title="STEP 8"></a>STEP 8</h2><ul><li>다음 버튼 누르면 끝</li></ul><p><img src="/images/codestar/8.png" alt="8"></p><h2 id="STEP-9"><a href="#STEP-9" class="headerlink" title="STEP 9"></a>STEP 9</h2><ul><li>끝 기다리자</li></ul><p><img src="/images/codestar/9.png" alt="9"></p><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><ol><li>자신의 깃헙으로 들어가면 바로 레포지노리가 생성되었음을 알수 있음(빠름)</li><li>처음 프로젝트 빌드하는 동안 오래 걸림(하지만 원래 이게 정상)</li><li>다음 장에서 좀더 심화 과정으로 </li><li>스프링 프로젝트가 디폴트로 메이븐 프로젝트로 되있음…… gradle을 설정할수 있는 부분이 없는데 해당부분은 직접 바꾸며됨(조금 많이 귀찮음.. 기존 프로젝트에 있는 디펜던시 다옮기다가 힘들어 죽을번..)</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-CodeStar&quot;&gt;&lt;a href=&quot;#Amazon-CodeStar&quot; class=&quot;headerlink&quot; title=&quot;Amazon CodeStar&quot;&gt;&lt;/a&gt;Amazon CodeStar&lt;/h1&gt;&lt;p&gt;aws 계정을 새로만들었으나.. 
      
    
    </summary>
    
      <category term="Amazon" scheme="https://beanbroker.github.io/categories/Amazon/"/>
    
      <category term="CodeStar" scheme="https://beanbroker.github.io/categories/Amazon/CodeStar/"/>
    
      <category term="CI" scheme="https://beanbroker.github.io/categories/Amazon/CodeStar/CI/"/>
    
    
      <category term="Amazon" scheme="https://beanbroker.github.io/tags/Amazon/"/>
    
      <category term="CodeStar" scheme="https://beanbroker.github.io/tags/CodeStar/"/>
    
      <category term="CI" scheme="https://beanbroker.github.io/tags/CI/"/>
    
  </entry>
  
  <entry>
    <title>Intellij multi project</title>
    <link href="https://beanbroker.github.io/2019/06/08/intelliJ/multi_project/"/>
    <id>https://beanbroker.github.io/2019/06/08/intelliJ/multi_project/</id>
    <published>2019-06-08T10:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Intellij-multi-project"><a href="#Intellij-multi-project" class="headerlink" title="Intellij multi project"></a>Intellij multi project</h1><p>원래는 aws codestar 글을 게시하려 하였으나…. aws계정을 새로 만들고 아직 승인이 다떨어지지 않아서 서비스 생성이 불가하여… 원래부터 하려하였던 인텔리제이 멀티프로젝트 설정방법을 작성합니다.</p><p>인텔리제이를 사용하다보면 이클립스와 다르게 여러개의 프로젝트를 다 따로 띄워서 확인하는 불편함을 누구나 겪었을 것이다. 예를 들어 유저와 관련된 서비스와 쇼핑과 관련된 서비스 등 다양한 도메인 서비스들을 따로따로 보는 부분이 힘들다. 이에 해당 방법은 아주 오래전에 올리려햇으나… 파일을 잃어버림….</p><p>아래와 같이 진행하면 정상적으로 여러개의 모듈 프로젝트를 한 인텔리제이에서 실행 및 코드를 볼수 있다.</p><h2 id="STEP-1"><a href="#STEP-1" class="headerlink" title="STEP 1"></a>STEP 1</h2><p>인텔리제이 실행 후 Create New Project</p><p><img src="/images/intellij/1.png" alt="1"></p><h2 id="STEP-2"><a href="#STEP-2" class="headerlink" title="STEP 2"></a>STEP 2</h2><p>Empty Project 클릭 후 Next 버튼</p><p><img src="/images/intellij/2.png" alt="2"></p><h2 id="STEP-3"><a href="#STEP-3" class="headerlink" title="STEP 3"></a>STEP 3</h2><p>저장 할 위치 선택</p><p><img src="/images/intellij/3.png" alt="3"></p><h2 id="STEP-4"><a href="#STEP-4" class="headerlink" title="STEP 4"></a>STEP 4</h2><p>Modules 클릭 후 -&gt; +버튼 클릭 -&gt; import Module</p><p><img src="/images/intellij/4.png" alt="4"></p><h2 id="STEP-5"><a href="#STEP-5" class="headerlink" title="STEP 5"></a>STEP 5</h2><p>import할 프로젝트로 들어가서</p><ol><li>gradle 프로젝트일 경우 build.gradle</li><li>maven 프로젝트일 경우 pom.xml </li></ol><p>위를 진행하면 아래와 사진이 나오고 OK버튼 클릭</p><p><img src="/images/intellij/5.png" alt="5"></p><h2 id="STEP-6"><a href="#STEP-6" class="headerlink" title="STEP 6"></a>STEP 6</h2><p>프로젝트 2개 추가한 모습</p><p><img src="/images/intellij/6.png" alt="6"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Intellij-multi-project&quot;&gt;&lt;a href=&quot;#Intellij-multi-project&quot; class=&quot;headerlink&quot; title=&quot;Intellij multi project&quot;&gt;&lt;/a&gt;Intellij multi proje
      
    
    </summary>
    
      <category term="Intellij" scheme="https://beanbroker.github.io/categories/Intellij/"/>
    
      <category term="multi" scheme="https://beanbroker.github.io/categories/Intellij/multi/"/>
    
    
      <category term="Intellij" scheme="https://beanbroker.github.io/tags/Intellij/"/>
    
      <category term="multi" scheme="https://beanbroker.github.io/tags/multi/"/>
    
  </entry>
  
  <entry>
    <title>Amazon Aurora max_connections</title>
    <link href="https://beanbroker.github.io/2019/06/04/etc/aws_rds_max_connections/"/>
    <id>https://beanbroker.github.io/2019/06/04/etc/aws_rds_max_connections/</id>
    <published>2019-06-04T11:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Amazon-Aurora의-instance-type에-따른-max-connections"><a href="#Amazon-Aurora의-instance-type에-따른-max-connections" class="headerlink" title="Amazon Aurora의 instance type에 따른 max_connections"></a>Amazon Aurora의 instance type에 따른 max_connections</h1><p><a href="https://docs.aws.amazon.com/ko_kr/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Managing.Performance.html" rel="external nofollow noopener noreferrer" target="_blank">Aws rds max connection</a></p><p>db.t2.small: 45</p><p>db.t2.medium: 90</p><p>db.r3.large: 1000</p><p>db.r3.xlarge: 2000</p><p>db.r3.2xlarge: 3000</p><p>db.r3.4xlarge: 4000</p><p>db.r3.8xlarge: 5000</p><p>db.r4.large: 1000</p><p>db.r4.xlarge: 2000</p><p>db.r4.2xlarge: 3000</p><p>db.r4.4xlarge: 4000</p><p>db.r4.8xlarge: 5000</p><p>db.r4.16xlarge: 6000</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Amazon-Aurora의-instance-type에-따른-max-connections&quot;&gt;&lt;a href=&quot;#Amazon-Aurora의-instance-type에-따른-max-connections&quot; class=&quot;headerlink&quot; tit
      
    
    </summary>
    
      <category term="Aurora" scheme="https://beanbroker.github.io/categories/Aurora/"/>
    
      <category term="max_connections" scheme="https://beanbroker.github.io/categories/Aurora/max-connections/"/>
    
    
      <category term="Aurora" scheme="https://beanbroker.github.io/tags/Aurora/"/>
    
      <category term="max_connections" scheme="https://beanbroker.github.io/tags/max-connections/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Proxy 설정 추가본</title>
    <link href="https://beanbroker.github.io/2019/06/02/Server/study_nginx3/"/>
    <id>https://beanbroker.github.io/2019/06/02/Server/study_nginx3/</id>
    <published>2019-06-02T09:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-Proxy-설정-추가본"><a href="#Nginx-Proxy-설정-추가본" class="headerlink" title="Nginx Proxy 설정 추가본"></a>Nginx Proxy 설정 추가본</h1><h2 id="Nginx-Proxy-host주소를-변수에-담아-사용해보자"><a href="#Nginx-Proxy-host주소를-변수에-담아-사용해보자" class="headerlink" title="Nginx Proxy host주소를 변수에 담아 사용해보자"></a>Nginx Proxy host주소를 변수에 담아 사용해보자</h2><p>temp_host에 담아서 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">set $temp_host &quot;http://localhost:7077&quot;;</span><br><span class="line">       location / &#123;</span><br><span class="line"></span><br><span class="line">proxy_pass $temp_host;</span><br><span class="line">proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">    #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>위와같이 설정후 nginx 재시작 후 localhost:5000 호출시 정상작동 확인</p><h2 id="마무리"><a href="#마무리" class="headerlink" title="마무리"></a>마무리</h2><p>사실 여기까지 오게된 이유는… Nginx를 ELB Reverse Proxy로 사용할때… connection failed가 가끔가다 발생하여 해당 문제 해결을 위해…. 아래의 블로그를 참고하여 진행하였다…</p><p><a href="http://tech.kkung.net/blog/nginx-with-elb/" rel="external nofollow noopener noreferrer" target="_blank">Nginx를 ELB Reverse Proxy로 사용할때 주의 점</a> 이글을 작성해주신분 감사합니다..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx-Proxy-설정-추가본&quot;&gt;&lt;a href=&quot;#Nginx-Proxy-설정-추가본&quot; class=&quot;headerlink&quot; title=&quot;Nginx Proxy 설정 추가본&quot;&gt;&lt;/a&gt;Nginx Proxy 설정 추가본&lt;/h1&gt;&lt;h2 id=&quot;N
      
    
    </summary>
    
      <category term="Nginx" scheme="https://beanbroker.github.io/categories/Nginx/"/>
    
      <category term="Proxy" scheme="https://beanbroker.github.io/categories/Nginx/Proxy/"/>
    
    
      <category term="Nginx" scheme="https://beanbroker.github.io/tags/Nginx/"/>
    
      <category term="Proxy" scheme="https://beanbroker.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Nginx Proxy 설정</title>
    <link href="https://beanbroker.github.io/2019/06/02/Server/study_nginx2/"/>
    <id>https://beanbroker.github.io/2019/06/02/Server/study_nginx2/</id>
    <published>2019-06-02T08:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-Proxy-설정"><a href="#Nginx-Proxy-설정" class="headerlink" title="Nginx Proxy 설정"></a>Nginx Proxy 설정</h1><blockquote><p>Nginx Proxy 설정해보자!</p></blockquote><p>설정전에 간단한 개념정리</p><h2 id="1-what"><a href="#1-what" class="headerlink" title="1. what?"></a>1. what?</h2><p>Proxy 서버란? -&gt; 중계서버(서버로 들어오는 request 중계)</p><p><a href="https://ko.wikipedia.org/wiki/%ED%94%84%EB%A1%9D%EC%8B%9C_%EC%84%9C%EB%B2%84" rel="external nofollow noopener noreferrer" target="_blank">위키 proxy서버란?</a></p><h2 id="2-why"><a href="#2-why" class="headerlink" title="2. why?"></a>2. why?</h2><ol><li>보안<ul><li>익명의 사용자가 서버에 접근하는 것을 막음</li></ul></li><li><p>속도</p><ul><li>Proxy 서버로 들어오는 요청을 캐싱함</li><li>cache를 저정하기 때문에 동일한 요청이 들어오게 될경우 cache 사용 가능</li><li>서버의 불필요한 자원 낭비 방지</li></ul></li><li><p>접근 우회</p><ul><li>보안적인 이슈로 인해 서버에 접근하지 못할 경우 우회해서 다른 서버들이 사용할수 있게 요청 전달</li></ul></li><li><p>ACL (Proxy Server에 접속 할 수 있는 범위를 설정하는 옵션)</p><ul><li>사이트 접근에 대한 접근 정책을 정의 가능</li></ul></li><li><p>Log/Audit</p></li></ol><h2 id="3-Proxy-실습"><a href="#3-Proxy-실습" class="headerlink" title=" 3. Proxy 실습"></a> 3. Proxy 실습</h2><p>우선 Proxy 설정을 하기전에 로컬에서 기동시킬 간단한 서버가 필요</p><p>각자 취향에 맞게 노드나 파이썬이나 스프링이나 아무거나 상관이 없음</p><blockquote><p>서버 port 7077롤 셋팅한 간단한 hello world</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloController</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">getSomething</span><span class="params">()</span>: String </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello world! welcome to visit my site"</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/test"</span>)</span><br><span class="line">    <span class="function">fun <span class="title">test</span><span class="params">()</span>: String </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"test test test"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>nginx.conf 파일 변경</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">       listen       5000;</span><br><span class="line">       server_name  localhost;</span><br><span class="line"></span><br><span class="line">       #charset koi8-r;</span><br><span class="line"></span><br><span class="line">       #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">       location / &#123;</span><br><span class="line"></span><br><span class="line">               proxy_pass http://localhost:7077;</span><br><span class="line">               proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">           #root   html;</span><br><span class="line">           #index  index.html index.htm;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><ol><li><a href="http://localhost:7077" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:7077</a> 으로 proxy 적용</li><li>proxy_http_version은 HTTP/1.1</li></ol><p>nginx -s reload 실행 후</p><p>localhost:5000접근시 nginx 초기 페이지가 아닌 <em>‘hello world! welcome to visit my site’</em> 노출 확인</p><blockquote><p>location 을 추가해보자</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">location /test &#123;</span><br><span class="line"></span><br><span class="line">               proxy_pass http://localhost:7077/test;</span><br><span class="line">               proxy_http_version 1.1;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>-&gt; localhost:5000/test로 들어오게 되면 <a href="http://localhost:7077/test" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:7077/test</a> 호출</p><p><em>‘test test test’</em> 문구 정상 노출 확인</p><p>사실   <a href="https://docs.nginx.com/nginx/admin-guide/web-server/web-server/" rel="external nofollow noopener noreferrer" target="_blank">Nginx 공홈</a> 에 너무 좋은 자료가 많다.. 다해보고 싶지만 우선 여기까지</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx-Proxy-설정&quot;&gt;&lt;a href=&quot;#Nginx-Proxy-설정&quot; class=&quot;headerlink&quot; title=&quot;Nginx Proxy 설정&quot;&gt;&lt;/a&gt;Nginx Proxy 설정&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Nginx Pro
      
    
    </summary>
    
      <category term="Nginx" scheme="https://beanbroker.github.io/categories/Nginx/"/>
    
      <category term="Proxy" scheme="https://beanbroker.github.io/categories/Nginx/Proxy/"/>
    
    
      <category term="Nginx" scheme="https://beanbroker.github.io/tags/Nginx/"/>
    
      <category term="Proxy" scheme="https://beanbroker.github.io/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 기초 설정</title>
    <link href="https://beanbroker.github.io/2019/06/02/Server/study_nginx1/"/>
    <id>https://beanbroker.github.io/2019/06/02/Server/study_nginx1/</id>
    <published>2019-06-02T07:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-기초-설정"><a href="#Nginx-기초-설정" class="headerlink" title="Nginx 기초 설정"></a>Nginx 기초 설정</h1><p>2주전에 docker와 nginx를 글을 이어서 나가야하지만… 어디까지 했는지 전혀 기억이 나지 않아……</p><p>그냥 local에 설치하고 원래 공부하려고 했던 부분을 정리….. 하…. </p><h2 id="Nginx-설치-및-정상-확인"><a href="#Nginx-설치-및-정상-확인" class="headerlink" title="Nginx 설치 및 정상 확인"></a>Nginx 설치 및 정상 확인</h2><blockquote><ol><li>home brew nginx 설치 명령어</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure><blockquote><ol start="2"><li>정상 설치 확인</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew list</span><br></pre></td></tr></table></figure><p>위의 커맨드 입력후 nginx가 보인다면 정상</p><blockquote><ol start="3"><li>nginx 실행</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx  &lt;- 실행</span><br></pre></td></tr></table></figure><blockquote><ol start="4"><li>nginx 정상 작동확인</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>정상적으로 떠있음을 확인 후 nginx 접속을 위해 config 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/etc/nginx</span><br><span class="line"></span><br><span class="line">cat nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">        listen       8080;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        .......</span><br></pre></td></tr></table></figure><p><a href="http://localhost:8080/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:8080/</a> 접속을 하게 되면 <em>Welcome to nginx!</em> 노출 확인</p><blockquote><ol start="5"><li>port를 바꿔서 재기동</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vi nginx.conf</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">listen 8080 -&gt; listen 5000으로 변경 후</span><br><span class="line"></span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><a href="http://localhost:5000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:5000/</a> 정상 노출 확인</p><blockquote><ol start="6"><li>nginx stop</li></ol></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><p>정상적으로 nginx가 꺼졌음을 확인</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx-기초-설정&quot;&gt;&lt;a href=&quot;#Nginx-기초-설정&quot; class=&quot;headerlink&quot; title=&quot;Nginx 기초 설정&quot;&gt;&lt;/a&gt;Nginx 기초 설정&lt;/h1&gt;&lt;p&gt;2주전에 docker와 nginx를 글을 이어서 나가야하지만…
      
    
    </summary>
    
      <category term="Nginx" scheme="https://beanbroker.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://beanbroker.github.io/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>Nginx with Docker 2장[ self deprecated ]</title>
    <link href="https://beanbroker.github.io/2019/05/19/Server/nginx2/"/>
    <id>https://beanbroker.github.io/2019/05/19/Server/nginx2/</id>
    <published>2019-05-19T10:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-with-docker-2장-deprecated"><a href="#Nginx-with-docker-2장-deprecated" class="headerlink" title="Nginx with docker 2장  deprecated"></a>Nginx with docker 2장  deprecated</h1><p>Docker compose를 활용 해보장</p><h2 id="Docker-compose란"><a href="#Docker-compose란" class="headerlink" title="Docker compose란?"></a>Docker compose란?</h2><p>간단하게 말하자면 multi-container Docker applications을 실행하기 위한 툴이다. </p><p><a href="https://docs.docker.com/compose/" rel="external nofollow noopener noreferrer" target="_blank">Docker compose</a></p><h2 id="Docker-compse-설치"><a href="#Docker-compse-설치" class="headerlink" title="Docker compse 설치"></a>Docker compse 설치</h2><p><a href="https://docs.docker.com/compose/install/" rel="external nofollow noopener noreferrer" target="_blank">Docker compose 설치 가이드</a></p><blockquote><p>STEP1 , Run this command to download the current stable release of Docker Compose:</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L &quot;https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>STEP2, Apply executable permissions to the binary</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>STEP3, 정상설치 확인</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">아래처럼 버젼확인가능</span><br><span class="line">docker-compose version 1.24.0, build 0aa59064</span><br></pre></td></tr></table></figure><p>아.. 이게 잠깐만 nginx 공부를 위해 작성하고 있는데 이건모 도커만 두들겨 패는느낌이…</p><p>잠시… 하.. 그냥 프리티어 ec2에서 nginx 설치할걸.. 하며 후회하는중….. 일단 여기까지 업로드 후 추후 업로드</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx-with-docker-2장-deprecated&quot;&gt;&lt;a href=&quot;#Nginx-with-docker-2장-deprecated&quot; class=&quot;headerlink&quot; title=&quot;Nginx with docker 2장  deprecat
      
    
    </summary>
    
      <category term="Nginx" scheme="https://beanbroker.github.io/categories/Nginx/"/>
    
      <category term="Docker" scheme="https://beanbroker.github.io/categories/Nginx/Docker/"/>
    
      <category term="Docker-compose" scheme="https://beanbroker.github.io/categories/Nginx/Docker/Docker-compose/"/>
    
    
      <category term="Docker" scheme="https://beanbroker.github.io/tags/Docker/"/>
    
      <category term="Nginx" scheme="https://beanbroker.github.io/tags/Nginx/"/>
    
      <category term="Docker-compose" scheme="https://beanbroker.github.io/tags/Docker-compose/"/>
    
  </entry>
  
  <entry>
    <title>Nginx with docker 셋팅</title>
    <link href="https://beanbroker.github.io/2019/05/19/Server/nginx1/"/>
    <id>https://beanbroker.github.io/2019/05/19/Server/nginx1/</id>
    <published>2019-05-19T07:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx-with-docker"><a href="#Nginx-with-docker" class="headerlink" title="Nginx with docker"></a>Nginx with docker</h1><p>aws ec2에 프록시, 리버스 포록시 설정을 해야할 일이 있어… 일이 끝난 후 정리하는..겸……….</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p><a href="https://nginx.org/en/" rel="external nofollow noopener noreferrer" target="_blank">Nginx 공홈</a></p><p><a href="https://news.netcraft.com/archives/2013/01/07/january-2013-web-server-survey-2.html" rel="external nofollow noopener noreferrer" target="_blank">Web server 통계</a></p><ol><li>기본적으로 웹서버</li><li>프록시 및 리버스 프록시, 메일 프록시 가능(3장에서 프록시 및 리버스 프록시를 진행해보자!)</li><li>비동기 이벤트 드라이븐 구조이다.</li><li>더 자세한 내용은 공홈에서!! 너무 잘나와있음</li><li>이미 우리가 알고 있는 다양한 IT를 이끄는 기업에서 성능이 좋음을 그들의 블로그에서 증명하였다. </li></ol><h2 id="아파치-vs-nginx"><a href="#아파치-vs-nginx" class="headerlink" title="아파치 vs nginx"></a>아파치 vs nginx</h2><h3 id="Apache"><a href="#Apache" class="headerlink" title="Apache"></a>Apache</h3><ul><li>쓰레드 / 프로세스 기반 구조로 요청 하나당 쓰레드 하나가 처리를 진행</li><li>사용자가 많다면? -&gt; 많은 쓰레드 생성 -&gt; 메모리 및 CPU 낭비가 심함</li><li>하나의 클라이언트당 하나의 쓰레드가 필요한 구조</li></ul><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><ul><li>비동기 Event-Driven 기반 구조.</li><li>다수의 연결을 효율적으로 처리가 가능하다.</li><li>Apache보다 적은 리소스로 더 빠르게 동작가능</li></ul><blockquote><p>하지만 둘중 무엇이 옳다, 좋다, 나쁘다 라는 것을 없다. 필요에 의해 아파치, nginx 말고도 다양한 Web Server를 선택해야한다.</p></blockquote><h2 id="Docker에-nginx를-설치해보자"><a href="#Docker에-nginx를-설치해보자" class="headerlink" title="Docker에 nginx를 설치해보자"></a>Docker에 nginx를 설치해보자</h2><h4 id="STEP-1-nginx-설치"><a href="#STEP-1-nginx-설치" class="headerlink" title="STEP 1, nginx 설치"></a>STEP 1, nginx 설치</h4><blockquote><p>도커에 nginx 설치</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx:latest</span><br></pre></td></tr></table></figure><blockquote><p>설치가 완료된후 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><p>현재 도커에 등록되어있는 이미지리스트가 나오고 nginx가 설치 되었음을 알수 있다.</p><h4 id="STEP-2-nginx-실행"><a href="#STEP-2-nginx-실행" class="headerlink" title="STEP 2, nginx 실행"></a>STEP 2, nginx 실행</h4><blockquote><p>nginx를 실행해보자</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name nginx-server -d -p 80:80 nginx</span><br></pre></td></tr></table></figure><blockquote><p>실행 후 실행이 되었는지 확인해보자</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a </span><br><span class="line"></span><br><span class="line">위의 명령어를 치면</span><br><span class="line"></span><br><span class="line">1767699b3689        nginx               &quot;nginx -g &apos;daemon of…&quot;   About a minute ago   Up About a minute           0.0.0.0:80-&gt;80/tcp</span><br></pre></td></tr></table></figure><p>위와 같이 나올 것이며 Status를 보면 정상적으로 떠있음을 확인 할수 있다.</p><blockquote><p>실제 정상작동함을 확인하기 위해서</p></blockquote><p><a href="http://127.0.0.1/" rel="external nofollow noopener noreferrer" target="_blank">http://127.0.0.1/</a> 를 쳐보면 정상적으로 나옴을 확인 할수 있다.</p><p>빠르게빠르게 다음 장으로 이동해보장!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx-with-docker&quot;&gt;&lt;a href=&quot;#Nginx-with-docker&quot; class=&quot;headerlink&quot; title=&quot;Nginx with docker&quot;&gt;&lt;/a&gt;Nginx with docker&lt;/h1&gt;&lt;p&gt;aws ec2에 프
      
    
    </summary>
    
      <category term="Nginx" scheme="https://beanbroker.github.io/categories/Nginx/"/>
    
      <category term="docker" scheme="https://beanbroker.github.io/categories/Nginx/docker/"/>
    
    
      <category term="Nginx" scheme="https://beanbroker.github.io/tags/Nginx/"/>
    
      <category term="docker" scheme="https://beanbroker.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 기초 1장 with Kotlin In Action</title>
    <link href="https://beanbroker.github.io/2019/04/21/Kotlin/kotlin_in_action1/"/>
    <id>https://beanbroker.github.io/2019/04/21/Kotlin/kotlin_in_action1/</id>
    <published>2019-04-21T10:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.326Z</updated>
    
    <content type="html"><![CDATA[<p>해당 블로그는 <a href="http://acornpub.co.kr/book/kotlin-in-action" rel="external nofollow noopener noreferrer" target="_blank">Kotlin In Action</a> 책의 내용을 정리한 글입니다. </p><h2 id="1-코틀린은"><a href="#1-코틀린은" class="headerlink" title="1. 코틀린은?"></a>1. 코틀린은?</h2><ol><li><p>정적 타입</p><ul><li>코틀린은 자바와 마찬가지로 정적 타입 지정 언어(컴파일러가 타임을 검증)</li></ul></li><li><p>타입 추론</p><ul><li>코틀린에서 모든 변수타입을 개발자가 직접 명시할 필요가 없다.</li></ul></li><li><p>nullable type 지원</p></li><li><p>함수형 프로그래밍 지원</p><ul><li>일급 시민인 함수를 일반 값처럼 다룰수 있다.</li><li>불변성</li><li>함수형 프로그래밍의 장점을 가질수 있음</li></ul></li><li><p>함수를 최상위 수준에 정의 할수 있다. (자바와 달리) 꼭 클래스 안에 함수를 넣어야 할 필요가 없다. 이점은 진자 편함</p></li><li><p>코틀린에서 여러 클래스를 한 파일에 넣을 수 있고, 파일의 이름을 마음대로 정할수 있다.</p></li></ol><h2 id="2-코틀린-변수"><a href="#2-코틀린-변수" class="headerlink" title="2. 코틀린 변수"></a>2. 코틀린 변수</h2><p>val? var?</p><p><a href="https://beanbroker.github.io/2018/11/11/Kotlin/kotlin_value/">코틀린 변수 설명</a></p><h2 id="코틀린-property"><a href="#코틀린-property" class="headerlink" title="코틀린 property"></a>코틀린 property</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">House</span></span>&#123;</span><br><span class="line">  val address : String,</span><br><span class="line">  <span class="keyword">var</span> hasYard : Boolean</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> address는 val로 선언 -&gt; 읽기 전용, 단순 읽을수 있는 getter 생성</p><p> isMarried var로 선언 -&gt; read, write둘다 가능. </p><h2 id="3-Casting"><a href="#3-Casting" class="headerlink" title="3. Casting"></a>3. Casting</h2><ul><li><p>스마트 캐스트 -&gt;<br>코틀린에서는 개발자 대신 컴파일러가 캐스팅을 대신해준다.</p></li><li><p>원하틑 타입으로 명시적으로 타입 캐스팅 하려면 as키워드 사용</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val numValue = n as Num</span><br></pre></td></tr></table></figure><h2 id="4-const"><a href="#4-const" class="headerlink" title="4. const"></a>4. const</h2><p>원시 타입과 String 타입만 const를 추가 할수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">코틀린</span><br><span class="line"><span class="keyword">const</span> val WHO_R_U = <span class="string">"WHO R U"</span></span><br><span class="line"></span><br><span class="line">자바</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String  WHO_R_U = <span class="string">"WHO R U"</span></span><br></pre></td></tr></table></figure><h2 id="5-확장-함수-진자-매력적인-부분"><a href="#5-확장-함수-진자-매력적인-부분" class="headerlink" title="5. 확장 함수 ( 진자 매력적인 부분 )"></a>5. 확장 함수 ( 진자 매력적인 부분 )</h2><p>확장 함수는 어떤 클래스의 멤버 메소드인 것처럼 호출할 수 있지만 그 클래스의 밖에 선언된 함수다. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun String.lastChar() : Char = <span class="keyword">this</span>[<span class="keyword">this</span>.length-<span class="number">1</span>]</span><br></pre></td></tr></table></figure><p>확장 함수를 만들려면 추가하려는 함수 이름 앞에 그 함수가 확장할 클래스의 이름을 덧붙이기만 하면 된다. </p><ul><li>수신 객체 타입 : <strong>클래스 이름</strong>, 위에선 String이 수식 객체 타입</li><li>수신 객체 : <strong>확장 함수가 호출되는 대상이 되는 값</strong>, 위에선 this가 수신 객체</li></ul><p>확장 함수 내부에서 일반적인 인스턴스 메소드의 내부에서와 마찬가지로 수신 객체의 메소드나 프로퍼티를 바로 사용 할수 있다. 하지만 캡슐화를 깨지는 않는다. <strong>클래스 안에서 정의된 메소드와 달리 확장 함수 안에는 클래스 내부에서만 사용할 수 있는 비공개 멤버나 보호된 멤버를 사용 할수 없다.</strong></p><p>(확장 함수는 오버라이드 할수 없다.)</p><p>확장 함수를 사용하게 되면 외부 라이브러리에 정의된 클래스를 포함하여 모든 클래스의 API를 그 클래스의 소드코드를 바꿀 필요 없이 확장 할수 있다.</p><h2 id="6-클래스-객체-인터페이스"><a href="#6-클래스-객체-인터페이스" class="headerlink" title="6. 클래스, 객체, 인터페이스"></a>6. 클래스, 객체, 인터페이스</h2><p>자바와 달리 코틀린 선언은 기본적으로 final이며 public이다. 클래스를 data로 선언하면 컴파일러가 일부 표준 메소드를 생성해준다. </p><blockquote><p>코틀린 인터페이스</p></blockquote><ul><li><p>추상메소드 뿐만 아니라 구현이 있는 메소드도 정의 할수 있다.</p></li><li><p>인터페이스에는 아무란 상태(필드)도 들어갈 수 없다.</p></li></ul><blockquote><p>코틀린 data class</p></blockquote><ul><li><p>모든 클래스가 정의해야하는 메소드를 자동 생성</p></li><li><p>데이터 클래스의 프로퍼티가 꼭 val일 필요는 없음, var사용 가능. <strong>but</strong> 읽기 전용으로 만들어서 데이터 클래스를 불변으로 만들라 권장한다. 불변 객체를 사용하게 된다면 스레드가 사용 중인 데이터를 다른 스레드가 변경할수 없으므로 스레드를 동기화해야할 필요가 줄어든다.</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;해당 블로그는 &lt;a href=&quot;http://acornpub.co.kr/book/kotlin-in-action&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Kotlin In Actio
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin QueryDsl 4장 (join)</title>
    <link href="https://beanbroker.github.io/2019/04/07/Kotlin/kotlin_queryDsl4/"/>
    <id>https://beanbroker.github.io/2019/04/07/Kotlin/kotlin_queryDsl4/</id>
    <published>2019-04-07T10:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kotlin-QueryDsl-4장-join"><a href="#Kotlin-QueryDsl-4장-join" class="headerlink" title="Kotlin QueryDsl 4장 join"></a>Kotlin QueryDsl 4장 join</h2><p><a href="https://github.com/requery/requery" rel="external nofollow noopener noreferrer" target="_blank">github 주소</a></p><p>너무나도 늦게…. 조인을…..하… 할거 많은데</p><h2 id="샘플"><a href="#샘플" class="headerlink" title="샘플"></a>샘플</h2><p>서비스를 운영중인 사이트에서 이메일을 받기를 동의한 사람들의 리스트가 필요하다 가장하고 진행해보자</p><p>일단 QueryDsl은 명시적으로 database에 연관관계를 맺지 않고 Entity class에서도 맺지 않아도 쉽게 조인이 가능(어떤 버젼 부터인지는 모름) 하다</p><blockquote><p>Tabel 생성</p></blockquote><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`seq`</span> <span class="built_in">int</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_Id`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8 <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`gender`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`created_by`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updated_at`</span> datetime <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`updated_by`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`seq`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">107</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_terms`</span> (</span><br><span class="line">  <span class="string">`seq`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`user_Id`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`first_term`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`second_term`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`created_by`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updated_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`updated_by`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`seq`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">23</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci</span><br></pre></td></tr></table></figure><p>users의 user_id, user_terms의 user_id의 관계를 엮을 예정이다. 물론 제대로 database를 구성하려면 인덱스 설정과 저렇게 막 db를 짜면안되는 것은… 그냥 테스트이니 작동을 중요시!!</p><blockquote><p>UserRepository 코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">override fun <span class="title">getUserEmailList</span><span class="params">()</span>: MutableList&lt;String&gt;? </span>&#123;</span><br><span class="line">    val table = QUserEntity.userEntity</span><br><span class="line">    val termTable = QUserTermEntity.userTermEntity</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> from(table)</span><br><span class="line">        .select(table.email)</span><br><span class="line">        .innerJoin(termTable).on(termTable.userId.eq(table.userId)</span><br><span class="line">        , termTable.firstTerm.eq(<span class="string">'Y'</span>))</span><br><span class="line">        .fetch()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 코드는 아래와 같이 작동한다</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hibernate: <span class="keyword">select</span> userentity0_.email <span class="keyword">as</span> col_0_0_ <span class="keyword">from</span> <span class="keyword">users</span> userentity0_ <span class="keyword">inner</span> <span class="keyword">join</span> user_terms usertermen1_ <span class="keyword">on</span> (usertermen1_.user_id=userentity0_.user_id <span class="keyword">and</span> usertermen1_.first_term=?)</span><br></pre></td></tr></table></figure><p>짠 실행하면 이메일 리스트가 나온다. </p><p>left join, inner join등을 지원한다! 너무나도 쉬우니.. 예제는 패스…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kotlin-QueryDsl-4장-join&quot;&gt;&lt;a href=&quot;#Kotlin-QueryDsl-4장-join&quot; class=&quot;headerlink&quot; title=&quot;Kotlin QueryDsl 4장 join&quot;&gt;&lt;/a&gt;Kotlin QueryDsl 4
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
      <category term="QueryDsl" scheme="https://beanbroker.github.io/categories/Kotlin/QueryDsl/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="QueryDsl" scheme="https://beanbroker.github.io/tags/QueryDsl/"/>
    
  </entry>
  
  <entry>
    <title>코틀린, 컬렉션 활용기</title>
    <link href="https://beanbroker.github.io/2019/03/17/Kotlin/kotlin_collection1/"/>
    <id>https://beanbroker.github.io/2019/03/17/Kotlin/kotlin_collection1/</id>
    <published>2019-03-17T12:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="코틀린-컬렉션-활용기"><a href="#코틀린-컬렉션-활용기" class="headerlink" title="코틀린 컬렉션 활용기"></a>코틀린 컬렉션 활용기</h1><p>데이터 셋을 만들어보자</p><blockquote><p>유저 클래스</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">data class <span class="title">User</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">var</span> name : String = <span class="string">""</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">    <span class="keyword">var</span> age : Int = <span class="number">0</span></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">    <span class="function">override fun <span class="title">toString</span><span class="params">()</span>: String </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"User(name='$name', age=$age)"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>샘플 데이터 생성</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val users = listOf&lt;User&gt;(</span><br><span class="line"></span><br><span class="line">        User(<span class="string">"pkj"</span>, <span class="number">30</span>),</span><br><span class="line">        User(<span class="string">"beanbroker"</span>, <span class="number">40</span>),</span><br><span class="line">        User(<span class="string">"A"</span>, <span class="number">32</span>),</span><br><span class="line">        User(<span class="string">"B"</span>, <span class="number">27</span>),</span><br><span class="line">        User(<span class="string">"C"</span>, <span class="number">44</span>),</span><br><span class="line">        User(<span class="string">"D"</span>, <span class="number">30</span>)</span><br><span class="line"></span><br><span class="line">    )</span><br></pre></td></tr></table></figure><h2 id="1-filter"><a href="#1-filter" class="headerlink" title="1. filter"></a>1. filter</h2><p>우리가 원하는 조건값에 맞는 리스트를 리턴한다</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns a list containing only elements matching the given [predicate].</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> inline fun &lt;T&gt; Iterable&lt;T&gt;.filter(predicate: (T) -&gt; Boolean): List&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> filterTo(ArrayList&lt;T&gt;(), predicate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>샘플코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">    val listOfOverThirtyFive = users.filter &#123; it.age &gt; <span class="number">35</span> &#125;</span><br><span class="line">    println(listOfOverThirtyFive.toString())</span><br><span class="line"></span><br><span class="line">결과 : [User(name=beanbroker, age=<span class="number">40</span>), User(name=C, age=<span class="number">44</span>)]</span><br></pre></td></tr></table></figure><h2 id="2-all"><a href="#2-all" class="headerlink" title="2. all"></a>2. all</h2><p>모든 데이터가 주어진 조건이 맞는지 안하는지 return true or fale</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns `true` if all elements match the given [predicate].</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@sample</span> samples.collections.Collections.Aggregates.all</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> inline fun &lt;T&gt; Iterable&lt;T&gt;.all(predicate: (T) -&gt; Boolean): Boolean &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> is Collection &amp;&amp; isEmpty()) <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">for</span> (element in <span class="keyword">this</span>) <span class="keyword">if</span> (!predicate(element)) <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>샘플코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">val isOlderThan50 = users.all &#123; it.age &gt; <span class="number">50</span> &#125;</span><br><span class="line"></span><br><span class="line">println(isOlderThan50)</span><br><span class="line"></span><br><span class="line">val isYoungerThan50 = users.all &#123; it.age &lt;<span class="number">50</span> &#125;</span><br><span class="line">println(isYoungerThan50)</span><br><span class="line"></span><br><span class="line">결과</span><br><span class="line">isOlderThan50 : <span class="keyword">false</span></span><br><span class="line">isYoungerThan50 : <span class="keyword">true</span></span><br></pre></td></tr></table></figure><p>만약 users.all { it.age &lt;40 } 이면 false를 리턴 모든 조건을 충족해야하기 때문에</p><h2 id="3-any"><a href="#3-any" class="headerlink" title="3. any"></a>3. any</h2><p>하나의 데이터라도 주어진 조건에 맞는다면 true를 리턴</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns `true` if at least one element matches the given [predicate].</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@sample</span> samples.collections.Collections.Aggregates.anyWithPredicate</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> inline fun &lt;T&gt; Iterable&lt;T&gt;.any(predicate: (T) -&gt; Boolean): Boolean &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> is Collection &amp;&amp; isEmpty()) <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">    <span class="keyword">for</span> (element in <span class="keyword">this</span>) <span class="keyword">if</span> (predicate(element)) <span class="keyword">return</span> <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>샘플코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> val isAnyOneOlderThan50 = users.any &#123; it.age &gt; <span class="number">50</span> &#125;</span><br><span class="line"></span><br><span class="line">println(isAnyOneOlderThan50)</span><br><span class="line"></span><br><span class="line">val isAnyOnYoungerThan50 = users.any &#123; it.age &lt;<span class="number">40</span> &#125;</span><br><span class="line">println(isAnyOnYoungerThan50)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">결과</span><br><span class="line">isAnyOneOlderThan50 : <span class="keyword">false</span></span><br><span class="line">isAnyOnYoungerThan50 : <span class="keyword">true</span></span><br></pre></td></tr></table></figure><h2 id="4-count"><a href="#4-count" class="headerlink" title="4. count"></a>4. count</h2><p>설명이 불필요…</p><blockquote><p>샘플코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">val countWhoIsYoungerThan35 = users.count&#123;it.age &lt; <span class="number">35</span>&#125;</span><br><span class="line">println(countWhoIsYoungerThan35)</span><br><span class="line"></span><br><span class="line">결과 : <span class="number">4</span></span><br></pre></td></tr></table></figure><h2 id="5-find-findLast"><a href="#5-find-findLast" class="headerlink" title="5. find, findLast"></a>5. find, findLast</h2><p>조건에 맞는 첫번째 데이터 반환, 만약 조건에 맞는 엘리먼트가 없다면 null리턴</p><p>만약 맨 뒤에 엘리먼트릴 return받고 싶다면 findLast를 쓰자!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Returns the first element matching the given [predicate], or `null` if no such element was found.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@kotlin</span>.internal.InlineOnly</span><br><span class="line"><span class="keyword">public</span> inline fun &lt;T&gt; Iterable&lt;T&gt;.find(predicate: (T) -&gt; Boolean): T? &#123;</span><br><span class="line">    <span class="keyword">return</span> firstOrNull(predicate)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>샘플코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> val someoneWhoseAgeis32 = users.find &#123; it.age == <span class="number">32</span> &#125;</span><br><span class="line"></span><br><span class="line">println(someoneWhoseAgeis32.toString())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">val someoneWhoseAgeis26 = users.find &#123; it.age == <span class="number">26</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">println(someoneWhoseAgeis26.toString())</span><br><span class="line"></span><br><span class="line">결과</span><br><span class="line">someoneWhoseAgeis32 : User(name=<span class="string">'A'</span>, age=<span class="number">32</span>)</span><br><span class="line">someoneWhoseAgeis26 : <span class="keyword">null</span></span><br></pre></td></tr></table></figure><h2 id="6-groupBy"><a href="#6-groupBy" class="headerlink" title="6. groupBy"></a>6. groupBy</h2><p>자세한 설명은 생략! 말그대로 그룹바이</p><blockquote><p>샘플코드</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">val userGroup = users.groupBy &#123; it.age &#125;.toList()</span><br><span class="line"></span><br><span class="line">println(userGroup.toString())</span><br><span class="line"></span><br><span class="line">결과 : </span><br><span class="line">[(<span class="number">30</span>, [User(name=<span class="string">'pkj'</span>, age=<span class="number">30</span>), User(name=<span class="string">'D'</span>, age=<span class="number">30</span>)]), </span><br><span class="line">(<span class="number">40</span>, [User(name=<span class="string">'beanbroker'</span>, age=<span class="number">40</span>)]), (<span class="number">32</span>, [User(name=<span class="string">'A'</span>, age=<span class="number">32</span>)]), </span><br><span class="line">(<span class="number">27</span>, [User(name=<span class="string">'B'</span>, age=<span class="number">27</span>)]), </span><br><span class="line">(<span class="number">44</span>, [User(name=<span class="string">'C'</span>, age=<span class="number">44</span>)])]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;코틀린-컬렉션-활용기&quot;&gt;&lt;a href=&quot;#코틀린-컬렉션-활용기&quot; class=&quot;headerlink&quot; title=&quot;코틀린 컬렉션 활용기&quot;&gt;&lt;/a&gt;코틀린 컬렉션 활용기&lt;/h1&gt;&lt;p&gt;데이터 셋을 만들어보자&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;유
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>제네릭 2장, Effective Java</title>
    <link href="https://beanbroker.github.io/2019/03/17/Java/generic2/"/>
    <id>https://beanbroker.github.io/2019/03/17/Java/generic2/</id>
    <published>2019-03-17T09:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="제네릭-2장"><a href="#제네릭-2장" class="headerlink" title="제네릭 2장"></a>제네릭 2장</h2><ol start="4"><li>이왕이면 제네릭 타입으로 만들라</li><li>이왕이면 제네릭 메서드로 만들라</li><li>한정적 와일드 카드를 사용해 API 유연성을 높여라</li></ol><h2 id="4-이왕이면-제네릭-타입으로-만들라"><a href="#4-이왕이면-제네릭-타입으로-만들라" class="headerlink" title="4. 이왕이면 제네릭 타입으로 만들라"></a>4. 이왕이면 제네릭 타입으로 만들라</h2><p>Object기반 스텍을 제네릭 스택으로 바꾸어보자</p><blockquote><p>Onject Stack</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.EmptyStackException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStack</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object[] elements; <span class="comment">// =&gt; E[] elements;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestStack</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        elements = <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Object e)</span></span>&#123;</span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line">        </span><br><span class="line">        Object result = elements[--size];</span><br><span class="line">        elements[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(elements.length == size)</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>–&gt; 변환 to 제네릭 기반 스텍</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.EmptyStackException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStackVersionUp</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> E[] elements; <span class="comment">// =&gt; E[] elements;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="comment">// </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestStackVersionUp</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        elements = (E[]) <span class="keyword">new</span> Object[DEFAULT_INITIAL_CAPACITY];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span></span>&#123; <span class="comment">//변경</span></span><br><span class="line">        ensureCapacity();</span><br><span class="line">        elements[size++] = e;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span></span>&#123;  <span class="comment">// 변경</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(size == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> EmptyStackException();</span><br><span class="line"></span><br><span class="line">        E result = elements[--size];  <span class="comment">// 변경</span></span><br><span class="line">        elements[size] = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> size == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(elements.length == size)</span><br><span class="line">            elements = Arrays.copyOf(elements, <span class="number">2</span> * size + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>대다수의 제네릭 타입은 타입 매개변수에 아무런 제약을 두지 않는다. TestStackVersionUp<object>, TestStackVersionUp&lt;List<string>&gt; 등 어떤 참조 타입으로도 TestStackVersionUp을 만들수 있다. 단 기본 타입은 사용할수 없다.</string></object></p><blockquote><p>이펙티브자바 3판 5장 제네릭 참고! (잊지 않기 위해 블로그에 올립니다)</p></blockquote><h2 id="5-이왕이면-제네릭-메서드로-만들라"><a href="#5-이왕이면-제네릭-메서드로-만들라" class="headerlink" title="5. 이왕이면 제네릭 메서드로 만들라"></a>5. 이왕이면 제네릭 메서드로 만들라</h2><p>클래스와 마찬가지로, 메서드 또한 제네릭으로 만들 수 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> gege;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; groupOne = Arrays.asList(<span class="string">"가"</span>, <span class="string">"나"</span>, <span class="string">"다"</span>);</span><br><span class="line">        List&lt;String&gt; groupTwo = Arrays.asList(<span class="string">"A"</span>, <span class="string">"B"</span>, <span class="string">"C"</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; unionGroups = unionGroup(groupOne, groupTwo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(unionGroups.toString());</span><br><span class="line"></span><br><span class="line">        System.out.println(unionGroupVersionUp(groupOne,groupTwo).toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//제네릭 미적용</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">unionGroup</span><span class="params">(List&lt;String&gt; groupOne, List&lt;String&gt; groupTwo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; unions = <span class="keyword">new</span> ArrayList&lt;&gt;(groupOne);</span><br><span class="line"></span><br><span class="line">        unions.addAll(groupTwo);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> unions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//제네릭 적용</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">unionGroupVersionUp</span><span class="params">(List&lt;E&gt; groupOne, List&lt;E&gt; groupTwo)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;E&gt; unions = <span class="keyword">new</span> ArrayList&lt;&gt;(groupOne);</span><br><span class="line"></span><br><span class="line">        unions.addAll(groupTwo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> unions;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>unionGroup 메서드는 2개의 매개변수, 반환되는 타입 한개의 타입이 모두 같아야 한다!. 때때로는 불변 객체를 여러 타입으로 활용할수 있게 만들어야 한다. <strong>제네릭은 런타임에 타입 정보가 소거</strong> 되므로 하나의 객체를 어떤 타입으로든 매개변수화할수 있다.</p><p>그렇다면 방법은? 요청한 타입 매개 변수에 맞게 매번 그 객체의 타입을 바꿔주는 정적 팩토리를 만들어야 한다. 이를 제네릭 싱글턴 factory라 한다.<br>Collections.reverseOrder, Collections.emptySet이 좋은 예제이다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>) <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">Comparator&lt;T&gt; <span class="title">reverseOrder</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> (Comparator&lt;T&gt;) ReverseComparator.REVERSE_ORDER; &#125;</span><br></pre></td></tr></table></figure><h2 id="6-한정적-와일드-카드를-사용해-API-유연성을-높여라"><a href="#6-한정적-와일드-카드를-사용해-API-유연성을-높여라" class="headerlink" title="6. 한정적 와일드 카드를 사용해 API 유연성을 높여라"></a>6. 한정적 와일드 카드를 사용해 API 유연성을 높여라</h2><p>유연성을 극대화하려면 원소의 생산자나 소비자용 입력 매개변수에 와일드카드 타입을 사용하라. 한편 입력 매개변수가 <strong>생산자와 소비자 역할을 동시에 한다면</strong>  와일드카드 타입을 써도 좋을게 없다.</p><p>매개변수화 타입 T가 생산자라면 &lt;? extends T&gt;를 사용하고 소비자라면 &lt;? super T&gt; 를 사용하라.</p><p>솔찍히 이해가 안간다.. 머리가 아프다.. 나는 개발자가 맞는것인가…… 여기서 ..제네릭은 멈추고… 나중에 다시 읽자……</p><blockquote><p>이펙티브자바 3판 5장 제네릭 참고! (잊지 않기 위해 블로그에 올립니다)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;제네릭-2장&quot;&gt;&lt;a href=&quot;#제네릭-2장&quot; class=&quot;headerlink&quot; title=&quot;제네릭 2장&quot;&gt;&lt;/a&gt;제네릭 2장&lt;/h2&gt;&lt;ol start=&quot;4&quot;&gt;
&lt;li&gt;이왕이면 제네릭 타입으로 만들라&lt;/li&gt;
&lt;li&gt;이왕이면 제네릭 메서
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="generic" scheme="https://beanbroker.github.io/categories/Java/generic/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="generic" scheme="https://beanbroker.github.io/tags/generic/"/>
    
  </entry>
  
  <entry>
    <title>제네릭 1장, Effective Java</title>
    <link href="https://beanbroker.github.io/2019/03/17/Java/generic1/"/>
    <id>https://beanbroker.github.io/2019/03/17/Java/generic1/</id>
    <published>2019-03-17T07:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="제네릭-1장"><a href="#제네릭-1장" class="headerlink" title="제네릭 1장"></a>제네릭 1장</h2><ol><li>raw type을 사용하지 말라!</li><li>비검사 경고를 제거하라</li><li>배열보다는 리스트를 사용하라</li></ol><h2 id="1-raw-type을-사용하지-말라"><a href="#1-raw-type을-사용하지-말라" class="headerlink" title="1. raw type을 사용하지 말라!"></a>1. raw type을 사용하지 말라!</h2><p>raw type 이란?<br>클래스와 인터페이스 선언에 타입 매개변수(ex. <e>)가 있으면 각각 제네릭 클래스, 제네릭 인터페이스라고 부른다. 이것을 제네릭 타입이라고 한다. (ex. List<e>) 제네릭 타입을 정의하면 raw type도 정의되는데, 여기서 List<e>의 raw type이란 List 이다. 즉, <strong>타입 매개변수를 전혀 쓰지 않은 경우</strong> 를 말한다. </e></e></e></p><p>raw타입을 쓰면 제네릭이 안겨주는 안정성과 표현력을 모두 잃게 된다. 그럼 왜 존재하는가? 자바가 제네릭을 받아들이기 까지 10년이 걸렸다……. 그전에 짜놓은 레거시 코드들이 제네릭 없이 짠 코드가 너무너무너무나도 많기에 <strong>“호환성”</strong> 을 위해………….</p><h4 id="핵심정리"><a href="#핵심정리" class="headerlink" title="핵심정리"></a>핵심정리</h4><p>raw 타입을 사용하면 런타임에 예외가 일어날 수 있으니 사용하면 안된다. 제네릭이 도입되기 이전 코드와의 호환성을 위해 제공될뿐!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Set&lt;Object&gt; 는 어떤 타입의 객체도 저장할수 있는 매개변수화 티입이고,</span><br><span class="line"></span><br><span class="line">Set&lt;?&gt; 는 모종의 타입 객체만 저장할수 있는 와일드카드 타입이다.</span><br><span class="line"></span><br><span class="line">위의 Set&lt;Object&gt;, Set&lt;?&gt;는 안전하지만, raw 타입인 Set은 안전하지 않다.</span><br></pre></td></tr></table></figure><h2 id="2-비검사-경고를-제거하라"><a href="#2-비검사-경고를-제거하라" class="headerlink" title="2. 비검사 경고를 제거하라"></a>2. 비검사 경고를 제거하라</h2><p>할수 있는 한 모든 비검사 경고를 제거하라! 모두 제거하게 된다면 그 코드는 타입 안정성이 보장된다.<br>만약 타입 안정성이 확실한데 컴파일러의 경고를 없애고 싶다면 @SuppressWarnings(“unchecked”)를 사용하자. </p><h2 id="3-배열보다는-리스트를-사용하라"><a href="#3-배열보다는-리스트를-사용하라" class="headerlink" title="3. 배열보다는 리스트를 사용하라"></a>3. 배열보다는 리스트를 사용하라</h2><p>뱌열과 제네릭 타입에는 중요한 차이 2가지가 있다.</p><ol><li><p>배열은 공변이다. Sub가 Super의 하위타입이라면 배열 Sub[]은 배열 Super[]의 하위 타입이 된다.(공변이란? 즉 함께 변한다는 뜻이다.)</p></li><li><p>제네릭은 불공변이다. 즉 서로 다른 타입 타입A, 타입B가 있을 때 List&lt;타입A&gt;는 List&lt;타입B&gt;의 하위 타입도 아니고 상위 타입도 아니다. </p></li></ol><blockquote><p>런타입 에러</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Object[] objectArray = <span class="keyword">new</span> Long[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">        objectArray[<span class="number">0</span>] = <span class="string">"타입이 다를걸?"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">아래의 에러 발생</span><br><span class="line">Exception in thread <span class="string">"main"</span> java.lang.ArrayStoreException: java.lang.String</span><br><span class="line">at gege.Main.main(Main.java:<span class="number">10</span>)</span><br></pre></td></tr></table></figure><blockquote><p>컴파일 에러(컴파일이 되지 않음)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Object&gt; ol = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>왜 배열보단 리스트?! 리스트를 써야 할가? 개발자들이 개발코드를 쭉 이어나갈때 예측하지 못한 에러는 런타임시 알게 된다면 개발자에게는 해당 부분을 수정하는데 또한 시간을 오래 부어야한다. 요즘 개발을.. vi를 열어 편집하는 일은 거의 없다고 생각한다. ide에서 자체적으로 컴파일 안될꺼라 알려준다! </p><blockquote><p>제네릭 배열을 만들지 못한 이유를 생각해보자</p></blockquote><ol><li>너무나도 당연하게 타입 safe하지 않기 때문이다. 컴파일러가 자동 생성한 형변환 코드에서 런타입에 ClassCastException이 발생 할수 있다. 런타임에 해당 에러 발생을 막아주겠다는 제네릭 타입 시슨템의 취지에 어긋난다.</li></ol><p>결론</p><ol><li>배열은 공변, 실체화되는 반면</li><li>제네릭은 불공변이고 타입 정보가 소거된다.</li><li>배열은 런타입에는 타입 안전하지만 컴파일타임에는 그렇지 않다. 제네릭은 그반대이다.</li></ol><blockquote><p>이펙티브자바 3판 5장 제네릭 참고! (잊지 않기 위해 블로그에 올립니다)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;제네릭-1장&quot;&gt;&lt;a href=&quot;#제네릭-1장&quot; class=&quot;headerlink&quot; title=&quot;제네릭 1장&quot;&gt;&lt;/a&gt;제네릭 1장&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;raw type을 사용하지 말라!&lt;/li&gt;
&lt;li&gt;비검사 경고를 제거하라&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="generic" scheme="https://beanbroker.github.io/categories/Java/generic/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="generic" scheme="https://beanbroker.github.io/tags/generic/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin, Querydsl 3장 (Predicate)</title>
    <link href="https://beanbroker.github.io/2019/03/09/Kotlin/kotlin_queryDsl3/"/>
    <id>https://beanbroker.github.io/2019/03/09/Kotlin/kotlin_queryDsl3/</id>
    <published>2019-03-09T13:40:00.000Z</published>
    <updated>2019-07-07T08:12:45.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kotlin-Querydsl-3장-Predicate"><a href="#Kotlin-Querydsl-3장-Predicate" class="headerlink" title="Kotlin, Querydsl 3장 (Predicate)"></a>Kotlin, Querydsl 3장 (Predicate)</h2><p>3장에서 조인을 시작해야햇지만,….. 게으른 탓에 까먹고 있었던것은 함정! 4장에..이어서 할게요…</p><p>쿼리 조건을 지정하는 predicate 객체를 사용해보자!</p><p>서비스를 개발 또는 어떠한 개발을 진행하다보면 동적쿼리가 필요할수 밖에 없다.</p><p>client에서 다양한 다이나믹한 조건을 감당할수 있는 방법은 여러가지가 있지만!</p><p>요구사항마다 function을 만들다보면… 쓸데없이.. 비슷한 기능을 담당하는 코드들이 너무 커지는게 아닐가… 라는 생각을 하며 이번장을 시작한다</p><p>[소스 참고] : <a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/beanbroker/kotlin_querydsl</a></p><h2 id="샘플소스-작성"><a href="#샘플소스-작성" class="headerlink" title="샘플소스 작성"></a>샘플소스 작성</h2><p>약관동의를 했는지 안했는지 관련한 디비를 만들어서! 테스트를 진행해보장</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user_terms`</span> (</span><br><span class="line">  <span class="string">`seq`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`first_term`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`second_term`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'N'</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`created_by`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updated_at`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`updated_by`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">COLLATE</span> utf8_unicode_ci <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`seq`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 <span class="keyword">COLLATE</span>=utf8_unicode_ci</span><br></pre></td></tr></table></figure><blockquote><p>UserTermEntity</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"user_terms"</span>)</span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">UserTermEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"seq"</span>)</span><br><span class="line">    <span class="keyword">var</span> seq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"first_term"</span>)</span><br><span class="line">    <span class="keyword">var</span> firstTerm : Char = <span class="string">'N'</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"second_term"</span>)</span><br><span class="line">    <span class="keyword">var</span> secondTerm : Char = <span class="string">'N'</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_at"</span> , nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>,  columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_at"</span>, columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> updatedAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> updateBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserTermRepository</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserTermRepositoryCustom</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">getByPredicator</span><span class="params">(predicate: Predicate)</span>: UserTermEntity?</span></span><br><span class="line"><span class="function">    fun <span class="title">findAllByPredicator</span><span class="params">(predicate: Predicate)</span>: List&lt;UserTermEntity&gt;?</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">interface UserTermRepository : JpaRepository&lt;UserTermEntity, Int&gt;, UserTermRepositoryCustom</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class UserTermRepositoryImpl :</span></span><br><span class="line"><span class="function">    <span class="title">QuerydslRepositorySupport</span><span class="params">(UserTermEntity::class.java)</span>,UserTermRepositoryCustom</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">getByPredicator</span><span class="params">(predicate: Predicate)</span>: UserTermEntity? </span>&#123;</span><br><span class="line"></span><br><span class="line">        val table = QUserTermEntity.userTermEntity</span><br><span class="line">        <span class="keyword">return</span> from(table)</span><br><span class="line">            .where(predicate)</span><br><span class="line">            .fetchOne()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">findAllByPredicator</span><span class="params">(predicate: Predicate)</span>: List&lt;UserTermEntity&gt;? </span>&#123;</span><br><span class="line"></span><br><span class="line">        val table = QUserTermEntity.userTermEntity</span><br><span class="line">        <span class="keyword">return</span> from(table)</span><br><span class="line">            .where(predicate)</span><br><span class="line">            .fetch()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UserTermPredicator</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTermPredicator</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    companion object &#123;</span><br><span class="line">        <span class="keyword">private</span> val table = QUserTermEntity.userTermEntity</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">const</span> val SEPARATOR = <span class="string">","</span></span><br><span class="line">        <span class="keyword">private</span> val AGREEMENT_YN = charArrayOf(<span class="string">'Y'</span>, <span class="string">'N'</span>, <span class="string">'R'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> builder = BooleanBuilder()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">seq</span><span class="params">(seq: Int?)</span>: UserTermPredicator </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (seq != <span class="keyword">null</span> &amp;&amp; seq &gt; <span class="number">0</span>)</span><br><span class="line">            builder.and(table.seq.eq(seq))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">firstTerm</span><span class="params">(firstTerm: String?)</span>: UserTermPredicator </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (firstTerm.isNullOrEmpty()) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">if</span> (firstTerm.contains(SEPARATOR)) &#123;</span><br><span class="line">            val condition = firstTerm.split(SEPARATOR)</span><br><span class="line">                .filter &#123; v -&gt; v.isNotEmpty() &amp;&amp; firstTerm.contains(v.single()) &#125;</span><br><span class="line">                .map &#123; v -&gt; v.single() &#125;</span><br><span class="line">            <span class="keyword">if</span> (condition.isEmpty()) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">            builder.and(table.firstTerm.`in`(condition))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (AGREEMENT_YN.contains(firstTerm.first())) builder.and(table.firstTerm.eq(firstTerm.first()))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">secondTerm</span><span class="params">(secondTerm: String?)</span>: UserTermPredicator </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (secondTerm.isNullOrEmpty()) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">        <span class="keyword">if</span> (secondTerm.contains(SEPARATOR)) &#123;</span><br><span class="line">            val condition = secondTerm.split(SEPARATOR)</span><br><span class="line">                .filter &#123; v -&gt; v.isNotEmpty() &amp;&amp; secondTerm.contains(v.single()) &#125;</span><br><span class="line">                .map &#123; v -&gt; v.single() &#125;</span><br><span class="line">            <span class="keyword">if</span> (condition.isEmpty()) <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">            builder.and(table.firstTerm.`in`(condition))</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (AGREEMENT_YN.contains(secondTerm.first())) builder.and(table.secondTerm.eq(secondTerm.first()))</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">value</span><span class="params">()</span> </span>= builder.value!!</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 작성한 후!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">fun <span class="title">getByPredicator</span><span class="params">(predicate: Predicate)</span>: UserTermEntity?</span></span><br></pre></td></tr></table></figure><p>를 주목하자</p><p>Predicate 관련 내용 : <a href="http://www.querydsl.com/static/querydsl/3.7.2/reference/ko-KR/html/ch03.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.querydsl.com/static/querydsl/3.7.2/reference/ko-KR/html/ch03.html</a></p><p>공식 사이트를 참고하자!</p><blockquote><p> BooleanBuilder()</p></blockquote><p>복합 불리언 표현식을 작성하려면 com.mysema.query.BooleanBuilder 클래스를 사용한다. 이 클래스는 Predicate을 구현하고 있고 메서드 체인 형식으로 사용할 수 있다</p><p>서비스 코드를 짜야한다!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserTermService</span> (</span></span><br><span class="line"><span class="class"></span></span><br><span class="line">    private val userTermRepository: UserTermRepository</span><br><span class="line">)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">save</span><span class="params">(seq:Int, firstTerm: Char, secondTerm: Char)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        userTermRepository.save(</span><br><span class="line">            UserTermEntity().apply &#123;</span><br><span class="line">                <span class="keyword">this</span>.seq = seq</span><br><span class="line">                <span class="keyword">this</span>.firstTerm = firstTerm</span><br><span class="line">                <span class="keyword">this</span>.secondTerm = secondTerm</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">getUserTermByPredicator</span><span class="params">(seq : Int, firstTerm : String, secondTerm : String)</span>: UserTermEntity? </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userTermRepository.getByPredicator( setUserTermPredicator(</span><br><span class="line">            seq = seq,</span><br><span class="line">            firstTerm = firstTerm,</span><br><span class="line">            secondTerm = secondTerm)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> fun <span class="title">setUserTermPredicator</span><span class="params">(seq: Int, firstTerm: String, secondTerm: String)</span></span></span><br><span class="line"><span class="function">     : Predicate</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> UserTermPredicator()</span><br><span class="line">            .seq(seq)</span><br><span class="line">            .firstTerm(firstTerm)</span><br><span class="line">            .secondTerm(secondTerm)</span><br><span class="line">            .value()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>프리디케이터를 직접 셋팅하여 원하는 조건에 맞는 데이터를 찾게된다.</p><p>쭈욱 보면 너무나도 당연하게 빌더패턴임을 즉각적으로 알수있다. 매우 많은곳에서 신경쓰지 않는 부분에서 빌더패턴이 적용되어있음을 주의깊게 보게될경우! 찾을수 있다.(유용유용)</p><h2 id="실제-테스트를-진행해보자"><a href="#실제-테스트를-진행해보자" class="headerlink" title="실제 테스트를 진행해보자"></a>실제 테스트를 진행해보자</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function">fun <span class="title">termTest1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> test = userTermService.getUserTermByPredicator(</span><br><span class="line">seq = <span class="number">1</span>,</span><br><span class="line">firstTerm = <span class="string">"N"</span>,</span><br><span class="line">secondTerm = <span class="string">"Y"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        assertNotNull(<span class="string">"데이터가 있는지?"</span>, test)</span><br><span class="line">        assertEquals(<span class="string">"첫번째 약관이 맞는지?"</span>, <span class="string">'N'</span>, test!!.firstTerm)</span><br><span class="line">        assertEquals(<span class="string">"두번째 약관이 맞는지?"</span>, <span class="string">'Y'</span>, test.secondTerm)</span><br><span class="line">        println(test.toString())</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="결론"><a href="#결론" class="headerlink" title="결론"></a>결론</h2><p>아 이얼마나 아름다운 동적쿼리를 수행할수 있는가! 통계에서도 많이 쓰일수 있을뿐더러! 조건에 맞게 빌더에서 설정하게 한다면! 간단해진다!</p><p>만약 db에 필드가 더 생길 경우 쉽고 빠르게 대응 할수 있다 생각되어진다! </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kotlin-Querydsl-3장-Predicate&quot;&gt;&lt;a href=&quot;#Kotlin-Querydsl-3장-Predicate&quot; class=&quot;headerlink&quot; title=&quot;Kotlin, Querydsl 3장 (Predicate)&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/categories/Kotlin/Querydsl/"/>
    
      <category term="Predicate" scheme="https://beanbroker.github.io/categories/Kotlin/Querydsl/Predicate/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/tags/Querydsl/"/>
    
      <category term="Predicate" scheme="https://beanbroker.github.io/tags/Predicate/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin, Querydsl 2장 (JPA Auditing)</title>
    <link href="https://beanbroker.github.io/2019/02/13/Kotlin/kotlin_queryDsl2/"/>
    <id>https://beanbroker.github.io/2019/02/13/Kotlin/kotlin_queryDsl2/</id>
    <published>2019-02-13T08:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kotlin-Querydsl-2장-JPA-Auditing"><a href="#Kotlin-Querydsl-2장-JPA-Auditing" class="headerlink" title="Kotlin, Querydsl 2장 (JPA Auditing)"></a>Kotlin, Querydsl 2장 (JPA Auditing)</h2><p>Audit의 사전적 의미 감사(고마움을..표시하는 그런뜻이..아닌…)</p><p>1장에서 유저 Entity에 @CreatedBy, @LastModifiedBy를 이어서 카즈아!!</p><p>말그대로 누구에 의해 만들어졌는지, 누구에 의해 수정되었는지를 뜻한다. </p><ul><li>Declares a field as the one representing the principal that created the entity containing the field.</li><li>Declares a field as the one representing the date the entity containing the field was recently modified.</li></ul><p>어떻게 사용하면 좋을가?</p><p>예를들어 하나의 DB를 바라보며 서비스 어플리케이션, 배치 어플리케이션, 관리용 어플리케이션이 떠 있을 경우 DB의 변경을 어디서 했는지 로그를 보지 않고서는 알수가 없다.(물론 디비로그 설정이나 다른 방법으로도 풀수 있다! aws에서 버튼 몇번 누르면 되는 충격적인…)</p><p>만약 Audit을 사용하게 된다면 어디서 만들어졌는지 어디서 변경되었는지 쉽게 찾을수 있다. 또한 최대한 DB는 DB담당자가 아닌 개발자들이 절대 직접 핸들링하면 안되는 곳이라 생각된다.</p><h3 id="샘플소스"><a href="#샘플소스" class="headerlink" title="샘플소스"></a>샘플소스</h3><blockquote><p>UserEntity </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">UserEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"seq"</span>)</span><br><span class="line">    <span class="keyword">var</span> seq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>)</span><br><span class="line">    <span class="keyword">var</span> gender = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_at"</span> , nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>,  columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_at"</span>, columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> updatedAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> updateBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>AuditConfig </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJpaAuditing</span>(modifyOnCreate = <span class="keyword">false</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AuditConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>BeanbrokerAuditor</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>(<span class="string">"beanbrokerAuditor"</span>)</span><br><span class="line">class BeanbrokerAuditor : AuditorAware&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">getCurrentAuditor</span><span class="params">()</span>: Optional&lt;String&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Optional.of(<span class="string">"SampleServer"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와 같이 설정을 하게되면 생성 또는 수정시 create_by, updated_by에 SampleServer가 들어간다!. 테스트는 생성, 업데이트, 삭제시 동일하게 작동한다. 테스트 코드를 디버깅하면서 db를 확인하게 되면 파악할수 있다!</p><p>3장에서는 조인!!! queryDsl조인을 알아보자</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kotlin-Querydsl-2장-JPA-Auditing&quot;&gt;&lt;a href=&quot;#Kotlin-Querydsl-2장-JPA-Auditing&quot; class=&quot;headerlink&quot; title=&quot;Kotlin, Querydsl 2장 (JPA Audit
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/categories/Kotlin/Querydsl/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/tags/Querydsl/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin, Querydsl 1장</title>
    <link href="https://beanbroker.github.io/2019/02/10/Kotlin/kotlin_queryDsl1/"/>
    <id>https://beanbroker.github.io/2019/02/10/Kotlin/kotlin_queryDsl1/</id>
    <published>2019-02-10T12:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Querydsl-with-Kotlin"><a href="#Querydsl-with-Kotlin" class="headerlink" title="Querydsl with Kotlin"></a>Querydsl with Kotlin</h2><p>코틀린과 Querydsl 샘플 코드가…. 구글에 찾아도 없다.. 누군가는 간절하게 찾는 그런 정보를 남겨보자!</p><p><a href="http://www.querydsl.com/static/querydsl/4.0.1/reference/ko-KR/html_single/" rel="external nofollow noopener noreferrer" target="_blank">Querydsl이란?</a></p><p>공식홈페이지 참고</p><h2 id="샘플코드"><a href="#샘플코드" class="headerlink" title="샘플코드"></a>샘플코드</h2><p><a href="https://github.com/beanbroker/kotlin_querydsl" rel="external nofollow noopener noreferrer" target="_blank">깃헙 샘플 코드 링크</a></p><h2 id="DB-셋팅"><a href="#DB-셋팅" class="headerlink" title="DB 셋팅"></a>DB 셋팅</h2><p>docker에 mysql 컨테이너를 띄워서 진행!</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`users`</span> (</span><br><span class="line">  <span class="string">`seq`</span> <span class="built_in">int</span>(<span class="number">9</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`gender`</span> <span class="built_in">varchar</span>(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`created_at`</span> datetime <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`created_by`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`updated_at`</span> datetime <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  <span class="string">`updated_by`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`seq`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">43</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure><p>createdBy와 updatedBy 컬럼은 Audit을 활용할 예정</p><h2 id="gradle-디펜던시-추가"><a href="#gradle-디펜던시-추가" class="headerlink" title="gradle 디펜던시 추가"></a>gradle 디펜던시 추가</h2><p>중요 부분은 아래와 같다<br><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">idea &#123;</span><br><span class="line"><span class="keyword">module</span> &#123;</span><br><span class="line">def kaptMain = file('build/generated/source/kapt/main')</span><br><span class="line">sourceDirs += kaptMain</span><br><span class="line">generatedSourceDirs += kaptMain</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">compile(<span class="string">"com.querydsl:querydsl-jpa:$&#123;queryDslVersion&#125;"</span>)</span><br><span class="line">kapt(<span class="string">"com.querydsl:querydsl-apt:$&#123;queryDslVersion&#125;:jpa"</span>)</span><br></pre></td></tr></table></figure></p><p>전용 도메인 클래스는 /build/generated/source/kapt/main 디렉토리 이하에 패키지 단위로 자동 생성된다. sourceSets 옵션을 수정하여 생성 위치를 변경할 수 있다.</p><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><p>디비 환경설정 셋팅, yml로 진행해도 무관하다</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">server.port=7070</span></span><br><span class="line"><span class="string">spring.datasource.url=jdbc:mysql://localhost:3306/study</span></span><br><span class="line"><span class="string">spring.datasource.username=root</span></span><br><span class="line"><span class="string">spring.datasource.password=password</span></span><br></pre></td></tr></table></figure><h2 id="entity-패키지"><a href="#entity-패키지" class="headerlink" title="entity 패키지"></a>entity 패키지</h2><p>AuditingEntityListener는 추후설명!!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Entity</span>(name = <span class="string">"users"</span>)</span><br><span class="line"><span class="meta">@EntityListeners</span>(AuditingEntityListener::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">UserEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"seq"</span>)</span><br><span class="line">    <span class="keyword">var</span> seq = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"name"</span>)</span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"age"</span>)</span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"gender"</span>)</span><br><span class="line">    <span class="keyword">var</span> gender = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_at"</span> , nullable = <span class="keyword">false</span>, updatable = <span class="keyword">false</span>,  columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@CreatedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"created_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> createdBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedDate</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_at"</span>, columnDefinition = <span class="string">"DATE"</span>)</span><br><span class="line">    <span class="keyword">var</span> updatedAt  : LocalDateTime = LocalDateTime.now()</span><br><span class="line"></span><br><span class="line">    <span class="meta">@LastModifiedBy</span></span><br><span class="line">    <span class="meta">@Column</span>(name = <span class="string">"updated_by"</span>)</span><br><span class="line">    <span class="keyword">var</span> updateBy = <span class="string">""</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="repository-package"><a href="#repository-package" class="headerlink" title="repository package"></a>repository package</h2><p>get은 왠지 느낌상 하나만 가져오는 느낌? 이라서 단건을 조회시 많이 사용한다..<br>find는 몬지 다찾아줄것 같은 느낌이라…… 개인적인 의견일뿐</p><p>queryDsl이 매력적인 이유는 type safe할뿐더러 쿼리를 치는 느낌의 어플리케이션 코드라 직관적이고 이해하기 쉽다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserRepositoryCustom</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">getBySeq</span><span class="params">(seq : Int)</span>: UserEntity?</span></span><br><span class="line"><span class="function">    fun <span class="title">getByName</span><span class="params">(name : String)</span>: UserEntity?</span></span><br><span class="line"><span class="function">    fun <span class="title">findByGender</span><span class="params">(gender : String)</span>: List&lt;UserEntity&gt;?</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">&#125;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">interface UserRepository : JpaRepository&lt;UserEntity, Int&gt;, UserRepositoryCustom</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">class UserRepositoryImpl :</span></span><br><span class="line"><span class="function">    <span class="title">QuerydslRepositorySupport</span><span class="params">(UserEntity::class.java)</span>,UserRepositoryCustom</span>&#123;</span><br><span class="line">   </span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">getBySeq</span><span class="params">(seq: Int)</span>: UserEntity? </span>&#123;</span><br><span class="line">        val table = QUserEntity.userEntity</span><br><span class="line">        <span class="keyword">return</span> from(table)</span><br><span class="line">            .where(table.seq.eq(seq))</span><br><span class="line">            .fetchOne()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">getByName</span><span class="params">(name : String)</span>: UserEntity? </span>&#123;</span><br><span class="line">        val table = QUserEntity.userEntity</span><br><span class="line">        <span class="keyword">return</span> from(table)</span><br><span class="line">            .where(table.name.eq(name))</span><br><span class="line">            .fetchOne()</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">override fun <span class="title">findByGender</span><span class="params">(gender: String)</span>: List&lt;UserEntity&gt;? </span>&#123;</span><br><span class="line">        val table = QUserEntity.userEntity</span><br><span class="line">        <span class="keyword">return</span> from(table)</span><br><span class="line">            .where(table.gender.eq(gender))</span><br><span class="line">            .fetch()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="service"><a href="#service" class="headerlink" title="service"></a>service</h2><p>유저 create, get 서비스</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserCreateService</span>(</span></span><br><span class="line">    private val userRepository: UserRepository</span><br><span class="line"></span><br><span class="line">)&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">saveUser</span><span class="params">(userEntity: UserEntity)</span></span>&#123;</span><br><span class="line">        userRepository.save(userEntity)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">-------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserGetService</span>(</span></span><br><span class="line">    private val userRepository: UserRepository</span><br><span class="line"></span><br><span class="line">)&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">getUserByOriginJpa</span><span class="params">(seq: Int)</span>: UserEntity </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> userRepository.getOne(seq)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">getUserBySeq</span><span class="params">(seq: Int)</span>: UserEntity? </span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> userRepository.getBySeq(seq)</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">fun <span class="title">getUserByName</span><span class="params">(name : String)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="실제-작성-코드"><a href="#실제-작성-코드" class="headerlink" title="실제 작성 코드"></a>실제 작성 코드</h2><p>물론 rest하게 진행하면 좋겟지만 이글의 목적은 kotling, querydsl, spring 예제일뿐이다~!</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner::<span class="class"><span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">SpringBootTest</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">SampleApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> lateinit <span class="keyword">var</span> userGetService: UserGetService</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> lateinit <span class="keyword">var</span> userCreateService: UserCreateService</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function">fun <span class="title">queryDslTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">userCreateService.saveUser(userEntity = UserEntity().apply &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.name =<span class="string">"박기진"</span></span><br><span class="line"><span class="keyword">this</span>.age = <span class="number">20</span></span><br><span class="line"><span class="keyword">this</span>.gender = <span class="string">"M"</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">val userEntity = userGetService.getUserBySeq(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">val a = <span class="string">"test"</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>박기진, 20살, 남성 저장</li><li>데이터 확인 정상</li><li>일단 처음생성했으니가 당연히 오토인크리먼트되는 seq로 조회</li><li>정상작동확인.</li></ol><p>어플리케이션 프로퍼티 설정에 jpa query show 설정을 해놓으면 더 보기 쉽다!</p><h2 id="주의사항"><a href="#주의사항" class="headerlink" title="주의사항"></a>주의사항</h2><p>만약 api 서버를 만들때 entity와 domain 객체를 별도로!! 꼬옥!! 별도록 생성해서 진행하자 왜냐? “영속성” </p><p>아… 공부할게 너무많은데… 다음에… audit관련…을 2장으로.. 코루틴은… 나중에..</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Querydsl-with-Kotlin&quot;&gt;&lt;a href=&quot;#Querydsl-with-Kotlin&quot; class=&quot;headerlink&quot; title=&quot;Querydsl with Kotlin&quot;&gt;&lt;/a&gt;Querydsl with Kotlin&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/categories/Kotlin/Querydsl/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="Querydsl" scheme="https://beanbroker.github.io/tags/Querydsl/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin coroutines 1장</title>
    <link href="https://beanbroker.github.io/2019/02/02/Kotlin/kotlin_coroutine1/"/>
    <id>https://beanbroker.github.io/2019/02/02/Kotlin/kotlin_coroutine1/</id>
    <published>2019-02-02T13:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="coroutines"><a href="#coroutines" class="headerlink" title="coroutines"></a>coroutines</h2><p>아…. 이글을 쓰긴하지만… 나중에 상당히 많은 수정이 필요하다 생각된다… 코루틴이란? 가벼운 쓰레드? 경량쓰레드?….. 쓰레드도 이해하기 힘든데…. 하.. 나중에 이글을 보며 더 발전하게 되면 잘못 이해한 부분을 정확하게 알게되겠지 하며.. 글을 작성한다.</p><p>꼭한번 읽어보자</p><p>링크: <a href="https://www.slideshare.net/cwdoh/hey-kotlin-how-coroutine-works?ref=https://cdn.embedly.com/widgets/media.html?src=https%3A%2F%2Fwww.slideshare.net%2Fslideshow%2Fembed_code%2Fkey%2FBGtPLJ41qqWrgp&amp;url=https%3A%2F%2Fwww.slideshare.net%2Fcwdoh%2Fhey-kotlin-how-coroutine-works&amp;image=https%3A%2F%2Fcdn.slidesharecdn.com%2Fss_thumbnails%2Fheykotlinhowcoroutineworks-180423005634-thumbnail-4.jpg%3Fcb%3D1524445076&amp;key=a19fcc184b9711e1b4764040d3dc5c07&amp;type=text%2Fhtml&amp;schema=slideshare" rel="external nofollow noopener noreferrer" target="_blank">코틀린은 어껗게 작동하는가? 도창욱님 슬라이드 쉐어</a> </p><p>Talk is cheap, Show me the code! 가 가장 기억에 남는다…..</p><h3 id="코투린이란"><a href="#코투린이란" class="headerlink" title="코투린이란?"></a>코투린이란?</h3><ul><li>기술적으로 중지 가능한 계산의 인스턴스</li><li>일시 중단할수 있는 계산</li><li>특정 스레드에 바인딩되지 않는다</li><li>한 스레드에서 일시 중지하고 다른 스레드에서 재개 할수 있다.</li></ul><p>시작부터 어렵다… 일단 코틀린 버전 1.3으로 셋팅 후 디펜던세를 추가해보자</p><p>dependency링크 : <a href="https://github.com/Kotlin/kotlinx.coroutines" rel="external nofollow noopener noreferrer" target="_blank">클릭</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.delay</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.launch</span><br><span class="line"><span class="keyword">import</span> kotlinx.coroutines.runBlocking</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args : <span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span> = runBlocking &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    launch &#123;</span><br><span class="line">        delay(<span class="number">1000</span>)</span><br><span class="line">        println(<span class="string">"start"</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    print(<span class="string">"gogo  + "</span>)</span><br><span class="line">    delay(<span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>디펜던시 추가후 정상작동 확인 코드</p><ul><li>runBloking : 코루틴을 생성 한 후 코루틴이 끝나고 그 결과 값을 반환할때까지 현재 쓰레드를 불록한다.</li><li>launch : 현재 스레드의 블록 없이 새 코루틴을 생성하고 Job을 반환한다.</li><li>delay : 현재 스레드를 블록하지 않고 현재 코투린을 지연시키는 함수</li><li>suspend : 현재 스레드의 블록 없이 코루틴의 실행을 일시 중지할수 있는 함수다. 따라서 정지 함수는 코루틴 내부에서 호출되어야 한다. 일반 코드에서 실행 불가! 함수는 suspend 수정자로 표시되어야 한다. </li></ul><p>시간이 없다. 다행이다.. 나중에 더공부하자….</p><blockquote><p>함수형 코틀린 [에이콘, 구진수 옮김] 참고</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;coroutines&quot;&gt;&lt;a href=&quot;#coroutines&quot; class=&quot;headerlink&quot; title=&quot;coroutines&quot;&gt;&lt;/a&gt;coroutines&lt;/h2&gt;&lt;p&gt;아…. 이글을 쓰긴하지만… 나중에 상당히 많은 수정이 필요하다 생각된
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
      <category term="coroutines" scheme="https://beanbroker.github.io/categories/Kotlin/coroutines/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="coroutines" scheme="https://beanbroker.github.io/tags/coroutines/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 불변성</title>
    <link href="https://beanbroker.github.io/2019/02/02/Kotlin/kotlin_sample/"/>
    <id>https://beanbroker.github.io/2019/02/02/Kotlin/kotlin_sample/</id>
    <published>2019-02-02T11:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.327Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Kotlin-불변성"><a href="#Kotlin-불변성" class="headerlink" title="Kotlin 불변성"></a>Kotlin 불변성</h2><h3 id="불변성이란"><a href="#불변성이란" class="headerlink" title="불변성이란"></a>불변성이란</h3><ul><li>책들을 읽다보면 쓰레드 세이프하기 위해선 어떻게 해야하나요?<ul><li>전역변수를 사용하지 않고 변수 선언을 지역변수로만 선언한다 등등 </li></ul></li></ul><blockquote><p>함수형 프로그래밍은 thread safe하다고 한다. 왜?<br><a href="https://beanbroker.github.io/2018/11/17/Kotlin/concept_functional/">https://beanbroker.github.io/2018/11/17/Kotlin/concept_functional/</a><br>위를 한번 읽고 오자</p></blockquote><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MutableObjet</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> mutableValue : <span class="built_in">Int</span> = <span class="number">1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위의 클래스를 동시에 여러 스레드에서 호출하는 상황을 생각해보자! mutableValue의 무결한가에 대한 보장은 없다. 해당 값을 변경할수 없게 한다고 가정해본다면 문제는 부분적으로 해결이 가능하다. 하지만 불변한 클래스를 생성하고 모든 변수를 읽기 전용으로 만드는 것은….. 말이 되지 않는다</p><blockquote><p>키포인트 : 불변성은 변경 금지에 대한 것이 아니라 변경 처리에 대한 것이다. </p></blockquote><h3 id="코틀린에서-불변성을-구현해보자"><a href="#코틀린에서-불변성을-구현해보자" class="headerlink" title="코틀린에서 불변성을 구현해보자"></a>코틀린에서 불변성을 구현해보자</h3><h4 id="var과-val"><a href="#var과-val" class="headerlink" title="var과 val"></a>var과 val</h4><p>var는 단순 변수라 생각된다. 그럼 val의 역할은?</p><ul><li>읽기 전용을 강제하며!</li><li>초기화 이후에 val 변수에 write할수 없다.</li><li>즉 커스텀한 getter 없이는 val 변수를 사용하면 참조 불변성을 얻을수 있다.</li></ul><p>example<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">val</span> temp:String =<span class="string">"beanbroker"</span></span><br><span class="line">temp+= <span class="string">"개발자"</span></span><br></pre></td></tr></table></figure></p><p>위의 코드는 컴파일 되지 않는다. 당연한 결과이다… 패스</p><h4 id="val과-const-val"><a href="#val과-const-val" class="headerlink" title="val과 const val"></a>val과 const val</h4><ol><li>val은 읽기 전용, const val은 컴파일 상수</li><li>val는 custom getter를 가질수 있으나 const val는 그러하지 않다.</li><li>함수 내부, 클래스 멤버 등 어디서나 vaㅣ 속성을 가질수 있지만, const val는 클래스/Object의 최상위 멤버야만 한다.</li><li>모든 타입에 대한 val 속성을 가질수 있다,(직접 정의한 클래스 또는 모든 종류의 기본 데이터 타입이) const val는 기본 데이터 타입과 문자열만을 사용할수 있다.</li><li>const val은 null이 가능한 데이터 타입을 가질수 없다.</li></ol><blockquote><p>4번 sample<br><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">val</span> temp = <span class="string">"pair"</span> to <span class="string">"pair"</span></span><br></pre></td></tr></table></figure></p></blockquote><p>  너무나도 편한 Pair 위와 같이 선언시 Only primitives and String are allowed라는 에러문구가 친절하게 ide에서 말해준다.</p><h3 id="불변성의-장점"><a href="#불변성의-장점" class="headerlink" title="불변성의 장점"></a>불변성의 장점</h3><ol><li>thread safe</li><li>낮은 커플링</li><li>참조 투명성</li><li>실패 원자성</li><li>컴파일러 최적화</li><li>순수 함수</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Kotlin-불변성&quot;&gt;&lt;a href=&quot;#Kotlin-불변성&quot; class=&quot;headerlink&quot; title=&quot;Kotlin 불변성&quot;&gt;&lt;/a&gt;Kotlin 불변성&lt;/h2&gt;&lt;h3 id=&quot;불변성이란&quot;&gt;&lt;a href=&quot;#불변성이란&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>자바! 클래스를 불변으로 만들려면?</title>
    <link href="https://beanbroker.github.io/2019/02/02/Java/immutable/"/>
    <id>https://beanbroker.github.io/2019/02/02/Java/immutable/</id>
    <published>2019-02-02T08:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="변경-가능성을-최소화하라"><a href="#변경-가능성을-최소화하라" class="headerlink" title="변경 가능성을 최소화하라"></a>변경 가능성을 최소화하라</h2><p>불변 클래스란? - 인스턴스의 내부 값을 수정할수 없는 클래스</p><p>ex) String, BigInteger, BigDecimal</p><p>클래스를 불변으로 만들려면?</p><ol><li>객체의 상태를 변경하는 메서드를 제공하지 않는다.</li><li>클래스를 확장 할수 없도록 한다.</li><li>모든 필드를 final로 선언한다.</li><li>모든 필드를 private으로 선언한다.</li><li>자신 외에는 내부의 가변 컴포넌트에 접근할수 없도록 한다.</li></ol><p>불변 객체는 단순하다. 불변 객체는 생성된 시점의 상태를 파괴될떄까지 그대로 간진한다. 불변 객체는 근본적으로 스레드 세이프하여 따로 동기화를 할필요가 없다.</p><p>-&gt; 즉 여러 스레드가 동시에 사용해도 절대 훼손되지 않는다.</p><blockquote><p>이펙티브자바 3판 참고! (잊지 않기 위해 블로그에 올립니다)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;변경-가능성을-최소화하라&quot;&gt;&lt;a href=&quot;#변경-가능성을-최소화하라&quot; class=&quot;headerlink&quot; title=&quot;변경 가능성을 최소화하라&quot;&gt;&lt;/a&gt;변경 가능성을 최소화하라&lt;/h2&gt;&lt;p&gt;불변 클래스란? - 인스턴스의 내부 값을 수정할
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>RxJava (5) Etc</title>
    <link href="https://beanbroker.github.io/2018/12/25/Java/RxJava5/"/>
    <id>https://beanbroker.github.io/2018/12/25/Java/RxJava5/</id>
    <published>2018-12-25T11:20:00.000Z</published>
    <updated>2019-07-07T08:12:45.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reactive-programming"><a href="#Reactive-programming" class="headerlink" title="Reactive programming"></a>Reactive programming</h2><h3 id="Etc"><a href="#Etc" class="headerlink" title="Etc.."></a>Etc..</h3><blockquote><p>First (If you have 3 possible Mono sources and you only want to keep the fastest one, you can use the first static method)</p></blockquote><ol><li>Return the mono which returns its value faster</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Mono&lt;User&gt; <span class="title">useFastestMono</span><span class="params">(Mono&lt;User&gt; mono1, Mono&lt;User&gt; mono2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mono.first(mono1, mono2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>firstEmitting (For Flux, a similar result can be achieved using the firstEmitting static method. )</p></blockquote><ol><li>Return the flux which returns the first value faster<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Flux&lt;User&gt; <span class="title">useFastestFlux</span><span class="params">(Flux&lt;User&gt; flux1, Flux&lt;User&gt; flux2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Flux.firstEmitting(flux1, flux2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>then (Sometimes you’re not interested in elements of a Flux<t>. If you want to still keep a Flux<t> type, you can use ignoreElements(). But if you really just want the completion, represented as a Mono<void>, you can use then() instead:)</void></t></t></p></blockquote><ol start="3"><li>Convert the input Flux<user> to a Mono<void> that represents the complete signal of the flux<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Mono&lt;Void&gt; <span class="title">fluxCompletion</span><span class="params">(Flux&lt;User&gt; flux)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> flux.then();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></void></user></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reactive-programming&quot;&gt;&lt;a href=&quot;#Reactive-programming&quot; class=&quot;headerlink&quot; title=&quot;Reactive programming&quot;&gt;&lt;/a&gt;Reactive programming&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/categories/Java/RxJava/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava (4) Request, Error</title>
    <link href="https://beanbroker.github.io/2018/12/25/Java/RxJava4/"/>
    <id>https://beanbroker.github.io/2018/12/25/Java/RxJava4/</id>
    <published>2018-12-25T11:20:00.000Z</published>
    <updated>2019-07-07T08:12:45.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reactive-programming"><a href="#Reactive-programming" class="headerlink" title="Reactive programming"></a>Reactive programming</h2><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><ul><li><p>the volume control. In Reactive Streams terms this is called backpressure.</p></li><li><p>Subscriber -&gt; publisher 시그널을 보낸다! 얼마나 많은 데이터를 받기를 원하는지 </p></li><li><p>publisher가 데이터 양을 조절 </p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">This control of the demand is done at the Subscription level: a Subscription is created for each subscribe() call and it can be manipulated to either cancel() the flow of data or tune demand with request(long).</span><br></pre></td></tr></table></figure><ol><li>publisher가 subscribe를 하면  </li><li>onSubscribe 호출</li><li>Subscription 객체가 전달, Subscriber가 멤버 변수로 subscroption 가지고 잇음</li><li>onNext - 데이터 전달<br>(  <a href="https://grokonez.com/java/java-9/java-9-flow-api-reactive-streams" rel="external nofollow noopener noreferrer" target="_blank">https://grokonez.com/java/java-9/java-9-flow-api-reactive-streams</a> )</li></ol><ol><li>Create a StepVerifier that initially requests all values and expect 4 values to be received<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function">StepVerifier <span class="title">requestAllExpectFour</span><span class="params">(Flux&lt;User&gt; flux)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> StepVerifier.create(flux)</span><br><span class="line">.expectNextCount(<span class="number">4</span>)</span><br><span class="line">.expectComplete()</span><br><span class="line"></span><br><span class="line">;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="request-제어"><a href="#request-제어" class="headerlink" title="request 제어"></a>request 제어</h3><p><a href="https://www.youtube.com/watch?v=8hB1C4OCbz0&amp;list=PLfI752FpVCS9hh_FE8uDuRVgPPnAivZTY&amp;index=8" rel="external nofollow noopener noreferrer" target="_blank">https://www.youtube.com/watch?v=8hB1C4OCbz0&amp;list=PLfI752FpVCS9hh_FE8uDuRVgPPnAivZTY&amp;index=8</a> 백기선님 강의를 토대로 작성하였습니다.</p><blockquote><p>request(unbounded)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Flux.range(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">        .log()</span><br><span class="line">        .doOnNext(System.out::println)</span><br><span class="line">        .subscribe();</span><br></pre></td></tr></table></figure><p>로그 :  request(unbounded)</p><blockquote><p>request(10) 10개씩</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">  </span><br><span class="line">Flux.range(<span class="number">1</span>, <span class="number">100</span>)</span><br><span class="line">        .log()</span><br><span class="line">        .doOnNext(System.out::println)</span><br><span class="line">        .subscribe(<span class="keyword">new</span> Subscriber&lt;Integer&gt;() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">private</span> Subscription subscription;</span><br><span class="line">            <span class="keyword">private</span> <span class="keyword">int</span> cnt;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSubscribe</span><span class="params">(Subscription subscription)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.subscription = subscription;</span><br><span class="line">                <span class="keyword">this</span>.subscription.request(<span class="number">10</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Integer integer)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">                cnt++;</span><br><span class="line">                <span class="keyword">if</span>(cnt%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">this</span>.subscription.request(<span class="number">10</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable throwable)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onComplete</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><blockquote><p>onErrorResume</p></blockquote><ol><li><p>Return a Mono<user> containing User.SAUL when an error occurs in the input Mono, else do not change the input Mono.</user></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Mono&lt;User&gt; <span class="title">betterCallSaulForBogusMono</span><span class="params">(Mono&lt;User&gt; mono)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mono.onErrorResume(e -&gt; Mono.just(User.SAUL));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Return a Flux<user> containing User.SAUL and User.JESSE when an error occurs in the input Flux, else do not change the input Flux.</user></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Flux&lt;User&gt; <span class="title">betterCallSaulAndJesseForBogusFlux</span><span class="params">(Flux&lt;User&gt; flux)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> flux.onErrorResume(e -&gt; Flux.just(User.SAUL, User.JESSE));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="Error-propagate"><a href="#Error-propagate" class="headerlink" title="Error propagate"></a>Error propagate</h3><ol><li>propagate - 에러 변환 담당<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Mono.just(<span class="string">"hello"</span>)</span><br><span class="line">           .log()</span><br><span class="line">           .map(s -&gt; &#123;</span><br><span class="line">               <span class="keyword">try</span>&#123;</span><br><span class="line">                   <span class="keyword">return</span> Integer.parseInt(s);</span><br><span class="line"></span><br><span class="line">               &#125; <span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">                   <span class="keyword">throw</span> Exceptions.propagate(e);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;)</span><br><span class="line">           .onErrorReturn(<span class="number">200</span>)</span><br><span class="line">           .doOnNext(System.out::println)</span><br><span class="line">           .subscribe();</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reactive-programming&quot;&gt;&lt;a href=&quot;#Reactive-programming&quot; class=&quot;headerlink&quot; title=&quot;Reactive programming&quot;&gt;&lt;/a&gt;Reactive programming&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/categories/Java/RxJava/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava (3) Transform, flatMap, merge</title>
    <link href="https://beanbroker.github.io/2018/12/25/Java/RxJava3/"/>
    <id>https://beanbroker.github.io/2018/12/25/Java/RxJava3/</id>
    <published>2018-12-25T10:20:00.000Z</published>
    <updated>2019-07-07T08:12:45.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reactive-programming"><a href="#Reactive-programming" class="headerlink" title="Reactive programming"></a>Reactive programming</h2><h3 id="Transform-map"><a href="#Transform-map" class="headerlink" title="Transform, map"></a>Transform, map</h3><ol><li><p>Capitalize the user username, firstname and lastname</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Mono&lt;User&gt; <span class="title">capitalizeOne</span><span class="params">(Mono&lt;User&gt; mono)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> mono.map(</span><br><span class="line">    u -&gt; <span class="keyword">new</span> User(</span><br><span class="line">        u.getUsername().toUpperCase(), </span><br><span class="line">        u.getFirstname().toUpperCase(), </span><br><span class="line">        u.getLastname().toUpperCase())</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Capitalize the users username, firstName and lastName</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Flux&lt;User&gt; <span class="title">capitalizeMany</span><span class="params">(Flux&lt;User&gt; flux)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> flux.map(</span><br><span class="line">    u -&gt; <span class="keyword">new</span> User(</span><br><span class="line">        u.getUsername().toUpperCase(), </span><br><span class="line">        u.getFirstname().toUpperCase(), </span><br><span class="line">        u.getLastname().toUpperCase())</span><br><span class="line">        );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap"></a>flatMap</h3><p>This new call can have latency so we cannot use the synchronous map anymore.<br>Instead, we want to represent the asynchronous call as a Flux or Mono, and use a different operator: flatMap.</p><p>즉</p><ul><li>map is for synchronous, non-blocking, 1-to-1 transformations</li><li>flatMap is for asynchronous (non-blocking) 1-to-N transformations  변경하는 자체를 감싸고 있는 퍼블리셔이며 순서를 보장하지 않음</li></ul><ol start="3"><li>// TODO Capitalize the users username, firstName and lastName using #asyncCapitalizeUser<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Flux&lt;User&gt; <span class="title">asyncCapitalizeMany</span><span class="params">(Flux&lt;User&gt; flux)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> flux.flatMap(<span class="keyword">this</span>::asyncCapitalizeUser);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Mono&lt;User&gt; <span class="title">asyncCapitalizeUser</span><span class="params">(User u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mono.just(<span class="keyword">new</span> User(u.getUsername().toUpperCase(), u.getFirstname().toUpperCase(), u.getLastname().toUpperCase()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><ol><li>Merge flux1 and flux2 values with interleave</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Flux&lt;User&gt; <span class="title">mergeFluxWithInterleave</span><span class="params">(Flux&lt;User&gt; flux1, Flux&lt;User&gt; flux2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> flux1.mergeWith(flux2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>example<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Flux&lt;Long&gt; flux2 = Flux.just(<span class="number">100L</span>, <span class="number">101L</span>, <span class="number">102L</span>);</span><br><span class="line">flux1.mergeWith(flux2)</span><br><span class="line">        .doOnNext(System.out::println)</span><br><span class="line">        .blockLast();</span><br></pre></td></tr></table></figure></p><ol start="2"><li>Merge flux1 and flux2 values with no interleave (flux1 values and then flux2 values)<br>if we want to keep the order of sources, we can use the concat</li></ol><blockquote><p>concat </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Flux&lt;User&gt; <span class="title">mergeFluxWithNoInterleave</span><span class="params">(Flux&lt;User&gt; flux1, Flux&lt;User&gt; flux2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> flux1.concatWith(flux2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create a Flux containing the value of mono1 then the value of mono2</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Flux&lt;User&gt; <span class="title">createFluxFromMultipleMono</span><span class="params">(Mono&lt;User&gt; mono1, Mono&lt;User&gt; mono2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Flux.concat(mono1, mono2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reactive-programming&quot;&gt;&lt;a href=&quot;#Reactive-programming&quot; class=&quot;headerlink&quot; title=&quot;Reactive programming&quot;&gt;&lt;/a&gt;Reactive programming&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/categories/Java/RxJava/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>RxJava (2) Mono, Flux</title>
    <link href="https://beanbroker.github.io/2018/12/25/Java/RxJava2/"/>
    <id>https://beanbroker.github.io/2018/12/25/Java/RxJava2/</id>
    <published>2018-12-25T09:20:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reactive-programming"><a href="#Reactive-programming" class="headerlink" title="Reactive programming"></a>Reactive programming</h2><h3 id="Flux"><a href="#Flux" class="headerlink" title="Flux"></a>Flux</h3><p><a href="https://tech.io/playgrounds/929/reactive-programming-with-reactor-3/Flux" rel="external nofollow noopener noreferrer" target="_blank">https://tech.io/playgrounds/929/reactive-programming-with-reactor-3/Flux</a></p><ol><li><p>Return an empty Flux</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Flux&lt;String&gt; <span class="title">emptyFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Flux.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Return a Flux that contains 2 values “foo” and “bar” without using an array or a collection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Flux&lt;String&gt; <span class="title">fooBarFluxFromValues</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Flux.just(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Create a Flux from a List that contains 2 values “foo” and “bar”</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Flux&lt;String&gt; <span class="title">fooBarFluxFromList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> Flux.fromIterable(Arrays.asList(<span class="string">"foo"</span>, <span class="string">"bar"</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="4"><li>Reactive Streams defines the onError signal to deal with exceptions. Note that such an event is terminal: this is the last event the Flux will produce.</li></ol><blockquote><p>Last event임을 반드시 알고 넘어가자 </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Flux&lt;String&gt; <span class="title">errorFlux</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Flux.error(<span class="keyword">new</span> IllegalStateException());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>무슨 에러 인지 읽어보기 테스트<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Flux.error(<span class="keyword">new</span> Exception(<span class="string">"룰루랄라"</span>))</span><br><span class="line">        .doOnError(System.out::println)</span><br><span class="line">        .subscribe();</span><br></pre></td></tr></table></figure></p><h3 id="Mono"><a href="#Mono" class="headerlink" title="Mono"></a>Mono</h3><ol><li><p>Return an empty Mono</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">Mono&lt;String&gt; <span class="title">emptyMono</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mono.empty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Return a Mono that contains a “foo” value</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Mono&lt;String&gt; <span class="title">fooMono</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mono.just(<span class="string">"foo"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>Create a Mono that emits an IllegalStateException</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Mono&lt;String&gt; <span class="title">errorMono</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> Mono.error(<span class="keyword">new</span> IllegalStateException());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="StepVerifier"><a href="#StepVerifier" class="headerlink" title="StepVerifier"></a>StepVerifier</h3><ul><li>Test에 쓸수 있어요!! nonblocking디버깅에 유용</li></ul><ol><li>Use StepVerifier to check that the flux parameter emits “foo” and “bar” elements then completes successfully.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expectFooBarComplete</span><span class="params">(Flux&lt;String&gt; flux)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Flux&lt;String&gt; just = Flux.just(<span class="string">"foo"</span>, <span class="string">"bar"</span>);</span><br><span class="line"></span><br><span class="line">StepVerifier.create(just)</span><br><span class="line">.expectNext(<span class="string">"foo"</span>)</span><br><span class="line">.expectNext(<span class="string">"bar"</span>)</span><br><span class="line">.verifyComplete();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>Use StepVerifier to check that the flux parameter emits “foo” and “bar” elements then a RuntimeException error.</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">expectFooBarError</span><span class="params">(Flux&lt;String&gt; flux)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">StepVerifier.create(flux)</span><br><span class="line">.expectNext(<span class="string">"foo"</span>)</span><br><span class="line">.expectNext(<span class="string">"bar"</span>)</span><br><span class="line">.verifyError(RuntimeException.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reactive-programming&quot;&gt;&lt;a href=&quot;#Reactive-programming&quot; class=&quot;headerlink&quot; title=&quot;Reactive programming&quot;&gt;&lt;/a&gt;Reactive programming&lt;/h2&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/categories/Java/RxJava/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>Oauth with Spring</title>
    <link href="https://beanbroker.github.io/2018/12/15/Spring/spring_oauth1/"/>
    <id>https://beanbroker.github.io/2018/12/15/Spring/spring_oauth1/</id>
    <published>2018-12-15T06:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Oauth2"><a href="#Oauth2" class="headerlink" title="Oauth2"></a>Oauth2</h1><p><a href="https://www.devglan.com/spring-security/spring-boot-security-oauth2-example" rel="external nofollow noopener noreferrer" target="_blank">https://www.devglan.com/spring-security/spring-boot-security-oauth2-example</a> 를 참고하세요!</p><h2 id="Oauth1-ROLES"><a href="#Oauth1-ROLES" class="headerlink" title="Oauth1 ROLES"></a>Oauth1 ROLES</h2><ol><li>oAuth Provider (ex : google, facebook, kakao, etc..)</li><li>oAuth Client ( Using provider )</li><li>Owner ( 실제 사용자)</li></ol><h2 id="OAuth2-Roles"><a href="#OAuth2-Roles" class="headerlink" title="OAuth2 Roles"></a>OAuth2 Roles</h2><ol><li>Resource Owner : user</li><li>Client : Appication</li><li>Resource Server : API</li><li>Authoriztion Server : API</li></ol><h2 id="OAuth2-Grant-Types"><a href="#OAuth2-Grant-Types" class="headerlink" title="OAuth2 Grant Types"></a>OAuth2 Grant Types</h2><p>핸드쉐이킹 하는 방법이 4가지!</p><ol><li><p>Authorization Code: used with server-side Applications </p></li><li><p>Implicit: used with Mobile Apps or Web Applications (applications that run on the user’s device)</p></li><li><p>Resource Owner Password Credentials: used with trusted Applications, such as those owned by the service itself</p></li><li><p>Client Credentials: used with Applications API access</p></li></ol><h2 id="Auth-Server-Config"><a href="#Auth-Server-Config" class="headerlink" title="Auth Server Config"></a>Auth Server Config</h2><p>토큰 발급 담당</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableAuthorizationServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthorizationServerConfig</span> <span class="keyword">extends</span> <span class="title">AuthorizationServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String CLIEN_ID = <span class="string">"beanbroker-client"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String CLIENT_SECRET = <span class="string">"beanbroker-secret"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String PASS_WORD = <span class="string">"password"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String AUTHORIZATION_CODE = <span class="string">"authorization_code"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String REFRESH_TOKEN = <span class="string">"refresh_token"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String IMPLICIT = <span class="string">"implicit"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String SCOPE_READ = <span class="string">"read"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String SCOPE_WRITE = <span class="string">"write"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> String TRUST = <span class="string">"trust"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ACCESS_TOKEN_VALIDITY_SECONDS = <span class="number">1</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> FREFRESH_TOKEN_VALIDITY_SECONDS = <span class="number">6</span>*<span class="number">60</span>*<span class="number">60</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> TokenStore tokenStore;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AuthenticationManager authenticationManager;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> PasswordEncoder passwordEncoder;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthorizationServerConfig</span><span class="params">(TokenStore tokenStore, AuthenticationManager authenticationManager, PasswordEncoder passwordEncoder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tokenStore = tokenStore;</span><br><span class="line">        <span class="keyword">this</span>.authenticationManager = authenticationManager;</span><br><span class="line">        <span class="keyword">this</span>.passwordEncoder = passwordEncoder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ClientDetailsServiceConfigurer configurer)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">        configurer</span><br><span class="line">                .inMemory()</span><br><span class="line">                .withClient(CLIEN_ID)</span><br><span class="line"><span class="comment">//                .secret(CLIENT_SECRET)</span></span><br><span class="line">                .secret(passwordEncoder.encode(CLIENT_SECRET))</span><br><span class="line">                .authorizedGrantTypes(PASS_WORD, AUTHORIZATION_CODE, REFRESH_TOKEN, IMPLICIT )</span><br><span class="line">                .scopes(SCOPE_READ, SCOPE_WRITE, TRUST)</span><br><span class="line">                .accessTokenValiditySeconds(ACCESS_TOKEN_VALIDITY_SECONDS).</span><br><span class="line">                refreshTokenValiditySeconds(FREFRESH_TOKEN_VALIDITY_SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(AuthorizationServerEndpointsConfigurer endpoints)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        endpoints.tokenStore(tokenStore)</span><br><span class="line">                .authenticationManager(authenticationManager);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>TokenStore -&gt; 토큰 저장하는 저장소 </p></li><li><p>AuthenticationManager -&gt; 실질적인 인증 인터페이스이며, 인증 처리를 담당한다.</p></li><li>grantType 4가지 </li><li>토큰 만료기간 한시간</li><li>리프레시 토큰 만료기간 6시간</li><li>client와 clientId -&gt; 토큰을 받아오려면 클라이언트로 인증이 되어야만 받을수 있다</li></ol><h2 id="Resource-Server-Config"><a href="#Resource-Server-Config" class="headerlink" title="Resource Server Config"></a>Resource Server Config</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableResourceServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResourceServerConfig</span> <span class="keyword">extends</span> <span class="title">ResourceServerConfigurerAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String RESOURCE_ID = <span class="string">"resource_id"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(ResourceServerSecurityConfigurer resources)</span> </span>&#123;</span><br><span class="line">        resources.resourceId(RESOURCE_ID).stateless(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.</span><br><span class="line">                anonymous().disable()</span><br><span class="line">                .authorizeRequests()</span><br><span class="line">                .antMatchers(<span class="string">"/users/**"</span>).authenticated()</span><br><span class="line">                .and().exceptionHandling().accessDeniedHandler(<span class="keyword">new</span> OAuth2AccessDeniedHandler());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>stateless</p><ul><li>true : 토큰 인증만 할거면 true, </li><li>false : 아니면 false, </li></ul></li><li><p>authorizeRequests -&gt; 유저에 접근하는 모든 request는 인증이 되어야함</p></li></ol><h2 id="깃헙-클론"><a href="#깃헙-클론" class="headerlink" title="깃헙 클론"></a>깃헙 클론</h2><p>깃헙을 클론하여 진행하여주세요. 그 외 다른 유저 서비스 및 정보들은 누구나 쉽게 구현하여 진행이 가능합니다</p><blockquote><p>깃헙 주소 </p></blockquote><p><a href="https://github.com/beanbroker/sample_oauth" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/beanbroker/sample_oauth</a></p><h2 id="테스트"><a href="#테스트" class="headerlink" title="테스트"></a>테스트</h2><p>postman으로 진행 postman impot<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="attr">"info"</span>: &#123;</span><br><span class="line"><span class="attr">"_postman_id"</span>: <span class="string">"1760d7bd-196d-40b3-90ba-ea05eded8d37"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"study_oauth"</span>,</span><br><span class="line"><span class="attr">"schema"</span>: <span class="string">"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"item"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Get Token"</span>,</span><br><span class="line"><span class="attr">"request"</span>: &#123;</span><br><span class="line"><span class="attr">"auth"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"basic"</span>,</span><br><span class="line"><span class="attr">"basic"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"password"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"beanbroker-secret"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"username"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"beanbroker-client"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"method"</span>: <span class="string">"POST"</span>,</span><br><span class="line"><span class="attr">"header"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"body"</span>: &#123;</span><br><span class="line"><span class="attr">"mode"</span>: <span class="string">"urlencoded"</span>,</span><br><span class="line"><span class="attr">"urlencoded"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"username"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"beanbroker"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"password"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"12342"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"grant_type"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"password"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"url"</span>: &#123;</span><br><span class="line"><span class="attr">"raw"</span>: <span class="string">"localhost:8080/oauth/token"</span>,</span><br><span class="line"><span class="attr">"host"</span>: [</span><br><span class="line"><span class="string">"localhost"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"port"</span>: <span class="string">"8080"</span>,</span><br><span class="line"><span class="attr">"path"</span>: [</span><br><span class="line"><span class="string">"oauth"</span>,</span><br><span class="line"><span class="string">"token"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"response"</span>: []</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Get User Info"</span>,</span><br><span class="line"><span class="attr">"protocolProfileBehavior"</span>: &#123;</span><br><span class="line"><span class="attr">"disableBodyPruning"</span>: <span class="literal">true</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"request"</span>: &#123;</span><br><span class="line"><span class="attr">"auth"</span>: &#123;</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"oauth2"</span>,</span><br><span class="line"><span class="attr">"oauth2"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"accessToken"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"f420e4db-d76f-49b8-bcd1-480d03832c4b"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"addTokenTo"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"header"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"string"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"method"</span>: <span class="string">"GET"</span>,</span><br><span class="line"><span class="attr">"header"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="attr">"name"</span>: <span class="string">"Content-Type"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"application/x-www-form-urlencoded"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;</span><br><span class="line">],</span><br><span class="line"><span class="attr">"body"</span>: &#123;</span><br><span class="line"><span class="attr">"mode"</span>: <span class="string">"urlencoded"</span>,</span><br><span class="line"><span class="attr">"urlencoded"</span>: [</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"username"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"beanbroker"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"password"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"1234"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line"><span class="attr">"key"</span>: <span class="string">"grant_type"</span>,</span><br><span class="line"><span class="attr">"value"</span>: <span class="string">"password"</span>,</span><br><span class="line"><span class="attr">"type"</span>: <span class="string">"text"</span></span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"url"</span>: &#123;</span><br><span class="line"><span class="attr">"raw"</span>: <span class="string">"localhost:8080/users/user"</span>,</span><br><span class="line"><span class="attr">"host"</span>: [</span><br><span class="line"><span class="string">"localhost"</span></span><br><span class="line">],</span><br><span class="line"><span class="attr">"port"</span>: <span class="string">"8080"</span>,</span><br><span class="line"><span class="attr">"path"</span>: [</span><br><span class="line"><span class="string">"users"</span>,</span><br><span class="line"><span class="string">"user"</span></span><br><span class="line">]</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">"response"</span>: []</span><br><span class="line">&#125;</span><br><span class="line">]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Get-Token"><a href="#Get-Token" class="headerlink" title="Get Token"></a>Get Token</h3><blockquote><p>localhost:8080/oauth/token</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"access_token"</span>: <span class="string">"f420e4db-d76f-49b8-bcd1-480d03832c4b"</span>,</span><br><span class="line">    <span class="attr">"token_type"</span>: <span class="string">"bearer"</span>,</span><br><span class="line">    <span class="attr">"refresh_token"</span>: <span class="string">"f7216eeb-d1ba-4c93-832d-9b0ffa52e2db"</span>,</span><br><span class="line">    <span class="attr">"expires_in"</span>: <span class="number">3599</span>,</span><br><span class="line">    <span class="attr">"scope"</span>: <span class="string">"read write trust"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와같이 토큰 발급이 진행되어진다.</p><p>정상적인 비밀번호를 입력하지 않을경우<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"error"</span>: <span class="string">"invalid_grant"</span>,</span><br><span class="line">    <span class="attr">"error_description"</span>: <span class="string">"Bad credentials"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="Get-User-Info"><a href="#Get-User-Info" class="headerlink" title="Get User Info"></a>Get User Info</h3><blockquote><p>localhost:8080/users/user </p></blockquote><p>발급받은 access_token설정하여 request</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"id"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"userName"</span>: <span class="string">"beanbroker"</span>,</span><br><span class="line">        <span class="attr">"password"</span>: <span class="string">"&#123;bcrypt&#125;$2a$10$UNtRqoEj2OoaD1trDP61hOxhZvPQISYd6Bz8px0wAn56LzHq5iO0."</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>유저정보 반환</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Oauth2&quot;&gt;&lt;a href=&quot;#Oauth2&quot; class=&quot;headerlink&quot; title=&quot;Oauth2&quot;&gt;&lt;/a&gt;Oauth2&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.devglan.com/spring-security/sprin
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Oauth" scheme="https://beanbroker.github.io/categories/Spring/Oauth/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Oauth" scheme="https://beanbroker.github.io/tags/Oauth/"/>
    
  </entry>
  
  <entry>
    <title>RxJava (1)</title>
    <link href="https://beanbroker.github.io/2018/12/09/Java/RxJava1/"/>
    <id>https://beanbroker.github.io/2018/12/09/Java/RxJava1/</id>
    <published>2018-12-09T06:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RxJava"><a href="#RxJava" class="headerlink" title="RxJava"></a>RxJava</h2><p>RxJava프로그래밍 - 유동환, 박정준 ( 한빛미디어 )</p><p>리액티브 프로그래밍이란 데이터의 흐름을 먼저 제어하고 흐름에서 발생하는 다양한 이벤트에 따라 함수가 실행된다.</p><h2 id="시작하며"><a href="#시작하며" class="headerlink" title="시작하며"></a>시작하며</h2><h3 id="subscribe-함수"><a href="#subscribe-함수" class="headerlink" title="subscribe()함수"></a>subscribe()함수</h3><ol><li>Observable을 구독합니다.(즉 데이터의 구독)</li><li>just()함수만 호출하면 데이터를 발행하지 않습니다.</li><li>옵저버 패턴과 동일하다고 판단.</li><li>반드시 데이터를 수신할 구독자가 subscribe를 호출해야 Observable에서 데이터가 발생</li></ol><h2 id="RxJava-1"><a href="#RxJava-1" class="headerlink" title="RxJava"></a>RxJava</h2><ol><li><p>자바는 전통적인 스레드 기반의 프로그래밍입니다. 다수의 스레드를 활용하는 경우 예상치 못한 문제가 발생 또는 디버깅이 어려웠습니다. 이문제를 해결하기 위해 함수형 프로그래밍 기법을 도입!</p></li><li><p>함수형 프로그래밍은 부수효과가 없는 순수함수를 지향하므로 스레드가 안전합니다. 즉 스레드세이프하다! (<a href="https://beanbroker.github.io/2018/11/17/Kotlin/concept_functional/)참고">https://beanbroker.github.io/2018/11/17/Kotlin/concept_functional/)참고</a></p></li><li><p>RxJava 라이브러리는 순수 함수로 작성된 리액티브 연산자를 제공</p></li><li><p>함수형 연산자를 어떻게 호출해야 하는지 모르기 때문에 어렵다. </p></li></ol><blockquote><p>중요 컨셉</p></blockquote><ol><li>Hot Observable | Cold Observable</li><li>생성 연산자, 결합 연산자, 변환 연산자</li></ol><h2 id="Observable"><a href="#Observable" class="headerlink" title="Observable"></a>Observable</h2><p>Observable을 반드시 알아야 한다.</p><p>Observable클래스는 상황에 맞게 세분화해 각각 Observable, MayBe, Flowable 클래스로 구분해 사용합니다.</p><p>Observable은 옵저버 패턴을 구현합니다. 상태 변화가 있을 때마다 메서드를 호출하여 옵저버에게 변호라르 알려줍니다. 라이프 사이클은 존재하지 않으며 보통 단일 함수를 통해 변화만 알립니다.</p><p>RxJava의 Observable은 세가지 알림을 구독자에게 전달합니다.</p><ul><li>onNext : Observable이 데이터의 발행을 알립니다. 기존의 옵저버 패턴과 동일</li><li>onComplete : 모든 데이터의 발행을 완료했음을 알림. “해당 이벤트는 단 한번만 발생하며, 발생한 후에는 더 이상 onNext 이벤트가 발생해선 안됩니다.”</li><li>onError : Observable에서 에러 발생을 알림. 해당 이벤트가 발생하면 이후 onNext및 onComplete이벤트가 발생하지 않습니다. 즉 Observable의 실행이 종료된다.</li></ul><h2 id="Just"><a href="#Just" class="headerlink" title="Just"></a>Just</h2><ol><li><p>Integer와 같은 래퍼 타입부터 User같은 사용자 정의 클래스의 객체도 인자로 넣을수 있습니다.</p></li><li><p>인자로 넣은 데이터를 차례로 발행하려고 Observable을 생성(실제 데이터 발행은 subscribe가 담당)</p></li><li><p>한개의 값을 넣을수도 있고! 여러개(최대 10개)를 넣을수 있다. 단 타입은 모두 같아야 한다.</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">emit</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Observable.just(<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>, <span class="string">"6"</span>)</span><br><span class="line">            .subscribe(System.out::println);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    FirstSample d = <span class="keyword">new</span> FirstSample();</span><br><span class="line">    d.emit();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1,2,3,4,5,6 차례대로 호출</p><h2 id="Subscribe"><a href="#Subscribe" class="headerlink" title="Subscribe"></a>Subscribe</h2><ol><li>인자가 없는 subscribe는 onError의 이벤트의 발생에 따라 Exception을 던집니다. 코드를 테스트하거나 디버깅을 위해 사용합니다. (onNext, onComplete 무시)</li><li>인자가 1개 있는 subscribe는 onNext 이벤트만을 처리합니다.</li><li>인자가 2개인 subscribe는 onNext와 onError 이벤트를 처리합니다.</li><li>인자가 3개인 subscribe는 onNext, onError, onComplete 이벤트 모두를 처리합니다.</li></ol><blockquote><p>Disposable</p></blockquote><p> Subscribe는 Observable에게 더이상 데이터를 발행하지 않도록 구독을 해지하는 함수입니다. Observable Contract에 따르면 onComplete알림을 보냈을 때 자동으로 dispose()를 호출해 Observable과 구독자의 관계를 끊습니다.</p><h2 id="create"><a href="#create" class="headerlink" title="create"></a>create</h2><p> just는 데이터를 인자로 넣으면 자동으로 알림 이벤트가 발생!<br> create는 onNext, onComplete, onError를 개발자가 직접 제어</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Observable&lt;Integer&gt; source = Observable.create(</span><br><span class="line">        (ObservableEmitter&lt;Integer&gt; emmiter) -&gt;&#123;</span><br><span class="line">            emmiter.onNext(<span class="number">1</span>);</span><br><span class="line">            emmiter.onNext(<span class="number">2</span>);</span><br><span class="line">            emmiter.onComplete();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">source.subscribe(System.out::println);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;RxJava&quot;&gt;&lt;a href=&quot;#RxJava&quot; class=&quot;headerlink&quot; title=&quot;RxJava&quot;&gt;&lt;/a&gt;RxJava&lt;/h2&gt;&lt;p&gt;RxJava프로그래밍 - 유동환, 박정준 ( 한빛미디어 )&lt;/p&gt;
&lt;p&gt;리액티브 프로그래밍이란 데
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/categories/Java/RxJava/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
      <category term="RxJava" scheme="https://beanbroker.github.io/tags/RxJava/"/>
    
  </entry>
  
  <entry>
    <title>생성자에 매개변수가 많다면 빌더를 고려하라(이펙티브 자바3)</title>
    <link href="https://beanbroker.github.io/2018/12/02/Java/class_builder/"/>
    <id>https://beanbroker.github.io/2018/12/02/Java/class_builder/</id>
    <published>2018-12-02T06:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="생성자에-매개변수가-많다면-빌더를-고려하라"><a href="#생성자에-매개변수가-많다면-빌더를-고려하라" class="headerlink" title="생성자에 매개변수가 많다면 빌더를 고려하라"></a>생성자에 매개변수가 많다면 빌더를 고려하라</h2><p>본글은 이펙티브자바 자바3의 내용을 기반으로 작성하였습니다.</p><blockquote><p>Product.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> productId;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">private</span> String tag;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">boolean</span> isSale;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime updatedAt;</span><br><span class="line"><span class="keyword">private</span> LocalDateTime deletedAt;</span><br></pre></td></tr></table></figure></p></blockquote><p>Product 클래스의 인스턴스를 만들기 위해 원하는 매개변수를 포함한 생성자를 골라 호출이 가능하다! But “매개변수의 갯수가 많아지게 될경우 클라이언트 코드를 작성하거나 읽기가 힘들어진다.”</p><blockquote><p>Product.class with builder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> productId;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> tag;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> isSale;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createdAt;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updatedAt;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime deletedAt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//필수 매개 변수</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> productId;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//선택 매개변수 - 기본값을 초기화</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> price = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> size  = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> tag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> isSale = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(<span class="keyword">int</span> productId, String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.productId = productId;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">price</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">            price = value; <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">size</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">            size = value; <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">tag</span><span class="params">(<span class="keyword">int</span> value)</span></span>&#123;</span><br><span class="line">            tag = value; <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> Builder <span class="title">isSale</span><span class="params">(<span class="keyword">boolean</span> value)</span></span>&#123;</span><br><span class="line">            isSale = value; <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Product <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> Product(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Product</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.productId = builder.productId;</span><br><span class="line">        <span class="keyword">this</span>.name = builder.name;</span><br><span class="line">        <span class="keyword">this</span>.price = builder.price;</span><br><span class="line">        <span class="keyword">this</span>.size = builder.size;</span><br><span class="line">        <span class="keyword">this</span>.tag = builder.tag;</span><br><span class="line">        <span class="keyword">this</span>.isSale = builder.isSale;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Product&#123;"</span> +</span><br><span class="line">                <span class="string">"productId="</span> + productId +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", price="</span> + price +</span><br><span class="line">                <span class="string">", size="</span> + size +</span><br><span class="line">                <span class="string">", tag="</span> + tag +</span><br><span class="line">                <span class="string">", isSale="</span> + isSale +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Main.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Product product = <span class="keyword">new</span> Product.Builder(<span class="number">35</span>,<span class="string">"sampleProduct"</span>)</span><br><span class="line">                .isSale(<span class="keyword">true</span>).price(<span class="number">1350000</span>).size(<span class="number">35</span>).tag(<span class="number">365</span>).build();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(product.toString());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">result -&gt; Product&#123;productId=<span class="number">35</span>, name=<span class="string">'sampleProduct'</span>, price=<span class="number">1350000</span>, size=<span class="number">35</span>, tag=<span class="number">365</span>, isSale=<span class="keyword">true</span>&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>위와 같이 빌더를 활용하여 생성자를 만들수 있다. 모든 매개변수의 기본값들을 한곳에 모을수 있으며 빌더의 세터메서드들은 빌더자신을 반환하기 때문에 연쇄적인 호출이 가능하다.</p><h2 id="빌더-패턴은-계층적으로-설계된-클래스와-함께-쓰기-좋다"><a href="#빌더-패턴은-계층적으로-설계된-클래스와-함께-쓰기-좋다" class="headerlink" title="빌더 패턴은 계층적으로 설계된 클래스와 함께 쓰기 좋다."></a>빌더 패턴은 계층적으로 설계된 클래스와 함께 쓰기 좋다.</h2><p>추상클래스는 추상 빌더를, 구체 클래스는 구체 빌더를 갖게 한다.</p><p>ex) 계층적으로 설계된 클래스와 잘 어울리는 빌더 패턴</p><blockquote><p>HotDog.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HotDog</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Topping &#123; HAM, ONION, GALIC, SAUSAGE, BULGOGI &#125;</span><br><span class="line">    Set&lt;Topping&gt; toppingList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Builder</span>&lt;<span class="title">T</span>&gt;&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">        EnumSet&lt;Topping&gt; toppingList = EnumSet.noneOf(Topping.class);</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> T <span class="title">addTopping</span><span class="params">(Topping topping)</span></span>&#123;</span><br><span class="line">            toppingList.add(Objects.requireNonNull(topping));</span><br><span class="line">            <span class="keyword">return</span> self();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">abstract</span> HotDog <span class="title">build</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> T <span class="title">self</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    HotDog(Builder&lt;?&gt; builder)&#123;</span><br><span class="line">        toppingList = builder.toppingList.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>BeanBrokerHotDog.class<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanBrokerHotDog</span> <span class="keyword">extends</span>  <span class="title">HotDog</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">enum</span> Bread &#123; SOFT_BREAD, NORMAL_BREAD, HARD_BREAD&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Bread bread;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Builder</span> <span class="keyword">extends</span> <span class="title">HotDog</span>.<span class="title">Builder</span>&lt;<span class="title">Builder</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> Bread bread;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Builder</span><span class="params">(Bread bread)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.bread = Objects.requireNonNull(bread);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> BeanBrokerHotDog <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> BeanBrokerHotDog(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> Builder <span class="title">self</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">BeanBrokerHotDog</span><span class="params">(Builder builder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(builder);</span><br><span class="line">        bread = builder.bread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>각 하위 클래스의 빌더가 정희한 build 메서드는 해당하는 구체 하위 클래스를 반환하도록 선언한다. BeanBrokerHotDog.Builder는 BeanBrokerHotDog를 반환한다.</p><p>빌더 패턴은 상당히 유연하며 빌더 하나로 여러 객체를 순회하면서 만들수 있고, 빌더에 넘기는 매개변수에 따라 다른 객체를 만들 수 있다. 객체마다 부여되는 일련번호 같은 특정 필드는 빌더가 알아서 채우도록 할수도 있다.</p><p>But 빌더 패턴에 장정만 있는 것은 아니다. 객체를 만들려면 그에 앞서 빌더부터 만들어야 한다. 빌더 생성 비용이 크지는 않지만.. 성능에 민감한 상황에서는 문제가 될수 있따.</p><blockquote><p>핵심 - 생성자나 정적 팩터리가 처리해야 할 매개변수가 많다면 빌더 패턴을 선택하는 것이 낫다. 빌더는 점층적 생성자보다 클라이언트 코드를 읽고 쓰기가 훨씬 간결하고 자바빈즈보다 훨씬 안전하다.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;생성자에-매개변수가-많다면-빌더를-고려하라&quot;&gt;&lt;a href=&quot;#생성자에-매개변수가-많다면-빌더를-고려하라&quot; class=&quot;headerlink&quot; title=&quot;생성자에 매개변수가 많다면 빌더를 고려하라&quot;&gt;&lt;/a&gt;생성자에 매개변수가 많다면 빌더
      
    
    </summary>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Docker Container timezone setting</title>
    <link href="https://beanbroker.github.io/2018/11/17/etc/docker_timezone/"/>
    <id>https://beanbroker.github.io/2018/11/17/etc/docker_timezone/</id>
    <published>2018-11-17T08:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Docker-Container-timezone-setting"><a href="#Docker-Container-timezone-setting" class="headerlink" title="Docker Container timezone setting"></a>Docker Container timezone setting</h1><p>도커 컨테이너 시간이 디폴트로 UTC에 맞추어져 있음을.. 최근 깨달았다..</p><p>변경방법은 아래와 같다.</p><ol><li><p>접속한 컨테이너id 획득</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></li><li><p>docker container 접속</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it containerId /bin/bash</span><br></pre></td></tr></table></figure><ol start="3"><li><p>timezone 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/timezone</span><br></pre></td></tr></table></figure></li><li><p>timezone 변경</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dpkg-reconfigure tzdata</span><br><span class="line"></span><br><span class="line">6 엔터</span><br><span class="line"></span><br><span class="line">68 엔터(서울)</span><br></pre></td></tr></table></figure><ol start="5"><li><p>확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/timezone</span><br><span class="line"></span><br><span class="line">--&gt; Asia/Seoul</span><br></pre></td></tr></table></figure></li><li><p>docker containerId restart</p></li></ol><p>다시 컨테이너 접속하여 확인하면 정상적으로 컨테이너의 시간이 바뀜을 확인할수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Docker-Container-timezone-setting&quot;&gt;&lt;a href=&quot;#Docker-Container-timezone-setting&quot; class=&quot;headerlink&quot; title=&quot;Docker Container timezone 
      
    
    </summary>
    
      <category term="Docker" scheme="https://beanbroker.github.io/categories/Docker/"/>
    
      <category term="timezone" scheme="https://beanbroker.github.io/categories/Docker/timezone/"/>
    
    
      <category term="Docker" scheme="https://beanbroker.github.io/tags/Docker/"/>
    
      <category term="timezone" scheme="https://beanbroker.github.io/tags/timezone/"/>
    
  </entry>
  
  <entry>
    <title>함수형 프로그래밍 thread Safe (kotlin sample)</title>
    <link href="https://beanbroker.github.io/2018/11/17/Kotlin/concept_functional/"/>
    <id>https://beanbroker.github.io/2018/11/17/Kotlin/concept_functional/</id>
    <published>2018-11-17T06:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.326Z</updated>
    
    <content type="html"><![CDATA[<h2 id="함수형-프로그래밍"><a href="#함수형-프로그래밍" class="headerlink" title="함수형 프로그래밍"></a>함수형 프로그래밍</h2><ol><li>변경 가능한 상태를 Immutab으로 만들어 side effect 최소화가 가능하다.</li><li>동시성 작업을 안전하게 구현할수 있다.</li></ol><h2 id="함수형-프로그래밍-gt-thread-safe"><a href="#함수형-프로그래밍-gt-thread-safe" class="headerlink" title="함수형 프로그래밍 - &gt; thread safe"></a>함수형 프로그래밍 - &gt; thread safe</h2><p>함수를 일반 값처럼 다룰수 있따. 함수를 변수에 저장하고 함수를 인자로 다른 함수에 전달할수 있으며, 함수에서 새로운 함수를 만들어 반환할수 있따</p><p>##불변성<br>내부상태가 적대로 바뀌지 않는 불변객체를 사용에 프로그램을 작성한다</p><p>function plus(a,b){<br>    return a+b;<br>}</p><p>plus(1,2) = 3<br>plus(1,2) = 3</p><p>매번 같은 값을 넣어도 같은 결과가 리턴 - &gt; 참조 무결성 또는 순수성</p><h2 id="메소드-vs-함수-function"><a href="#메소드-vs-함수-function" class="headerlink" title="메소드 vs 함수(function)"></a>메소드 vs 함수(function)</h2><blockquote><p>메소드</p></blockquote><pre><code>- 특정 컨텍스트에 같혀서- 자기 상태값이 복사되어 수정</code></pre><blockquote><p>함수</p></blockquote><pre><code>- 좀더 포괄적- 함수 단위로 잘게 쪼개서 조합(심지어 if,else도 함수로)- 넘어온 객체를 복사함 -&gt; 즉 객체를 참조하는 값이 바뀌기 때문에 데이터의 무결성이 보장</code></pre><h1 id="Kotlin-변수"><a href="#Kotlin-변수" class="headerlink" title="Kotlin 변수"></a>Kotlin 변수</h1><p>변경 가능한 변수와 별견 불가능한 변수</p><blockquote><p>val (value)</p></blockquote><ul><li>변경이 불가능한 immutable 참조를 저장한 변수. 자바로 말하자면 final</li></ul><blockquote><p>var (variable)</p></blockquote><ul><li>변경 가능한 참조. 자바의 일반변수</li></ul><p>val 변수는 블록을 실행할때 정확히 한번만 초기화 해야 한다.</p><p>ex)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val mag : String</span><br><span class="line">if(check())&#123;</span><br><span class="line">    meg = &quot;Succes&quot;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    msg =&quot;Failed&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>val참조 자체는 불변일지라도 그 참조가 가리키는 객체의 내부 값은 변경 될수 있다!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex) val languages = arrayListOf(&quot;Eng&quot;)</span><br><span class="line">languages.add(&quot;Korean&quot;)</span><br></pre></td></tr></table></figure></p><p>var 키워드를 사용하면 변수의 값을 변경할수 잇지만 변수의 타입은 고정돼 바뀌지 않는다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var answer =42</span><br><span class="line">answer =&quot;no answer&quot;</span><br></pre></td></tr></table></figure><p>위와같은 코드는 컴파일할수 없다.</p><blockquote><p>코틀린은 컴파일시 타입추론을 한다. 자바와 마찬가지로 코틀린도 정적 타입 지정 언어(모든 프로그램 구성 요소의 타입을 컴파일 시점에 알수 있고 프로그램 안에서 객체의 필드나 메소드를 사용할때 마다 컴파일러가 타입을 검증)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;함수형-프로그래밍&quot;&gt;&lt;a href=&quot;#함수형-프로그래밍&quot; class=&quot;headerlink&quot; title=&quot;함수형 프로그래밍&quot;&gt;&lt;/a&gt;함수형 프로그래밍&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;변경 가능한 상태를 Immutab으로 만들어 side effect
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
      <category term="functional" scheme="https://beanbroker.github.io/categories/Kotlin/functional/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
      <category term="functional" scheme="https://beanbroker.github.io/tags/functional/"/>
    
  </entry>
  
  <entry>
    <title>AWS elastic beanstalk spring boot jar deployment</title>
    <link href="https://beanbroker.github.io/2018/11/17/Spring/spring_elasticBeanstalk1/"/>
    <id>https://beanbroker.github.io/2018/11/17/Spring/spring_elasticBeanstalk1/</id>
    <published>2018-11-17T04:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-boot-jar-deployment-to-aws1"><a href="#Spring-boot-jar-deployment-to-aws1" class="headerlink" title="Spring boot jar deployment to aws1"></a>Spring boot jar deployment to aws1</h1><p>개발자로서.. 아래의 고충은 누구나 가지고 있다..</p><ol><li><p>코드의 배포, 프로비저닝, 관리가 복잡하고 코딩도 힘들다…ㅠ</p></li><li><p>서버, 데이터베이스, 로드 밸런서, 방화벽 그리고 복잡한 네트워크를 구성하고 관리하하는데 전문성과 시간이 필요하다… 하지만 항상 부족..</p></li><li><p>어플리케이션의 스케일 아웃.인을 자동화 해야하는데 이걸 어떻게 하면 좋을지?</p></li></ol><h2 id="elastic-beanstalk는"><a href="#elastic-beanstalk는" class="headerlink" title="elastic beanstalk는?"></a>elastic beanstalk는?</h2><blockquote><p>웹어플리케이션/웹 서비스를 배포, 확장, 관리하는데 있어 쉽게빠르게 할수 있도록 돕는 완전 관리형 서비스!</p></blockquote><h2 id="elastic-beanstalk-인프로스트럭처-스택-구성-과정"><a href="#elastic-beanstalk-인프로스트럭처-스택-구성-과정" class="headerlink" title="elastic beanstalk 인프로스트럭처 스택 구성 과정"></a>elastic beanstalk 인프로스트럭처 스택 구성 과정</h2><ul><li>로드 벨런서를 더하고</li><li>오토 스케일링 그룹을 설정하고</li><li>인스터스들을 시작하고</li><li>모든 구성요소를 엮는다.</li><li>DNS 설정을 통해 외부에 publish한다.</li><li><p>로그와 앱 버젼들에 대한 설정은 모두 s3에 저장이 가능!</p><p>위를 통해<br>사용자는 애플리케이션 개발 코드에만 집중할수 있다.</p></li></ul><p>다음장에 실제로 sample jar를 배포를 실습하자</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-boot-jar-deployment-to-aws1&quot;&gt;&lt;a href=&quot;#Spring-boot-jar-deployment-to-aws1&quot; class=&quot;headerlink&quot; title=&quot;Spring boot jar deployme
      
    
    </summary>
    
      <category term="AWS" scheme="https://beanbroker.github.io/categories/AWS/"/>
    
      <category term="elastic beanstalk" scheme="https://beanbroker.github.io/categories/AWS/elastic-beanstalk/"/>
    
      <category term="SpringBoot" scheme="https://beanbroker.github.io/categories/AWS/elastic-beanstalk/SpringBoot/"/>
    
    
      <category term="AWS" scheme="https://beanbroker.github.io/tags/AWS/"/>
    
      <category term="elastic beanstalk" scheme="https://beanbroker.github.io/tags/elastic-beanstalk/"/>
    
      <category term="SpringBoot" scheme="https://beanbroker.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin class</title>
    <link href="https://beanbroker.github.io/2018/11/11/Kotlin/kotlin_class/"/>
    <id>https://beanbroker.github.io/2018/11/11/Kotlin/kotlin_class/</id>
    <published>2018-11-11T04:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin-class-1부"><a href="#Kotlin-class-1부" class="headerlink" title="Kotlin class 1부"></a>Kotlin class 1부</h1><p>자바와 달리 코틀린 선언은 기본적으로 final이며 public이다.</p><p>게다가 중첩 클래스는 기본적으로는 내부 클래스가 아니다. 즉 코르린 중첩 클래스에는 외부 클래스에 대한 참조가 없다.</p><p>코틀린 인터페이스는 자바 8 인터페이스와 비슷하다. 코틀린 인터페이스 안에서는 추상 메소드뿐 아니라 구현이 있는 메소드도 정의 가 가능(자바8의 디폴트 메소드와 유사)<br>다만 인터페이스에는 아무런 상태도 들어갈수 없다!.</p><blockquote><p>ex) interface 구현 방법<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">interface Calculator&#123;</span><br><span class="line">    fun add()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Sample : Calculator&#123;</span><br><span class="line">    override fun add() = println(&quot;add!!!&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>코틀린에서 클래스 이름 뒤에 : 을 붙이고 인터페이스와 클래스 이름을 적는 것으로 클래스 확장과 인터페이스 구현을 모두 처리한다.</p><h2 id="코틀린-클래스에서-상속과-구현을-쓰려면-아래의-정보를-알아햐-한다"><a href="#코틀린-클래스에서-상속과-구현을-쓰려면-아래의-정보를-알아햐-한다" class="headerlink" title="코틀린 클래스에서 상속과 구현을 쓰려면? 아래의 정보를 알아햐 한다."></a>코틀린 클래스에서 상속과 구현을 쓰려면? 아래의 정보를 알아햐 한다.</h2><p>자바의 클래스와 메소드는 기본적으로 상속에 대해 열려 있지만 코틀린의 클래스와 메소드는 기본적으로 final이다. 어떤 클래스의 상속을 허용하려면 클래스 앞에 open변경자를 붙여야 한다. 그와 더불러 오버라이드를 허용하고 싶은 메소드나 프로퍼티 앞에도 open 변경자를 붙여야 한다.</p><blockquote><p>열린 클래스 정의하기</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">open class Sample : Calculator&#123;</span><br><span class="line"></span><br><span class="line">    fun something() &#123;&#125; </span><br><span class="line">    // 이 함수는 final, 하위클래스가 이 메소드를 override할수 없음</span><br><span class="line"></span><br><span class="line">    open fund doSomethin()&#123;&#125;</span><br><span class="line">    // 이 함수는 open변경자를 ㅌ몽해 열려 있다. 하위클래스에서 이메소드를 오버라이드해도 된다.</span><br><span class="line"></span><br><span class="line">    override fun click() &#123;&#125;</span><br><span class="line">    //이 함수는 상위 클래스에서 선언된 열려있는 메소드를 오버라이드 한다. 오버라이드한 메소드는 기본적으로 열려있다.</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>오버라이드 금지하기<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">open class Sample : Calculator&#123;</span><br><span class="line"></span><br><span class="line">    final override fun click() &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>상속을 제어하는 변경자</p><table><thead><tr><th>변경자</th><th>변경자가 붙으면</th><th>설명</th></tr></thead><tbody><tr><td>final</td><td>오버라이드 불가</td><td>클래스 멤버의 기본 변경자</td></tr><tr><td>open</td><td>오버라이드 가능</td><td>open 명시에만 오버라이드가 가능</td></tr><tr><td>abstract</td><td>반드시 오버라이드</td><td>추상클래스에서만 이 변경자를 붙일수 있다.</td></tr><tr><td>override</td><td>상위 클래스나 상위 인스턴스의 멤버를 오버라이드 중</td><td>하위클래스의 오버라이드를 금지하려면 final 을 명시하자</td></tr></tbody></table><p>참고서적 </p><ul><li>Kotlin In ACTION</li><li>에이콘 출판사</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kotlin-class-1부&quot;&gt;&lt;a href=&quot;#Kotlin-class-1부&quot; class=&quot;headerlink&quot; title=&quot;Kotlin class 1부&quot;&gt;&lt;/a&gt;Kotlin class 1부&lt;/h1&gt;&lt;p&gt;자바와 달리 코틀린 선언은 기본적
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin 변수</title>
    <link href="https://beanbroker.github.io/2018/11/11/Kotlin/kotlin_value/"/>
    <id>https://beanbroker.github.io/2018/11/11/Kotlin/kotlin_value/</id>
    <published>2018-11-11T02:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Kotlin-변수"><a href="#Kotlin-변수" class="headerlink" title="Kotlin 변수"></a>Kotlin 변수</h1><p>변경 가능한 변수와 별견 불가능한 변수</p><blockquote><p>val (value)</p></blockquote><ul><li>변경이 불가능한 immutable 참조를 저장한 변수. 자바로 말하자면 final</li></ul><blockquote><p>var (variable)</p></blockquote><ul><li>변경 가능한 참조. 자바의 일반변수</li></ul><p>val 변수는 블록을 실행할때 정확히 한번만 초기화 해야 한다.</p><p>ex)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">val mag : String</span><br><span class="line">if(check())&#123;</span><br><span class="line">    meg = &quot;Succes&quot;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">    msg =&quot;Failed&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>val참조 자체는 불변일지라도 그 참조가 가리키는 객체의 내부 값은 변경 될수 있다!<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ex) val languages = arrayListOf(&quot;Eng&quot;)</span><br><span class="line">languages.add(&quot;Korean&quot;)</span><br></pre></td></tr></table></figure></p><p>var 키워드를 사용하면 변수의 값을 변경할수 잇지만 변수의 타입은 고정돼 바뀌지 않는다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var answer =42</span><br><span class="line">answer =&quot;no answer&quot;</span><br></pre></td></tr></table></figure><p>위와같은 코드는 컴파일할수 없다.</p><blockquote><p>코틀린은 컴파일시 타입추론을 한다. 자바와 마찬가지로 코틀린도 정적 타입 지정 언어(모든 프로그램 구성 요소의 타입을 컴파일 시점에 알수 있고 프로그램 안에서 객체의 필드나 메소드를 사용할때 마다 컴파일러가 타입을 검증)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Kotlin-변수&quot;&gt;&lt;a href=&quot;#Kotlin-변수&quot; class=&quot;headerlink&quot; title=&quot;Kotlin 변수&quot;&gt;&lt;/a&gt;Kotlin 변수&lt;/h1&gt;&lt;p&gt;변경 가능한 변수와 별견 불가능한 변수&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/categories/Kotlin/"/>
    
    
      <category term="Kotlin" scheme="https://beanbroker.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot with Profile</title>
    <link href="https://beanbroker.github.io/2018/11/10/Spring/spring_profile/"/>
    <id>https://beanbroker.github.io/2018/11/10/Spring/spring_profile/</id>
    <published>2018-11-10T12:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="스프링-부트-Profle"><a href="#스프링-부트-Profle" class="headerlink" title="스프링 부트 @Profle"></a>스프링 부트 @Profle</h2><p>profile을 통해 if(설정값이면 다르게 수행)을 쉽고 편하게 수행할수 있다.</p><p>소스 참고<br><a href="https://github.com/beanbroker/beanbroker_spring" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/beanbroker/beanbroker_spring</a></p><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><p>application.properties<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spring.profiles.active=dev</span><br></pre></td></tr></table></figure></p><p>추가</p><p>Config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Profile(&quot;!live&quot;)</span><br><span class="line">@Configuration</span><br><span class="line">public class RequestAppConfig implements WebMvcConfigurer &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    private CustomRequestInterceptor customRequestInterceptor;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void addInterceptors(InterceptorRegistry registry) &#123;</span><br><span class="line">//        registry.addInterceptor(customRequestInterceptor)</span><br><span class="line">////                .addPathPatterns(&quot;/**/log-incoming-request/**/&quot;);;</span><br><span class="line">//                .addPathPatterns(&quot;/*/**&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>@Profile을 활용하여 특정 Config가 등록이 되지 않게 할수 있다.</p><p>!live &lt;— 상용 프로덕트가 아니면으로 이해하면 되며 !을 쓰게 될경우 부정의 의미를 가지고 있다.</p><p>잘활용하면 좋다. 예를들어 개발서버에서는 작동해야 하고 상용서버에서 작동하지 말아야할 기능이 있을 경우 편하다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;스프링-부트-Profle&quot;&gt;&lt;a href=&quot;#스프링-부트-Profle&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 @Profle&quot;&gt;&lt;/a&gt;스프링 부트 @Profle&lt;/h2&gt;&lt;p&gt;profile을 통해 if(설정값이면 다르게
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Profile" scheme="https://beanbroker.github.io/categories/Spring/Profile/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Profile" scheme="https://beanbroker.github.io/tags/Profile/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot with MQ</title>
    <link href="https://beanbroker.github.io/2018/11/10/Spring/messageQ/"/>
    <id>https://beanbroker.github.io/2018/11/10/Spring/messageQ/</id>
    <published>2018-11-10T09:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="메시지-큐"><a href="#메시지-큐" class="headerlink" title="메시지 큐"></a>메시지 큐</h1><p>MOM(Message Oriented MiddleWare) 은 비동기 메시지를 사용하는 다른 응용 프로그램 사이에서 데이터 송수신을 의미.<br>MOM을 구현한 시스템을 메시지 큐(MQ)라 한다.</p><p>메시지 큐의 장점</p><ol><li>비동기 - Queue에 밀어 넣고 추후 처리가 가능하다</li><li>어플리케이션과 분리하여 사용이 가능하다.</li><li><p>다른 어플리케이션 또는 프로세스에서 큐에 메시지를 보내 통신을 할수 있다.</p><h2 id="JMS란"><a href="#JMS란" class="headerlink" title="JMS란?"></a>JMS란?</h2><p>MOM을 자바에서 지원하는 표준 API입니다.</p></li></ol><h2 id="오픈-소스-메시지-큐"><a href="#오픈-소스-메시지-큐" class="headerlink" title="오픈 소스 메시지 큐"></a>오픈 소스 메시지 큐</h2><p>RabbitMQ, ActiveMQ, ZeroMQ, Kafka</p><p>현재 aws에서 ActiveMQ, Kafka는 풀리하게 지원한다.<br>RabiitMQ를 aws환경에서 쓰기위해선 별도의 엘리스틱 빈스토크에 올려서 써야한다…. 왜…아직 지원을 안하는거지…</p><p>위의 큐 간단한 비교 인기순<br><a href="https://stackshare.io/stackups/activemq-vs-kafka-vs-rabbitmq" rel="external nofollow noopener noreferrer" target="_blank">https://stackshare.io/stackups/activemq-vs-kafka-vs-rabbitmq</a></p><h2 id="예제를-만들어보자"><a href="#예제를-만들어보자" class="headerlink" title="예제를 만들어보자"></a>예제를 만들어보자</h2><p><a href="https://github.com/beanbroker/beanbroker_spring.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/beanbroker/beanbroker_spring.git</a> 을 클론하면 소스가 있다.</p><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--message q--&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-activemq&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-jms&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.activemq&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;activemq-broker&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>위의 디펜던시 추가</p><h2 id="CONSUMER-PRODUCER-LISTENER"><a href="#CONSUMER-PRODUCER-LISTENER" class="headerlink" title="CONSUMER, PRODUCER, LISTENER"></a>CONSUMER, PRODUCER, LISTENER</h2><p>Consumer<br>말그대로 메시지 수신하여 저장</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class JmsConsumer &#123;</span><br><span class="line">private static Logger log = LoggerFactory.getLogger(JmsConsumer.class);</span><br><span class="line">@Autowired</span><br><span class="line">private MessageStorage customerStorage;</span><br><span class="line"></span><br><span class="line">@JmsListener(destination = &quot;$&#123;beanbroker.activemq.queue&#125;&quot;, containerFactory=&quot;jsaFactory&quot;)</span><br><span class="line">public void receive(Customer customer)&#123;</span><br><span class="line">log.debug(&quot;Recieved Message: &quot; + customer);</span><br><span class="line">customerStorage.add(customer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Producer<br>말그대로 메시지를 보냄</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class JmsProducer &#123;</span><br><span class="line">private static Logger log = LoggerFactory.getLogger(JmsProducer.class);</span><br><span class="line">@Autowired</span><br><span class="line">JmsTemplate jmsTemplate;</span><br><span class="line"></span><br><span class="line">@Value(&quot;$&#123;beanbroker.activemq.queue&#125;&quot;)</span><br><span class="line">String queue;</span><br><span class="line"></span><br><span class="line">public void send(Customer customer)&#123;</span><br><span class="line"></span><br><span class="line">log.debug(&quot;send data : &#123;&#125; &quot; , customer.toString());</span><br><span class="line">jmsTemplate.convertAndSend(queue, customer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Listener</p><p>해당 채널 큐에 메시지가 들어옴을 기다리며 들어왔을 경우 작동<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class JmsListener &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    private static Logger log = LoggerFactory.getLogger(JmsListener.class);</span><br><span class="line">    @org.springframework.jms.annotation.JmsListener(destination = &quot;beanbroker-queue&quot;, containerFactory = &quot;jsaFactory&quot;)</span><br><span class="line">    public void receiveMessage(Customer customer)&#123;</span><br><span class="line"></span><br><span class="line">        log.info(&quot;test &#123;&#125;&quot; , customer.toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">```  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### MqController</span><br></pre></td></tr></table></figure></p><p>@RestController<br>public class MqController {</p><pre><code>@AutowiredJmsProducer jmsProducer;@Autowiredprivate MessageStorage messageStorage;@PostMapping(value=&quot;/mq/customer&quot;)@ResponseStatus(HttpStatus.CREATED)public Customer postCustomer(@RequestBody Customer customer){    jmsProducer.send(customer);    return customer;}@GetMapping(value=&quot;/mq/customers&quot;)public List&lt;Customer&gt; getAll(){    List&lt;Customer&gt; customers = messageStorage.getAll();    return customers;}@DeleteMapping(value=&quot;/mq/customers/clear&quot;)public String clearCustomerStorage() {    messageStorage.clear();    return &quot;Clear All CustomerStorage!&quot;;}</code></pre><p>}</p><p><code>`</code><br>post시 큐에 적재,<br>get시 현재 큐에 들어가 있는 데이터 read<br>delete시 큐에 들어가있는 데이터 clear</p><p>메시지 큐를 사용하여 다양한 서비스에 이용할수 있다. 예를들어<br>데이터를 저장하고 다른 일을 하나의 request에서 다 처리하게 될경우 블록상태가 된다. 자원은 한정적인데 해당 자원을 효율적으로 쓰는 방법을 연구해야 한다.</p><p>큐를 사용하면 좋을 것 같은?</p><ol><li><p>로그를 저장할 경우<br>하나의 어플리케이션에서 로그찍을 데이터를 큐에 적재 -&gt; 다른 어플리케이션에서 큐를 listen하다 듣게 될경우 별도의 S3같은 서비스에 저장</p></li><li><p>푸쉬서비스<br>위의 로그와 동일하게 만들면 될것 같다.</p></li></ol><h2 id="AWS-with-큐"><a href="#AWS-with-큐" class="headerlink" title="AWS with 큐"></a>AWS with 큐</h2><p>aws에서 버튼 몇번만 누르면 생성되는 sqs 서비스가 있다. sqs와 Lamda서비스를 이용하게 될경우 재미난걸 만들어 낼수 있다. sqs를 검색하여 찾아보니 성능이 많이 뛰어나지 않음을 알수 있다. 람다를 쓰게 될경우 노드를 조금만 공부하여 쓰자! 다양한 언어들을 지원하나 자바를 쓸경우 느리다(통계가 그러하다). 파이썬 또는 노드를 선택하여 쓰자</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;메시지-큐&quot;&gt;&lt;a href=&quot;#메시지-큐&quot; class=&quot;headerlink&quot; title=&quot;메시지 큐&quot;&gt;&lt;/a&gt;메시지 큐&lt;/h1&gt;&lt;p&gt;MOM(Message Oriented MiddleWare) 은 비동기 메시지를 사용하는 다른 응용 프로그
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="JMS" scheme="https://beanbroker.github.io/categories/Spring/JMS/"/>
    
      <category term="MQ" scheme="https://beanbroker.github.io/categories/Spring/JMS/MQ/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="JMS" scheme="https://beanbroker.github.io/tags/JMS/"/>
    
      <category term="MQ" scheme="https://beanbroker.github.io/tags/MQ/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot MongodDb config</title>
    <link href="https://beanbroker.github.io/2018/11/04/Spring/spring_mongo/"/>
    <id>https://beanbroker.github.io/2018/11/04/Spring/spring_mongo/</id>
    <published>2018-11-04T07:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="스프링-부트-몽고디비-설정"><a href="#스프링-부트-몽고디비-설정" class="headerlink" title="스프링 부트 몽고디비 설정"></a>스프링 부트 몽고디비 설정</h1><h3 id="1-JPA-EnableMongoAuditing를-쓰지-않을경우-아래와같이-설정파일을-셋해주면-정상적으로-몽고디비가-붙는다"><a href="#1-JPA-EnableMongoAuditing를-쓰지-않을경우-아래와같이-설정파일을-셋해주면-정상적으로-몽고디비가-붙는다" class="headerlink" title="1. JPA EnableMongoAuditing를 쓰지 않을경우 아래와같이 설정파일을 셋해주면 정상적으로 몽고디비가 붙는다."></a>1. JPA EnableMongoAuditing를 쓰지 않을경우 아래와같이 설정파일을 셋해주면 정상적으로 몽고디비가 붙는다.</h3><h2 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">spring.data.mongodb.host=localhost</span><br><span class="line">spring.data.mongodb.port=port</span><br><span class="line">spring.data.mongodb.database=dbname</span><br><span class="line">spring.data.mongodb.username=user</span><br><span class="line">spring.data.mongodb.password=1234</span><br><span class="line">spring.data.mongodb.authentication-database=dbname</span><br></pre></td></tr></table></figure><h3 id="2-JPA-EnableMongoAuditing를-쓸경우"><a href="#2-JPA-EnableMongoAuditing를-쓸경우" class="headerlink" title="2. JPA EnableMongoAuditing를 쓸경우"></a>2. JPA EnableMongoAuditing를 쓸경우</h3><p>위의 설정파일을 추가 후 AbstractMongoConfiguration 클래스 생성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableMongoRepositories(basePackageClasses = ActivityDataRepository.class)</span><br><span class="line">@EnableMongoAuditing(modifyOnCreate=false)</span><br><span class="line">public class MongoConfig extends AbstractMongoConfiguration &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.data.mongodb.database&#125;&quot;)</span><br><span class="line">    private String dbName;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.data.mongodb.host&#125;&quot;)</span><br><span class="line">    private String mongoHost;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.data.mongodb.port&#125;&quot;)</span><br><span class="line">    private int mongoPort;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.data.mongodb.username&#125;&quot;)</span><br><span class="line">    private String username;</span><br><span class="line"></span><br><span class="line">    @Value(&quot;$&#123;spring.data.mongodb.password&#125;&quot;)</span><br><span class="line">    private String password;</span><br><span class="line">    @Override</span><br><span class="line">    protected String getDatabaseName() &#123;</span><br><span class="line">        return this.dbName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Mongo mongo() throws Exception &#123;</span><br><span class="line">        MongoCredential credential = MongoCredential.createCredential(username, dbName, password.toCharArray());</span><br><span class="line"></span><br><span class="line">        ServerAddress serverAddress = new ServerAddress(mongoHost, mongoPort);</span><br><span class="line">        return new MongoClient(serverAddress, Arrays.asList(credential));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public MongoExceptionTranslator exceptionTranslator() &#123;</span><br><span class="line">        return new MongoExceptionTranslator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Bean</span><br><span class="line">    public LoggingEventListener logginEventListener()&#123;</span><br><span class="line">        return new LoggingEventListener();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="EnableMongoAuditing를-쓰게되면"><a href="#EnableMongoAuditing를-쓰게되면" class="headerlink" title="EnableMongoAuditing를 쓰게되면?"></a>EnableMongoAuditing를 쓰게되면?</h2><p>auditing은 몽고디비뿐만 아니라 다른 디비를 쓸경우 audit을 지원한다.<br>audit은 감시한다라는 뜻을 가지고 있으며 aop이다. </p><p>위를 쓰게 될경우 entity에 추가</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@CreatedBy</span><br><span class="line">private String createBy;</span><br><span class="line"></span><br><span class="line">@CreatedDate</span><br><span class="line">private Date createdAt;</span><br><span class="line"></span><br><span class="line">@LastModifiedBy</span><br><span class="line">private String updatedBy;</span><br><span class="line"></span><br><span class="line">@LastModifiedDate</span><br><span class="line">private Date updatedaAt;</span><br></pre></td></tr></table></figure><p>auditor추가 (시큐리티)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Component(&quot;activityAuditor&quot;)</span><br><span class="line">public class ActivityAuditor implements AuditorAware&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String getCurrentAuditor() &#123;</span><br><span class="line">        return &quot;server&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위와같이 셋팅하게 될경우 디비에 생성 및 업데이트 시간을 어플리케이션 레이어에서 핸들링 하게 된다.<br>생성 또는 업데이트시 by -&gt; server데이터 로우가 생기며 추후 운영시에 운영개발자가 직접 디비를 만졌는지 또는 서버에서 디비가 핸들링되었는지 알수 있는 장점을 가지고 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;스프링-부트-몽고디비-설정&quot;&gt;&lt;a href=&quot;#스프링-부트-몽고디비-설정&quot; class=&quot;headerlink&quot; title=&quot;스프링 부트 몽고디비 설정&quot;&gt;&lt;/a&gt;스프링 부트 몽고디비 설정&lt;/h1&gt;&lt;h3 id=&quot;1-JPA-EnableMongo
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="MongoDb" scheme="https://beanbroker.github.io/categories/Spring/MongoDb/"/>
    
      <category term="config" scheme="https://beanbroker.github.io/categories/Spring/MongoDb/config/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="MongoDb" scheme="https://beanbroker.github.io/tags/MongoDb/"/>
    
      <category term="config" scheme="https://beanbroker.github.io/tags/config/"/>
    
  </entry>
  
  <entry>
    <title>이터레이터와 제너레이터</title>
    <link href="https://beanbroker.github.io/2018/09/02/JavaScript/iterator/"/>
    <id>https://beanbroker.github.io/2018/09/02/JavaScript/iterator/</id>
    <published>2018-09-02T11:10:00.000Z</published>
    <updated>2019-07-07T08:12:45.325Z</updated>
    
    <content type="html"><![CDATA[<h1 id="이터레이더와-제너레이터-ES6"><a href="#이터레이더와-제너레이터-ES6" class="headerlink" title="이터레이더와 제너레이터 ES6"></a>이터레이더와 제너레이터 ES6</h1><p>ES6에서! 이터레이터와 제너레이터가 도입됨.</p><p>제너레이터는 간단히 이터레이터에 의존하는 개념!</p><p>배열은 이터러블 객체의 좋은 예이다</p><blockquote><p>이터레이터 예제 (배열) 및 호출해보기</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">const arrays = [</span><br><span class="line"></span><br><span class="line">    &quot;aaaa&quot;,</span><br><span class="line">    &quot;bbbb&quot;,</span><br><span class="line">    &quot;cccc&quot;,</span><br><span class="line">    &quot;dddd&quot;,</span><br><span class="line">    &quot;eeee&quot;,</span><br><span class="line">    &quot;ffff&quot;,</span><br><span class="line">    &quot;gggg&quot;,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const iteratorObject = arrays.values();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iteratorObject.next();</span><br><span class="line">-&gt; &#123;value: &quot;aaaa&quot;, done: false&#125;</span><br><span class="line">iteratorObject.next();</span><br><span class="line">-&gt; &#123;value: &quot;bbbb&quot;, done: false&#125;</span><br><span class="line">iteratorObject.next();</span><br><span class="line">-&gt; &#123;value: &quot;cccc&quot;, done: false&#125;</span><br><span class="line">iteratorObject.next();</span><br><span class="line">-&gt; &#123;value: &quot;dddd&quot;, done: false&#125;</span><br><span class="line">iteratorObject.next();</span><br><span class="line">-&gt; &#123;value: &quot;eeee&quot;, done: false&#125;</span><br><span class="line">iteratorObject.next();</span><br><span class="line">-&gt; &#123;value: &quot;ffff&quot;, done: false&#125;</span><br><span class="line">iteratorObject.next();</span><br><span class="line">-&gt; &#123;value: &quot;gggg&quot;, done: false&#125;</span><br><span class="line">iteratorObject.next();</span><br><span class="line">-&gt; &#123;value: undefined, done: true&#125;</span><br><span class="line">iteratorObject.next();</span><br><span class="line">-&gt; &#123;value: undefined, done: true&#125;</span><br></pre></td></tr></table></figure><p>done 프로퍼티가 true로 바뀌는 것을 볼수 있다. 이터레이터의 데이터는 끝까지 읽을수 있음을 느낄수 있다.</p><blockquote><p>done 프로퍼티 활용해보기<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let test = arrays.values();</span><br><span class="line"></span><br><span class="line">let currentLocation = test.next();</span><br><span class="line"></span><br><span class="line">while(!currentLocation.done)&#123;</span><br><span class="line">    console.log(currentLocation.value);</span><br><span class="line">    currentLocation = test.next();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="제너레이터"><a href="#제너레이터" class="headerlink" title="제너레이터"></a>제너레이터</h2><blockquote><p>제너레이터란 이터레이터를 사용해 자신의 실행을 제어하는 함수! </p></blockquote><h3 id="일반적인-함수-vs-제너레이터"><a href="#일반적인-함수-vs-제너레이터" class="headerlink" title="일반적인 함수 vs 제너레이터"></a>일반적인 함수 vs 제너레이터</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[일반적인 함수]</span><br><span class="line">함수는 매개변수(파라미터)를 받고 값을 반환하지만, 호출할 부분에서 매개변수 외에는 함수의 실행을 제어할 방법이 전혀 없다.</span><br><span class="line">즉 함수를 호출하면 그 함수가 종료될 때까지 제어권을 완전히 넘긴다.</span><br></pre></td></tr></table></figure><p>제너레이터 2가지 새로움 개념</p><ol><li>하나의 함수의 실행을 개별적 단계로 나눔으로써 함수의 실행을 제어</li><li>실행 중인 함수와 통신</li></ol><p>제너레이터는 언제든 호출자에게 제어권을 넘길수 있다.<br>제너레이터는 호출한 즉시 실행되지 않는다. 대신 이터레이터를 반환하고, 이터레이터의 next 메서드를 호출함에 따라 실행된다.</p><p>제너레이터를 만들때 function 키워드 뒤에 애스터리스크(*)을 붙인다. 이것을 제외하면 문법은 일반적인 함수와 같다. 제너레이터에서 return외에 yield가 있음.</p><blockquote><p>제너레이터 예제 및 호출 법</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function* arrays &#123;</span><br><span class="line"></span><br><span class="line">    yield &apos;aaaa&apos;;</span><br><span class="line">    yield &apos;bbbb&apos;;</span><br><span class="line">    yield &apos;cccc&apos;;</span><br><span class="line">    yield &apos;dddd&apos;;</span><br><span class="line">    yield &apos;eeee&apos;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const iteratorObject = arrays();</span><br><span class="line">iteratorObject.next();</span><br><span class="line">iteratorObject.next();</span><br><span class="line">iteratorObject.next();</span><br><span class="line">iteratorObject.next();</span><br><span class="line">iteratorObject.next();</span><br><span class="line">iteratorObject.next();</span><br></pre></td></tr></table></figure><blockquote><p>활용 방법 </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(let a of arrays())&#123;</span><br><span class="line">    console.log(a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>실행중인 함수와 통신을 해보자 ex)</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function* test()&#123;</span><br><span class="line">    const car = yield &quot;what is your car?&quot;;</span><br><span class="line">    const color = yield &quot;what is your favorite color?&quot;;</span><br><span class="line">    return `$&#123;car&#125; 의 색은 $&#123;color&#125; 입니다`;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const t = test();</span><br></pre></td></tr></table></figure><blockquote><p>실행<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">t.next();</span><br><span class="line">-&gt; &#123;value: &quot;what is your car?&quot;, done: false&#125;</span><br><span class="line"></span><br><span class="line">t.next(&apos;good car&apos;);</span><br><span class="line">-&gt; &#123;value: &quot;what is your favorite color?&quot;, done: false&#125;</span><br><span class="line">t.next(&apos;red&apos;);</span><br><span class="line">-&gt; &#123;value: &quot;good car 의 색은 red 입니다&quot;, done: true&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>제너레이터는 =&gt; 를 쓸수 없음!!</p><p>제너레이터를 쓰게 될 경우 주요한 값을  return으로 반환하지말자!, 반환 값을 사용하려 할때는 yield를 써야 한다. 되도록 제너레이터에서 return을 쓸 때는 반환값을 쓰지 않는 습관들을 들이길 권한다!.</p><p>어디 활용할지… 나중에 바로 볼수 있게…  블로그 남김…</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;이터레이더와-제너레이터-ES6&quot;&gt;&lt;a href=&quot;#이터레이더와-제너레이터-ES6&quot; class=&quot;headerlink&quot; title=&quot;이터레이더와 제너레이터 ES6&quot;&gt;&lt;/a&gt;이터레이더와 제너레이터 ES6&lt;/h1&gt;&lt;p&gt;ES6에서! 이터레이터와 
      
    
    </summary>
    
      <category term="JavsScript" scheme="https://beanbroker.github.io/categories/JavsScript/"/>
    
    
      <category term="JavaScript" scheme="https://beanbroker.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>RestApi with sequelize 2장</title>
    <link href="https://beanbroker.github.io/2018/08/30/nodejs/restapi2/"/>
    <id>https://beanbroker.github.io/2018/08/30/nodejs/restapi2/</id>
    <published>2018-08-30T09:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2장-RestApi-Sequelize"><a href="#2장-RestApi-Sequelize" class="headerlink" title="2장 RestApi, Sequelize"></a>2장 RestApi, Sequelize</h1><p>Sequelize orm과! 좀더restful하게 api를 만들어보자! </p><h2 id="에러핸들러가-없다"><a href="#에러핸들러가-없다" class="headerlink" title="에러핸들러가 없다"></a>에러핸들러가 없다</h2><blockquote><p>셋팅</p></blockquote><p><a href="https://beanbroker.github.io/2018/08/29/nodejs/restapi1/">https://beanbroker.github.io/2018/08/29/nodejs/restapi1/</a> 참고</p><h3 id="1-에러-처리"><a href="#1-에러-처리" class="headerlink" title="1) 에러 처리"></a>1) 에러 처리</h3><blockquote><p>/service/userread.service.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const exec = async (id) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.findById(id);</span><br><span class="line">    //이부분 추가</span><br><span class="line">    if (!user) &#123;</span><br><span class="line">        throw new Error(&apos;NONE_EXISTENCE_USER&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>유저가 존재하지 않으면 에러 Throw하게 되면 router catch부분에 잡게됨</p><p>기본 제공 Error Object는<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">interface Error &#123;</span><br><span class="line">    name: string;</span><br><span class="line">    message: string;</span><br><span class="line">    stack?: string;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>위와같이 생겼다.</p><p>router에 수정없이 진행하게 될경우 정확한 메시지를 전달받을 수가 없다.</p><p>router수정</p><blockquote><p>/routes/user.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    useReadService.exec(req.params.id)</span><br><span class="line">        .then((user) =&gt; &#123;</span><br><span class="line">            console.log(user);</span><br><span class="line">            console.log(&apos;finish to findById&apos;);</span><br><span class="line">            res.json(user);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line"></span><br><span class="line">            //주석 처리 및 messge로 변경</span><br><span class="line">            //res.send(err);</span><br><span class="line">            res.send(err.message);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>localhost:3005/users/없는값 을 호출하게되면<br>NONE_EXISTENCE_USER 값을 받을수 있다.</p><p>무언가 허접하지 아니한가!<br>STATUS CODE와 정확한 에러 Object를 관리하게 만들어보자</p><h3 id="2-에러처리-고도화"><a href="#2-에러처리-고도화" class="headerlink" title="2) 에러처리 고도화"></a>2) 에러처리 고도화</h3><p>예측할수 있는 에러들을 error객체를 상속받아 적용해보자</p><p>root에서 components폴더 생성<br>components 폴더 안에 error폴더 생성</p><blockquote><p>/components/error.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">class InternalError extends Error&#123;</span><br><span class="line"></span><br><span class="line">    constructor(message) &#123;</span><br><span class="line">        super(message);</span><br><span class="line"></span><br><span class="line">        if (message) &#123;</span><br><span class="line">            this.alertMessage = &quot;INTERNAL_ERROR&quot;</span><br><span class="line">        &#125;</span><br><span class="line">        if (message.data) &#123;</span><br><span class="line">            this.data = message.data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.name = this.constructor.name;</span><br><span class="line">        this.status = 500;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class CommonError extends  Error&#123;</span><br><span class="line"></span><br><span class="line">    constructor(message, code)&#123;</span><br><span class="line">        super(message, code);</span><br><span class="line"></span><br><span class="line">        if(message)&#123;</span><br><span class="line">            this.alertMessage = message;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        this.code = code;</span><br><span class="line">        this.name = this.constructor.name;</span><br><span class="line">        this.status = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports =&#123;</span><br><span class="line">    InternalError,</span><br><span class="line">    CommonError,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위처럼 error상속받아서 구현</p><p>자바처럼 멤버변수 선언하여 생성자를 셋팅하는 부분이 곧? 나올예정?이란 소문이….</p><blockquote><p>/routes/users.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">//기존 get하던부분 아래오 같이 수정</span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    useReadService.exec(req.params.id)</span><br><span class="line">        .then((user) =&gt; &#123;</span><br><span class="line">            console.log(user);</span><br><span class="line">            console.log(&apos;finish to findById&apos;);</span><br><span class="line">            res.json(user);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(errorHandler(res));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//추가</span><br><span class="line">const errorHandler = (res) =&gt;&#123;</span><br><span class="line">    return (err) =&gt; &#123;</span><br><span class="line">        switch (err.name) &#123;</span><br><span class="line">            case &apos;CommonError&apos;:</span><br><span class="line">                return setResponse(res, err);</span><br><span class="line">            default:</span><br><span class="line">                return respondDefaultError(res, err);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line">//추가</span><br><span class="line">const setResponse = (res,err) =&gt; &#123;</span><br><span class="line">    if(err.code)&#123;</span><br><span class="line">        res.status(err.code).json(err)</span><br><span class="line">    &#125;</span><br><span class="line">    res.end(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>router에 setResponse와 errorHandler가 있는 것은 보기 좋지 않지만 일단 넘어가자</p><blockquote><p>/service/userread.service.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">//추가</span><br><span class="line">const &#123;CommonError&#125; = require(&apos;../../components/error/error&apos;)</span><br><span class="line"></span><br><span class="line">//수정</span><br><span class="line">const exec = async (id) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.findById(id);</span><br><span class="line">    if (!user) &#123;</span><br><span class="line">        throw new CommonError(&apos;NONE_EXISTENCE_USER&apos;, 404);</span><br><span class="line">    &#125;</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>위처럼 셋팅이 끝낫다면!</p><p>req</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">localhost:3005/users/3</span><br></pre></td></tr></table></figure><p>res</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">HTTP_STATUS = 404</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    &quot;alertMessage&quot;: &quot;NONE_EXISTENCE_USER&quot;,</span><br><span class="line">    &quot;code&quot;: 404,</span><br><span class="line">    &quot;name&quot;: &quot;CommonError&quot;,</span><br><span class="line">    &quot;status&quot;: 404</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>흠…. 물론 CommonError로 모든 에러를 던질때 code값을던질수도 있지만 좀더 세분화하게되면 좋다<br>ex)<br>NotFoundError<br>InternalError<br>등등</p><p>error값을 던질때 Http Status code값을 셋팅하는 것처럼! 정상 200대의 code를 줄때! 알맞는 Status code를 찾아보고 보내는 노력을 하자!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2장-RestApi-Sequelize&quot;&gt;&lt;a href=&quot;#2장-RestApi-Sequelize&quot; class=&quot;headerlink&quot; title=&quot;2장 RestApi, Sequelize&quot;&gt;&lt;/a&gt;2장 RestApi, Sequelize&lt;/h1
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/categories/node-js/sequelize/"/>
    
      <category term="Rest" scheme="https://beanbroker.github.io/categories/node-js/sequelize/Rest/"/>
    
    
      <category term="Rest" scheme="https://beanbroker.github.io/tags/Rest/"/>
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="https://beanbroker.github.io/2018/08/30/JavaScript/promise1/"/>
    <id>https://beanbroker.github.io/2018/08/30/JavaScript/promise1/</id>
    <published>2018-08-30T09:10:00.000Z</published>
    <updated>2019-07-07T08:12:45.326Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h1><p>콜백지옥을 해결? 도움을 주는? 프로미스</p><p>resolve : 함수 안의 처리가 끝났을 때 호출하는 콜백함수, resolve함수에는 어떠한 값도 인수로 넘길수 있으며 다음 처리를 실행하는 함수에 전달</p><p>reject : 함수 안의 처리가 실패했을 경우 호출해야하는 콜백함수, reject함수에는 어떠한 값도 인수로 넘길수 있음</p><h3 id="1-promise예제"><a href="#1-promise예제" class="headerlink" title="1) promise예제"></a>1) promise예제</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const promise1 = new Promise((resolve , reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        console.log(&quot;first&quot;);</span><br><span class="line">        resolve();</span><br><span class="line">    &#125;, 1000);</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise1.then(()=&gt;&#123;</span><br><span class="line">    console.log(&quot;second&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="2-resolve-예제"><a href="#2-resolve-예제" class="headerlink" title="2) resolve 예제"></a>2) resolve 예제</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">const promist2 = new Promise((resolve, reject)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    setTimeout(()=&gt;&#123;</span><br><span class="line">        let name = prompt(&quot;put name&quot;);</span><br><span class="line">        resolve(name);</span><br><span class="line"></span><br><span class="line">    &#125;, 1000);</span><br><span class="line">    ;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promist2.then((name) =&gt; &#123;</span><br><span class="line">    console.log(&quot;name is &quot; + name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>then</p></blockquote><p>promise.then(onFullfilled);</p><p>onFullfilled -&gt; 성공 콜백 함수 promise안의 로직이 정상적으로 끝났을 때 호출</p><h3 id="3-reject"><a href="#3-reject" class="headerlink" title="3) reject"></a>3) reject</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">const promise3= new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    setTimeout(() =&gt; &#123;</span><br><span class="line">        let n = parseInt(prompt(&quot;pun number under 10&quot;));</span><br><span class="line">        if(n &lt; 10)&#123;</span><br><span class="line">            resolve(n);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            reject(`err : $&#123;n&#125; is over 10`);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, 1000);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise3.then((num)=&gt;&#123;</span><br><span class="line">        console.log(&quot;your num : &quot; + num + &quot; is under 10 &quot;);</span><br><span class="line">    &#125;</span><br><span class="line">).catch((err) =&gt;&#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>catch</p></blockquote><p>promise.catch(onRejeted);</p><p>reject함수는 promise를 종료시킨다. reject함수가 실행되면! 당연히 then메서드에 넘긴 함수는 실행되지 않고 catch메서드가 실행</p><p>onRejected 함수는 실패 콜백함수라고 하며 promise안의 처리가 실패로 끝났을 때 호출되는 함수, 인수로 error을 받음</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h1&gt;&lt;p&gt;콜백지옥을 해결? 도움을 주는? 프로미스&lt;/p&gt;
&lt;p&gt;resolve : 함수 안의 처리가 
      
    
    </summary>
    
      <category term="JavsScript" scheme="https://beanbroker.github.io/categories/JavsScript/"/>
    
    
      <category term="JavaScript" scheme="https://beanbroker.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>RestApi with sequelize 1장</title>
    <link href="https://beanbroker.github.io/2018/08/29/nodejs/restapi1/"/>
    <id>https://beanbroker.github.io/2018/08/29/nodejs/restapi1/</id>
    <published>2018-08-29T09:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1장-RestApi-Sequelize"><a href="#1장-RestApi-Sequelize" class="headerlink" title="1장 RestApi, Sequelize"></a>1장 RestApi, Sequelize</h1><p>Sequelize3장에서 끝낸 아래문제를 해결 및<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. 서비스로직이 필요하다!</span><br><span class="line">2. 에러핸들러가 없다</span><br><span class="line">3. 통일된 res object가 없다</span><br></pre></td></tr></table></figure></p><p>Sequelize orm과! 좀더restful하게 api를 만들어보자! </p><h1 id="서비스로직이-필요하다"><a href="#서비스로직이-필요하다" class="headerlink" title="서비스로직이 필요하다!"></a>서비스로직이 필요하다!</h1><blockquote><p>셋팅</p></blockquote><ol><li>루트폴더에 service폴더 생성</li><li>service폴더 및에 user폴더 생성(도메인 폴더 생성)</li><li>기존에 쓰던 app.js, /routes/user.js수정</li></ol><blockquote><p>app.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">var createError = require(&apos;http-errors&apos;);</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line"></span><br><span class="line">const indexRouter = require(&apos;./routes/index&apos;);</span><br><span class="line">const usersRouter = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const sequelize = require(&apos;./models&apos;).sequelize;</span><br><span class="line"></span><br><span class="line">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sequelize</span><br><span class="line">    .authenticate()</span><br><span class="line">    .then(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;Connection has been established successfully.&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">        console.error(&apos;Unable to connect to the database:&apos;, err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sequelize.sync();</span><br><span class="line"></span><br><span class="line">// view engine setup</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;jade&apos;);</span><br><span class="line"></span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;));</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, indexRouter);</span><br><span class="line">app.use(&apos;/users&apos;, usersRouter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">    res.status(err.status || 404);</span><br><span class="line">    res.send(&apos;404 not found&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3005, function()&#123;</span><br><span class="line">    console.log(&apos;3005 port connected&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><hr><blockquote><p>/routes/user.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const userCreateService  =  require(&apos;../service/user/usercreate.service&apos;);</span><br><span class="line">const useReadService  =  require(&apos;../service/user/userread.service&apos;);</span><br><span class="line">const userUpdateService  =  require(&apos;../service/user/userupdate.service&apos;);</span><br><span class="line">const userDeleteService  =  require(&apos;../service/user/userdelete.service&apos;);</span><br><span class="line">const userListService  =  require(&apos;../service/user/userlist.service&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/* GET users listing. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;User Api&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.get(&apos;/list&apos;, (req,res,next)=&gt; &#123;</span><br><span class="line">    userListService.exec()</span><br><span class="line">        .then((users) =&gt; &#123;</span><br><span class="line">            console.log(users);</span><br><span class="line">            console.log(&apos;finish to findAll&apos;);</span><br><span class="line">            res.json(users);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    useReadService.exec(req.params.id)</span><br><span class="line">        .then((user) =&gt; &#123;</span><br><span class="line">            console.log(user);</span><br><span class="line">            console.log(&apos;finish to findById&apos;);</span><br><span class="line">            res.json(user);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.post(&apos;/&apos;, (req,res,next) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    userCreateService.exec(req.body)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            console.log(result);</span><br><span class="line">            console.log(&apos;finish to create&apos;);</span><br><span class="line">            res.status(201).json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.put(&apos;/:id&apos;, (req,res,next) =&gt; &#123;</span><br><span class="line">    userUpdateService.exec(req.body, req.params.id)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            console.log(result);</span><br><span class="line">            console.log(&apos;finish to update&apos;);</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">router.delete(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    userDeleteService.exec(req.params.id)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            next(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure><hr><h2 id="Rest-CRUD"><a href="#Rest-CRUD" class="headerlink" title="Rest CRUD"></a>Rest CRUD</h2><h4 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h4><p>‘비지니스 로직을 담당’</p><p>UserService처럼 하나만 만들어도 되지만 전부 쪼개서 만들자! 실제 하나의 서비스에 다양한 많은 로직을 담게 될경우 변경할경우 힘든경우가..있다.. 파일이 많이 만들어지더라도… 이렇게 해보자…</p><p>(‘use strict’을 항상 모든 js파일 맨위에 붙이자! 습관습관)</p><blockquote><p>CreateService -&gt; /service/user/usercreate.service.js </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (body) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.create(&#123;</span><br><span class="line">        name : body.name,</span><br><span class="line">        age : body.age,</span><br><span class="line">        gender : body.gender,</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ReadService  -&gt; /service/user/userread.service.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (id) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.findById(id);</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>UpdateServce -&gt; /service/user/userupdate.service.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (body, id) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.update(</span><br><span class="line">        &#123;</span><br><span class="line">            name : body.name,</span><br><span class="line">            age : body.age,</span><br><span class="line">            gender : body.gender,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            where : &#123;id : id&#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DeleteService -&gt; /service/user/userdelete.service.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (id) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const result = await User.destroy(&#123; where: &#123; id: id &#125; &#125;)</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>ListService -&gt; /service/user/userlist.service.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async () =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const userList = await User.findAll();</span><br><span class="line">    return userList</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line"></span><br><span class="line">    exec,</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위와같이 CRUD서비스를 만들어보았다. 포스트맨을 활용하여 테스트를 진행할경우 정상적으로 작동함을 확인할수 있다!</p><h3 id="간단-소스-설명"><a href="#간단-소스-설명" class="headerlink" title="간단 소스 설명"></a>간단 소스 설명</h3><p>노드로 서버를 개발을 하게될경우! 무조건 무조건 비동기로 만들어한다.. 동기로 짜도 돌아가는 것처럼 보이지만 절대 그렇게 하지말라 공식문서에도 나와있다…</p><h4 id="라우터"><a href="#라우터" class="headerlink" title="라우터"></a>라우터</h4><ol><li>router를 controller라 생각!하여 </li><li>localhost:3005/users/list로 request가 들어오면</li><li>유저리스트 서비스(비지니스로직을 담당) 데이터를 받아와서</li><li>해당데이터를 json으로 말아서 보낸다!</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">router.get(&apos;/list&apos;, (req,res,next)=&gt; &#123;</span><br><span class="line">    userListService.exec()</span><br><span class="line">        .then((users) =&gt; &#123;</span><br><span class="line">            console.log(users);</span><br><span class="line">            console.log(&apos;finish to findAll&apos;);</span><br><span class="line">            res.json(users);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="서비스"><a href="#서비스" class="headerlink" title="서비스"></a>서비스</h4><ol><li>User모델 필요</li><li>body가 param으로 넘어왔고</li><li>해당 파람맵핑하여 user생성</li><li>기다리다 생성되면 리턴<br>디비접근부분은.. async await으로 쓰는 것을 선호한다…</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;../../models&apos;).User;</span><br><span class="line">const exec = async (body) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    const user = await User.create(&#123;</span><br><span class="line">        name : body.name,</span><br><span class="line">        age : body.age,</span><br><span class="line">        gender : body.gender,</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">    return user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>코드를 짜는 모든사람들의 취향존중을 해주어야한다! 하지만 왜 그렇게 하는지는 확고히 가지고 있어야 된다 생각한다.</p><p>async, await에서는 try catch가 가능하다(퍼포먼스가 좋은지는 모름…. 사실 안써봄…)! 물론 이를 이용하여 router를 구현할수 있으나! router에 promise를 적용함을 통해 얻는 부분이 존재한다. </p><ul><li>then -&gt; 서비스로직에서 결과가 나오면!!!!!!</li><li>catch -&gt; 서비스로직에서 에러를 던지면 받는 곳!!이라 생각</li></ul><hr><h3 id="궁금점이-생기는-부분"><a href="#궁금점이-생기는-부분" class="headerlink" title="궁금점이 생기는 부분"></a>궁금점이 생기는 부분</h3><p>이렇게 코드를 짜놓고 보니 서비스로직의 공통된 부분이 있자. 객체지향언어인 자바 또는 C#으로 개발을 진행해본사람은! </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;../../models&apos;).User;</span><br></pre></td></tr></table></figure><p>상위 Object에 추상화를 꿈꿀것이다! 하지만 여기선 그럴필요가 없다!<br>찾아보니 이유인 즉슨 require로 한번 호출된 이후로 캐싱이 자동적으로 되어서 알아서 잘 처리가 된다고 한다.. (정확한 작동원리는 모름)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;1장-RestApi-Sequelize&quot;&gt;&lt;a href=&quot;#1장-RestApi-Sequelize&quot; class=&quot;headerlink&quot; title=&quot;1장 RestApi, Sequelize&quot;&gt;&lt;/a&gt;1장 RestApi, Sequelize&lt;/h1
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/categories/node-js/sequelize/"/>
    
      <category term="Rest" scheme="https://beanbroker.github.io/categories/node-js/sequelize/Rest/"/>
    
    
      <category term="Rest" scheme="https://beanbroker.github.io/tags/Rest/"/>
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>NodeJs 생각정리</title>
    <link href="https://beanbroker.github.io/2018/08/29/nodejs/thinknodejs/"/>
    <id>https://beanbroker.github.io/2018/08/29/nodejs/thinknodejs/</id>
    <published>2018-08-29T09:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="NodeJs-잠깐-생각정리"><a href="#NodeJs-잠깐-생각정리" class="headerlink" title="NodeJs 잠깐 생각정리"></a>NodeJs 잠깐 생각정리</h1><p>항상 멀티쓰레드환경에서 개발을 하다가 node.js를 개발하다보니 궁금점들이 생긴다.</p><p>궁금점?</p><ol><li>싱글스레드다</li><li>was는 멀티스레드 환경! 노드는 어떻게 싱글스레드로 처리를 해야하는가?</li></ol><p>다양한 문서와 혼자 공부를 하면서 느낀점을 간단히 정리하면 아래와 같다</p><h3 id="싱글-스레드-이벤트-루프방식"><a href="#싱글-스레드-이벤트-루프방식" class="headerlink" title="싱글 스레드 - 이벤트 루프방식"></a>싱글 스레드 - 이벤트 루프방식</h3><p>진입점이 하나! 발생한 모든 이벤트들을 줄세워서 처리!</p><p>즉 node.js의 작동원리를 햄버거가게로 생각하면 된다.<br>아래의 조건들이 있다면</p><ol><li>주문하는사람</li><li>주문받는사람 한명 </li><li>패티굽는사람</li></ol><p>주문하는 사람을 유저로 생각하자!<br>주문받는사람 한명이 싱글스레드라 생각한다. 주문(이벤트 발생)이 들어오면 패티굽는사람(백단 스레드)로 이벤트를 넘긴다.</p><p>즉, 수많은! 주문이 들어온다하더라도 이벤트를 줄세우고 주문을 받기만 하면된다.(기본적으로 백단 스레드는 4개, but 환경변수를 통해 늘릴수 있다는 점!)</p><h3 id="좀-더-발전된-방향의-개발을-하려면"><a href="#좀-더-발전된-방향의-개발을-하려면" class="headerlink" title="좀 더 발전된 방향의 개발을 하려면?"></a>좀 더 발전된 방향의 개발을 하려면?</h3><p>서버 개발자라면! IO걱정을 하며 개발을 진행하게 된다. 데이터베이스에 접근할때도 Join을 남발을 하게 되면 IO가 더 커진다. 항상 비용을 생각하며 개발을 진행을 하는 습관을 가져야한다. 보통 하드웨어 성능을 빵빵하게 해서 하면 해결이 되긴하지만.. 그건 너무 비양심적인 행동이라 생각한다…<br>그렇다면! nodeJs로 개발을 진행하게 된다면! 좀더 서비스로직 개선에 관련하여 더 많은 생각을 해야한다 판단이된다. 노력해야할점이다…</p><p>지금까지 느낀점을.. 잠깐 적은….. 글… 더 좋은글을 쓸 수 있는 날까지… </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;NodeJs-잠깐-생각정리&quot;&gt;&lt;a href=&quot;#NodeJs-잠깐-생각정리&quot; class=&quot;headerlink&quot; title=&quot;NodeJs 잠깐 생각정리&quot;&gt;&lt;/a&gt;NodeJs 잠깐 생각정리&lt;/h1&gt;&lt;p&gt;항상 멀티쓰레드환경에서 개발을 하다가 n
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>sequelize3</title>
    <link href="https://beanbroker.github.io/2018/08/27/nodejs/sequelize3/"/>
    <id>https://beanbroker.github.io/2018/08/27/nodejs/sequelize3/</id>
    <published>2018-08-27T09:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sequelize3"><a href="#sequelize3" class="headerlink" title="sequelize3"></a>sequelize3</h1><h2 id="셋팅하기"><a href="#셋팅하기" class="headerlink" title="셋팅하기"></a>셋팅하기</h2><p>2장에 이어서 직접 콜을 때려서 디비에 접근해보겠습니다</p><blockquote><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">const indexRouter = require(&apos;./routes/index&apos;);</span><br><span class="line">const usersRouter = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, indexRouter);</span><br><span class="line">app.use(&apos;/users&apos;, usersRouter);</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>/routes/index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET home page. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;index page&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p></blockquote><p>웹브라우저에서 <a href="http://localhost:3005/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3005/</a><br>-&gt; index page</p><p>정상출력 확인</p><blockquote><p>/routes/<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET users listing. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;respond with a user&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p></blockquote><p>웹브라우저에서 <a href="http://localhost:3005/users" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3005/users</a><br>-&gt; respond with a user</p><p>정상출력 확인</p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><blockquote><p>crud에 앞서 컴퓨터 재시작하여 도커에 올린 디비가 연결이 안된다면</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker restart &apos;CONTAINER ID&apos;</span><br><span class="line">재기동</span><br></pre></td></tr></table></figure><blockquote><p>/routers/user.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;../models&apos;).User;</span><br></pre></td></tr></table></figure><p>추가! orm모델사용!</p><h3 id="Create"><a href="#Create" class="headerlink" title="Create"></a>Create</h3><ul><li>준비사항<ol><li>npm install body-parser -save 후<br>package.json확인</li><li>postman설치 (사용방법은 구글에 많음)</li></ol></li></ul><blockquote><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">const bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;));</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br></pre></td></tr></table></figure></p></blockquote><p>위의 2개 다 추가</p><ul><li>postman에서 json으로 보낼지</li><li><a href="http://www.-form-urlencoded로" rel="external nofollow noopener noreferrer" target="_blank">www.-form-urlencoded로</a> 보낼지</li></ul><blockquote><p>/routes/users.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">router.post(&apos;/&apos;, (req,res,next) =&gt; &#123;</span><br><span class="line">    User.create(&#123;</span><br><span class="line">        name : req.body.name,</span><br><span class="line">        age : req.body.age,</span><br><span class="line">        gender : req.body.gender,</span><br><span class="line"></span><br><span class="line">    &#125;)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            console.log(result);</span><br><span class="line">            console.log(&apos;finish to create&apos;);</span><br><span class="line">            res.status(201).json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>추가 후 run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Url - http://localhost:3005/users/</span><br><span class="line">method - post</span><br><span class="line">req</span><br><span class="line">&#123;</span><br><span class="line">&quot;name&quot; : &quot;특정인물&quot;,</span><br><span class="line">&quot;age&quot; : 53,</span><br><span class="line">&quot;gender&quot; : 0</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">res</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 35,</span><br><span class="line">    &quot;name&quot;: &quot;특정인물&quot;,</span><br><span class="line">    &quot;age&quot;: 53,</span><br><span class="line">    &quot;gender&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Read"><a href="#Read" class="headerlink" title="Read"></a>Read</h3><p>Create한 부분을 읽어보자!</p><blockquote><p>/routes/users.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">const express = require(&apos;express&apos;);</span><br><span class="line">const router = express.Router();</span><br><span class="line"></span><br><span class="line">const User = require(&apos;../models&apos;).User;</span><br><span class="line"></span><br><span class="line">router.get(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    User.findById(req.params.id)</span><br><span class="line">        .then((user) =&gt; &#123;</span><br><span class="line">            console.log(user);</span><br><span class="line">            console.log(&apos;finish to findById&apos;);</span><br><span class="line">            res.json(user);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>추가 후 run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Url - http://localhost:3005/users/35</span><br><span class="line">method - get</span><br><span class="line"></span><br><span class="line">res</span><br><span class="line">&#123;</span><br><span class="line">    &quot;id&quot;: 35,</span><br><span class="line">    &quot;name&quot;: &quot;특정인물&quot;,</span><br><span class="line">    &quot;age&quot;: 53,</span><br><span class="line">    &quot;gender&quot;: false,</span><br><span class="line">    &quot;createdAt&quot;: &quot;2018-08-27T07:53:31.000Z&quot;,</span><br><span class="line">    &quot;updatedAt&quot;: &quot;2018-08-27T07:53:31.000Z&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>전체 목록을 가져오자!</p><blockquote><p>/routes/users.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">/* GET users listing. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;User Api&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.get(&apos;/list&apos;, (req,res,next)=&gt; &#123;</span><br><span class="line"></span><br><span class="line">    User.findAll()</span><br><span class="line">        .then((users) =&gt; &#123;</span><br><span class="line">            console.log(users);</span><br><span class="line">            console.log(&apos;finish to findAll&apos;);</span><br><span class="line">            res.json(users);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>run</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">url - http://localhost:3005/users/list</span><br><span class="line">method - get</span><br><span class="line">res</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 1,</span><br><span class="line">        &quot;name&quot;: &quot;박기진&quot;,</span><br><span class="line">        &quot;age&quot;: 29,</span><br><span class="line">        &quot;gender&quot;: true,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-24T07:19:13.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-24T07:19:37.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 7,</span><br><span class="line">        &quot;name&quot;: &quot;박기진&quot;,</span><br><span class="line">        &quot;age&quot;: 100,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-24T08:10:41.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-26T13:40:39.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 32,</span><br><span class="line">        &quot;name&quot;: &quot;박기진&quot;,</span><br><span class="line">        &quot;age&quot;: 15,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-27T07:44:50.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-27T07:44:50.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 33,</span><br><span class="line">        &quot;name&quot;: &quot;박기진&quot;,</span><br><span class="line">        &quot;age&quot;: 31,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-27T07:46:28.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-27T07:46:28.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 34,</span><br><span class="line">        &quot;name&quot;: &quot;특정인물&quot;,</span><br><span class="line">        &quot;age&quot;: 23,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-27T07:46:41.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-27T07:46:41.000Z&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;id&quot;: 35,</span><br><span class="line">        &quot;name&quot;: &quot;특정인물&quot;,</span><br><span class="line">        &quot;age&quot;: 53,</span><br><span class="line">        &quot;gender&quot;: false,</span><br><span class="line">        &quot;createdAt&quot;: &quot;2018-08-27T07:53:31.000Z&quot;,</span><br><span class="line">        &quot;updatedAt&quot;: &quot;2018-08-27T07:53:31.000Z&quot;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><blockquote><p>/routes/user.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">router.put(&apos;/:id&apos;, (req,res,next) =&gt; &#123;</span><br><span class="line">    User.update(</span><br><span class="line">        &#123;</span><br><span class="line">        name : req.body.name,</span><br><span class="line">        age : req.body.age,</span><br><span class="line">        gender : req.body.gender,</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">            where : &#123;id : req.params.id&#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            console.log(result);</span><br><span class="line">            console.log(&apos;finish to update&apos;);</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            res.send(err);</span><br><span class="line">        &#125;));</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><p>특정필드를 삭제할때 함브로 삭제하면안된다.<br>deletedAt 컬럼을 사용하거나 특정 필드를 사용하여 소프트 델리트 형식으로하자!<br>하지만 지금은 마음대로 지워보자</p><blockquote><p>/routes/user.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">router.delete(&apos;/:id&apos;, function(req, res, next) &#123;</span><br><span class="line">    User.destroy(&#123; where: &#123; id: req.params.id &#125; &#125;)</span><br><span class="line">        .then((result) =&gt; &#123;</span><br><span class="line">            res.json(result);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch((err) =&gt; &#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">            next(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p>run 후</p><p>method-delete, <a href="http://localhost:3005/users/35" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3005/users/35</a> 을 실행</p><p>db쿼리 직접실행</p><p>select * from users where id =35;</p><p>없음을 확인</p><hr><p>위와같이 CRUD를 실행해보았지만 몬가 아쉬운 부분이 많다.</p><ol><li>서비스로직이 필요하다!</li><li>에러핸들러가 없다</li><li>통일된 res object가 없다</li></ol><p>4번째! 페이지에서 위와같은 일을 진행해보자!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sequelize3&quot;&gt;&lt;a href=&quot;#sequelize3&quot; class=&quot;headerlink&quot; title=&quot;sequelize3&quot;&gt;&lt;/a&gt;sequelize3&lt;/h1&gt;&lt;h2 id=&quot;셋팅하기&quot;&gt;&lt;a href=&quot;#셋팅하기&quot; class=&quot;head
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/categories/node-js/sequelize/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>sequelize2</title>
    <link href="https://beanbroker.github.io/2018/08/26/nodejs/sequelize2/"/>
    <id>https://beanbroker.github.io/2018/08/26/nodejs/sequelize2/</id>
    <published>2018-08-26T13:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sequelize2"><a href="#sequelize2" class="headerlink" title="sequelize2"></a>sequelize2</h1><p>USER TABLE 생성을 통한 crud</p><h2 id="DML-Data-Manipulation-Language"><a href="#DML-Data-Manipulation-Language" class="headerlink" title="DML : Data Manipulation Language"></a>DML : Data Manipulation Language</h2><blockquote><p>/models/user.js 유저테이블<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&apos;use strict&apos;</span><br><span class="line">module.exports = (sequelize, DataTypes) =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    return sequelize.define(&apos;user&apos;, &#123;</span><br><span class="line">        id: &#123;</span><br><span class="line">            type: DataTypes.INTEGER(9),</span><br><span class="line">            allowNull: false,</span><br><span class="line">            primaryKey: true,</span><br><span class="line">            autoIncrement: true,</span><br><span class="line">            field: &apos;id&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        name: &#123;</span><br><span class="line">            type: DataTypes.STRING(20),</span><br><span class="line">            allowNull: false,</span><br><span class="line">            field:&apos;name&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        age: &#123;</span><br><span class="line">            type: DataTypes.INTEGER.UNSIGNED,</span><br><span class="line">            allowNull: false,</span><br><span class="line">            field:&apos;age&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        gender: &#123;</span><br><span class="line">            type: DataTypes.BOOLEAN,</span><br><span class="line">            allowNull: false,</span><br><span class="line">            field: &apos;gender&apos;,</span><br><span class="line">        &#125;,</span><br><span class="line">        createdAt:&#123;</span><br><span class="line">            type : DataTypes.DATE,</span><br><span class="line">            field: &apos;createdAt&apos;,</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">        updatedAt:&#123;</span><br><span class="line">            type : DataTypes.DATE,</span><br><span class="line">            field: &apos;updatedAt&apos;,</span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">        timestamps: false,</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p></blockquote><p>createdAt과 updatedAt을 자동으로 설정해주는 방법이 있겠지만! 일단 패스</p><blockquote><p>/models/index.js 아래 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.User = require(&apos;./user&apos;)(sequelize, Sequelize);</span><br></pre></td></tr></table></figure></p></blockquote><p>app.js를 run</p><ol><li>workbench 또는 cli를 통해 db에 접근하자!</li><li>desc users를 보면 우리가 정의한 내용과 동일하게 생성</li></ol><h3 id="Insert"><a href="#Insert" class="headerlink" title="Insert"></a>Insert</h3><blockquote><p>app.js </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">const User = require(&apos;./models&apos;).User;</span><br><span class="line"></span><br><span class="line">User.create(&#123;</span><br><span class="line">    name:&apos;박기진&apos;,</span><br><span class="line">    age:&apos;31&apos;,</span><br><span class="line">    gender:&apos;0&apos;,</span><br><span class="line">&#125;)</span><br><span class="line">    .then((result) =&gt; &#123;</span><br><span class="line">    console.log(result);</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">    console.error(err);</span><br><span class="line">&#125;));</span><br></pre></td></tr></table></figure><p>생성확인 select * from users where name = ‘박기진’;</p><h3 id="Select"><a href="#Select" class="headerlink" title="Select"></a>Select</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">User.findById(2)</span><br><span class="line">    .then((user) =&gt; &#123;</span><br><span class="line">        console.log(user);</span><br><span class="line">        console.log(&apos;finish to findById&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User.findOne(&#123; where : &#123;age : 29&#125;&#125;)</span><br><span class="line">    .then((user) =&gt; &#123;</span><br><span class="line">        console.log(user);</span><br><span class="line">        console.log(&apos;finish to findOne&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">User.findAll()</span><br><span class="line">    .then((users) =&gt; &#123;</span><br><span class="line">        console.log(users);</span><br><span class="line">        console.log(&apos;finish to findAll&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br><span class="line"></span><br><span class="line">User.findAndCountAll(</span><br><span class="line">    &#123; where :</span><br><span class="line">            &#123;age : 29&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .then((result) =&gt; &#123;</span><br><span class="line">        console.log(result);</span><br><span class="line">        console.log(result.count);</span><br><span class="line">        console.log(&apos;finish to findAndCountAll&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><p>위의 것들을 하나씩하나씩 app.js에 추가하며 확인해보자</p><h3 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.update(&#123;age : 100&#125;, &#123;where :&#123;age : 35&#125;&#125;)</span><br><span class="line">    .then((result) =&gt; &#123;</span><br><span class="line">        console.log(result);</span><br><span class="line"></span><br><span class="line">        console.log(&apos;finish to update&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><h3 id="Delete"><a href="#Delete" class="headerlink" title="Delete"></a>Delete</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">User.destroy(&#123;where : &#123;age : 31&#125;&#125;)</span><br><span class="line">    .then((result) =&gt; &#123;</span><br><span class="line">        console.log(result);</span><br><span class="line"></span><br><span class="line">        console.log(&apos;finish to update&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch((err =&gt; &#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;));</span><br></pre></td></tr></table></figure><p>위와같이 간단한 dml을 정상적으로 확인하였다!</p><p>이제 App.js에서 실행해서 해당 쿼리를 실행시키는 것이 아닌 직접 request를 날려서 쿼리를 실행해보자!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sequelize2&quot;&gt;&lt;a href=&quot;#sequelize2&quot; class=&quot;headerlink&quot; title=&quot;sequelize2&quot;&gt;&lt;/a&gt;sequelize2&lt;/h1&gt;&lt;p&gt;USER TABLE 생성을 통한 crud&lt;/p&gt;
&lt;h2 id=&quot;DML
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/categories/node-js/sequelize/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>sequelize1</title>
    <link href="https://beanbroker.github.io/2018/08/25/nodejs/sequelize1/"/>
    <id>https://beanbroker.github.io/2018/08/25/nodejs/sequelize1/</id>
    <published>2018-08-25T03:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="sequelize1"><a href="#sequelize1" class="headerlink" title="sequelize1"></a>sequelize1</h1><h2 id="ORM"><a href="#ORM" class="headerlink" title="ORM?"></a>ORM?</h2><ul><li>Object relation Mapping </li><li>어플리케이션과 db를 맵핑 시켜주는 도구</li><li>특정 DBMS에 종속되지 않음</li></ul><h2 id="개발환경-셋팅"><a href="#개발환경-셋팅" class="headerlink" title="개발환경 셋팅"></a>개발환경 셋팅</h2><p>환경 : intellij, mysq (visual studio code에서도 가능)</p><p>시작전 셋팅 필요 : 로컬mysql디비 필요<br><a href="https://beanbroker.github.io/2018/08/21/etc/docker_mysql/">https://beanbroker.github.io/2018/08/21/etc/docker_mysql/</a></p><p>intellij 셋팅<br>-&gt; new project, node<br>-&gt; 프로젝트 생성후<br>-&gt; Preference 열기<br>-&gt; javascript검색<br>-&gt; Languages &amp; Frameworks의 javascript Language Version변경 EcmaScript6로(그래야 람다를 써도 빨간줄이 뜨지 않는다!)</p><p>[참고]<br><a href="http://docs.sequelizejs.com/manual/installation/getting-started.html" rel="external nofollow noopener noreferrer" target="_blank">http://docs.sequelizejs.com/manual/installation/getting-started.html</a> 참고</p><h2 id="project-setting"><a href="#project-setting" class="headerlink" title="project setting"></a>project setting</h2><blockquote><p>app.js</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">var createError = require(&apos;http-errors&apos;);</span><br><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">var logger = require(&apos;morgan&apos;);</span><br><span class="line"></span><br><span class="line">var indexRouter = require(&apos;./routes/index&apos;);</span><br><span class="line">var usersRouter = require(&apos;./routes/users&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">// view engine setup</span><br><span class="line">app.set(&apos;views&apos;, path.join(__dirname, &apos;views&apos;));</span><br><span class="line">app.set(&apos;view engine&apos;, &apos;jade&apos;);</span><br><span class="line"></span><br><span class="line">app.use(logger(&apos;dev&apos;));</span><br><span class="line">app.use(express.json());</span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;));</span><br><span class="line">app.use(cookieParser());</span><br><span class="line">app.use(express.static(path.join(__dirname, &apos;public&apos;)));</span><br><span class="line"></span><br><span class="line">app.use(&apos;/&apos;, indexRouter);</span><br><span class="line">app.use(&apos;/users&apos;, usersRouter);</span><br><span class="line"></span><br><span class="line">// catch 404 and forward to error handler</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line"></span><br><span class="line">    res.status(err.status || 404);</span><br><span class="line">    res.send(&apos;404 not found&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// error handler</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  // set locals, only providing error in development</span><br><span class="line">  res.locals.message = err.message;</span><br><span class="line">  res.locals.error = req.app.get(&apos;env&apos;) === &apos;development&apos; ? err : &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  // render the error page</span><br><span class="line">  res.status(err.status || 500);</span><br><span class="line">  res.render(&apos;error&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = app;</span><br></pre></td></tr></table></figure><blockquote><p>routes 폴더</p></blockquote><blockquote><p>/routes/index.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET home page. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&apos;index&apos;, &#123; title: &apos;Express&apos; &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>/routes/users.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var router = express.Router();</span><br><span class="line"></span><br><span class="line">/* GET users listing. */</span><br><span class="line">router.get(&apos;/&apos;, function(req, res, next) &#123;</span><br><span class="line">  res.send(&apos;respond with a resource&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = router;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>package.json</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;nodetestproject&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class="line">  &quot;private&quot;: true,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;node ./bin/www&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;cookie-parser&quot;: &quot;~1.4.3&quot;,</span><br><span class="line">    &quot;debug&quot;: &quot;~2.6.9&quot;,</span><br><span class="line">    &quot;express&quot;: &quot;~4.16.0&quot;,</span><br><span class="line">    &quot;http-errors&quot;: &quot;~1.6.2&quot;,</span><br><span class="line">    &quot;jade&quot;: &quot;~1.11.0&quot;,</span><br><span class="line">    &quot;morgan&quot;: &quot;~1.9.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>3005 포트 사용 app.js에 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.listen(3005, function()&#123;</span><br><span class="line">    console.log(&apos;3005 port connected&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p></blockquote><p><a href="http://docs.sequelizejs.com/manual/installation/getting-started.html를" rel="external nofollow noopener noreferrer" target="_blank">http://docs.sequelizejs.com/manual/installation/getting-started.html를</a> 보면 아래와 같이 나와있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// Using NPM</span><br><span class="line">$ npm install --save sequelize</span><br><span class="line"></span><br><span class="line"># And one of the following:</span><br><span class="line">$ npm install --save pg pg-hstore</span><br><span class="line">$ npm install --save mysql2</span><br><span class="line">$ npm install --save sqlite3</span><br><span class="line">$ npm install --save tedious // MSSQL</span><br></pre></td></tr></table></figure></p><p>실제 install에 필요한 부분<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save sequelize</span><br><span class="line">$ npm install --save mysql2</span><br><span class="line"></span><br><span class="line">위의 부분 실행 후</span><br><span class="line"></span><br><span class="line">npm i -g sequelize-cli</span><br><span class="line">sequelize init</span><br></pre></td></tr></table></figure></p><p>sequelize init을 진행하게되면 </p><ol><li>/config</li><li>/models</li><li>/migirations<br>폴더 생성이 되어진다 migrations는 필요없다.</li></ol><blockquote><p>/config/config.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;development&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: null,</span><br><span class="line">    &quot;database&quot;: &quot;database_development&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;test&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: null,</span><br><span class="line">    &quot;database&quot;: &quot;database_test&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;production&quot;: &#123;</span><br><span class="line">    &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">    &quot;password&quot;: null,</span><br><span class="line">    &quot;database&quot;: &quot;database_production&quot;,</span><br><span class="line">    &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">    &quot;dialect&quot;: &quot;mysql&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>위의 내용을 자신의 디비에 맞게 변경하자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;development&quot;: &#123;</span><br><span class="line">   &quot;username&quot;: &quot;root&quot;,</span><br><span class="line">   &quot;password&quot;: &quot;password&quot;,</span><br><span class="line">   &quot;database&quot;: &quot;study&quot;,</span><br><span class="line">   &quot;host&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">   &quot;dialect&quot;: &quot;mysql&quot;,</span><br><span class="line">   &quot;operatorsAliases&quot; : false</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>/models/index.js기본 생성되어진 index.js변경<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&apos;use strict&apos;;</span><br><span class="line"></span><br><span class="line">const path = require(&apos;path&apos;);</span><br><span class="line">const Sequelize = require(&apos;sequelize&apos;);</span><br><span class="line"></span><br><span class="line">const env = process.env.NODE_ENV || &apos;development&apos;;</span><br><span class="line">const config = require(path.join(__dirname, &apos;..&apos;, &apos;config&apos;, &apos;config.json&apos;))[env];</span><br><span class="line">const db = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">const sequelize = new Sequelize(config.database, config.username, config.password, config);</span><br><span class="line"></span><br><span class="line">db.sequelize = sequelize;</span><br><span class="line">db.Sequelize = Sequelize;</span><br><span class="line"></span><br><span class="line">module.exports = db;</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="Mysql을-연결해보자"><a href="#Mysql을-연결해보자" class="headerlink" title="Mysql을 연결해보자"></a>Mysql을 연결해보자</h2><blockquote><p>app.js<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">const sequelize = require(&apos;./models&apos;).sequelize;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//테스트 커낵션</span><br><span class="line">sequelize</span><br><span class="line">    .authenticate()</span><br><span class="line">    .then(() =&gt; &#123;</span><br><span class="line">        console.log(&apos;Connection has been established successfully.&apos;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(err =&gt; &#123;</span><br><span class="line">        console.error(&apos;Unable to connect to the database:&apos;, err);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sequelize.sync();</span><br></pre></td></tr></table></figure></p></blockquote><p>sync - &gt; 서버실행시 mysql 연결 및 연동</p><p>Executing (default): SELECT 1+1 AS result<br>Connection has been established successfully. 와 함께 로그가 확인되면 정상연결 확인.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;sequelize1&quot;&gt;&lt;a href=&quot;#sequelize1&quot; class=&quot;headerlink&quot; title=&quot;sequelize1&quot;&gt;&lt;/a&gt;sequelize1&lt;/h1&gt;&lt;h2 id=&quot;ORM&quot;&gt;&lt;a href=&quot;#ORM&quot; class=&quot;header
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/categories/node-js/sequelize/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="sequelize" scheme="https://beanbroker.github.io/tags/sequelize/"/>
    
  </entry>
  
  <entry>
    <title>mysql with docker</title>
    <link href="https://beanbroker.github.io/2018/08/21/etc/docker_mysql/"/>
    <id>https://beanbroker.github.io/2018/08/21/etc/docker_mysql/</id>
    <published>2018-08-21T02:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mysql설치-with-Docker"><a href="#mysql설치-with-Docker" class="headerlink" title="mysql설치 with Docker"></a>mysql설치 with Docker</h2><p>혼자서 프로젝트를 진행하다보면 다양한 환경을 셋팅을 해주어야 한다. 얼마나 귀찮은가…. 전에 쓴 포스트에서도 레디스를 올려보았다. 오늘은 mysql을 올려보자!</p><p>mysql workbench에서 접속을 해보자!</p><p>맥북에서 진행할것이며 mysql 5.7버젼으로 설치할 예정이다.(5.7로 하는 이유는… 그냥pull해서 최신버젼을 까니 문제발생, 아마 워크벤치 버젼에 맞추어서 다운로드 받아야하는듯… 그냥 최신 워크벤치를 깔고 진행하자)<br><a href="https://www.mysql.com/products/workbench/" rel="external nofollow noopener noreferrer" target="_blank">https://www.mysql.com/products/workbench/</a></p><blockquote><p>도커 이미지를 조회해보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search mysql</span><br></pre></td></tr></table></figure></p></blockquote><p>(OFFICIAL항목에 OK는 공식이미지임)</p><blockquote><p>mysql 도커 이미지 pull<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure></p></blockquote><p>:5.7 &lt;– 해당 버젼을 선택<br>:5.7을 쓰지 않는다면 최신버젼을 가져오게된다.</p><blockquote><p>도커 이미지 확인<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 -e MYSQL_ROOT_PASSWORD=password --name mysql_local mysql:5.7</span><br></pre></td></tr></table></figure><blockquote><p> 정상작동확인<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure></p></blockquote><p>name mysql_local 확인시 정상작동, 바로 cli를 통해 들어 갈수 있으나 바로 mysql workbench에 연결하자</p><blockquote><p>셋팅</p><ul><li>hostname : 127.0.0.1</li><li>port :3306</li><li>password : password<br>테스트 커넥션 후 ok</li></ul></blockquote><p>끝!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mysql설치-with-Docker&quot;&gt;&lt;a href=&quot;#mysql설치-with-Docker&quot; class=&quot;headerlink&quot; title=&quot;mysql설치 with Docker&quot;&gt;&lt;/a&gt;mysql설치 with Docker&lt;/h2&gt;&lt;p&gt;혼자
      
    
    </summary>
    
      <category term="ETC" scheme="https://beanbroker.github.io/categories/ETC/"/>
    
      <category term="DOCKER" scheme="https://beanbroker.github.io/categories/ETC/DOCKER/"/>
    
    
      <category term="ETC" scheme="https://beanbroker.github.io/tags/ETC/"/>
    
      <category term="DOCKER" scheme="https://beanbroker.github.io/tags/DOCKER/"/>
    
  </entry>
  
  <entry>
    <title>예외처리</title>
    <link href="https://beanbroker.github.io/2018/08/19/nodejs/errorHandling/"/>
    <id>https://beanbroker.github.io/2018/08/19/nodejs/errorHandling/</id>
    <published>2018-08-19T07:58:00.000Z</published>
    <updated>2019-07-07T08:12:45.328Z</updated>
    
    <content type="html"><![CDATA[<h2 id="노드-에러처리"><a href="#노드-에러처리" class="headerlink" title="노드 에러처리"></a>노드 에러처리</h2><p>노드에서는 예외처리가 정말 중요!</p><p>멀티 스레드 프로그램에서 스레드 하나가 멈추면 그 일을 다른 스레드가 대신한다. 하지만! 노드는 스레드가 하나뿐이고…… 그 하나를 아주 소중하게 보호해야 한다. 하나뿐인 스레드에서 에러로 인해 멈춘다면! 서버가 멈춘다는 뜻……… 그렇기에 우리는 에러를 처리하는 방법을 익혀야 한다.</p><h3 id="1-예외-던지기"><a href="#1-예외-던지기" class="headerlink" title="1 예외 던지기"></a>1 예외 던지기</h3><p>err1.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">setInterval(()=&gt; &#123;</span><br><span class="line"></span><br><span class="line">    console.log(&apos;start&apos;);</span><br><span class="line">    try&#123;</span><br><span class="line">        throw new Error(&apos;break the server&apos;);</span><br><span class="line">    &#125;catch (err)&#123;</span><br><span class="line">        console.error(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, 1000);</span><br></pre></td></tr></table></figure><h3 id="2-error-발생시-기록-후-후-대처-방법"><a href="#2-error-발생시-기록-후-후-대처-방법" class="headerlink" title="2 error 발생시 기록 후 후 대처 방법"></a>2 error 발생시 기록 후 후 대처 방법</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fs =require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">setInterval(()=&gt;&#123;</span><br><span class="line">    fs.unlink(&apos;./trash.js&apos;, (err) =&gt; &#123;</span><br><span class="line">        if(err)&#123;</span><br><span class="line">            console.error(err);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, 1000);</span><br></pre></td></tr></table></figure><h3 id="3-예측-할수-없는에러-지양"><a href="#3-예측-할수-없는에러-지양" class="headerlink" title="3 예측 할수 없는에러(지양)"></a>3 예측 할수 없는에러(지양)</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">process.on(&apos;uncaughtException&apos;, (err)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">    console.error(&apos;이런 에러가! &apos;, err);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setInterval(() =&gt; &#123;</span><br><span class="line">    throw new Error(&apos;서버를 고장&apos;;)</span><br><span class="line">&#125;, 1000);</span><br><span class="line"></span><br><span class="line">setTimeout(() =&gt; &#123;</span><br><span class="line">    console.log(&apos;실행&apos;);</span><br><span class="line">&#125;, 2000);</span><br></pre></td></tr></table></figure><p>모든 에러를 잡아 줄거 같지만!<br>노드 공식 문서에서 uncaughtException사용 지양 </p><p>&lt;node.js교과서 3장 참조&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;노드-에러처리&quot;&gt;&lt;a href=&quot;#노드-에러처리&quot; class=&quot;headerlink&quot; title=&quot;노드 에러처리&quot;&gt;&lt;/a&gt;노드 에러처리&lt;/h2&gt;&lt;p&gt;노드에서는 예외처리가 정말 중요!&lt;/p&gt;
&lt;p&gt;멀티 스레드 프로그램에서 스레드 하나가 멈추
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node.js 모듈</title>
    <link href="https://beanbroker.github.io/2018/08/19/nodejs/module_of_node/"/>
    <id>https://beanbroker.github.io/2018/08/19/nodejs/module_of_node/</id>
    <published>2018-08-19T07:10:00.000Z</published>
    <updated>2019-07-07T08:12:45.328Z</updated>
    
    <content type="html"><![CDATA[<h3 id="REPL"><a href="#REPL" class="headerlink" title="REPL"></a>REPL</h3><p>자바스크립트는 스크립트 언어이므로 미리 컴파일을 하지 않아도 즉석에서 코드를 실행할수 있습니다. 입력한 코드를 읽고(read), 해석하고(Eval), 결과물을 반환하고(Print), 종료할때까지 반복(loop)한다하여 repl이라 불린다.</p><h4 id="모듈이란-특정한-기능을-하는-함수나-변수들의-집합"><a href="#모듈이란-특정한-기능을-하는-함수나-변수들의-집합" class="headerlink" title="모듈이란 특정한 기능을 하는 함수나 변수들의 집합"></a>모듈이란 특정한 기능을 하는 함수나 변수들의 집합</h4><ul><li>모듈로 만들어두면 여러 프로그램에서 해당 모듈을 재사용 할수 있음</li></ul><h2 id="노드-내장-객체"><a href="#노드-내장-객체" class="headerlink" title="노드 내장 객체"></a>노드 내장 객체</h2><h3 id="global"><a href="#global" class="headerlink" title="global"></a>global</h3><ul><li>브라우저의 window와 같은 전역 객체</li><li>모든 파일에서 접근 가능</li></ul><h3 id="console"><a href="#console" class="headerlink" title="console"></a>console</h3><ul><li>time, timeEnd :  시간 측정</li><li>log : 평범한 록</li><li>error : 에러 내용 표사</li><li>dir : 객체를 콘솔에 표시힐때 사용</li><li>console.trace : 에러가 어디서 발생했는지 추적</li></ul><h3 id="filename-dirname"><a href="#filename-dirname" class="headerlink" title="filename, dirname"></a><strong>filename, </strong>dirname</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">console.log(__filename);</span><br><span class="line">console.log(__dirname);</span><br><span class="line"></span><br><span class="line">/Users/kijinpark/pkjStudy/new_node/TestApp/p88.js</span><br><span class="line">/Users/kijinpark/pkjStudy/new_node/TestApp</span><br></pre></td></tr></table></figure><h3 id="process"><a href="#process" class="headerlink" title="process"></a>process</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&gt; process.version</span><br><span class="line">&apos;v8.11.3&apos;</span><br><span class="line">&gt; process.arch</span><br><span class="line">&apos;x64&apos;</span><br><span class="line">&gt; process.platform</span><br><span class="line">&apos;darwin&apos;</span><br><span class="line">&gt; process.pid</span><br><span class="line">7079</span><br><span class="line">&gt; process.uptime()</span><br><span class="line">31.58</span><br><span class="line">&gt; process.execPath</span><br><span class="line">&apos;/Users/kijinpark/.nvm/versions/node/v8.11.3/bin/node&apos;</span><br><span class="line">&gt; process.cwd()</span><br><span class="line">&apos;/Users/kijinpark/pkjStudy/test_node&apos;</span><br><span class="line">&gt; process.cpuUsage()</span><br><span class="line">&#123; user: 110927, system: 23011 &#125;</span><br></pre></td></tr></table></figure><h3 id="fs모듈"><a href="#fs모듈" class="headerlink" title="fs모듈"></a>fs모듈</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&apos;fs&apos;);</span><br><span class="line"></span><br><span class="line">fs.readFile(&apos;./testread.txt&apos;, (err, data) =&gt; &#123;</span><br><span class="line">    if(err)&#123;</span><br><span class="line">        throw  err;</span><br><span class="line">    &#125;</span><br><span class="line">    console.log(data);</span><br><span class="line">    console.log(data.toString());</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;REPL&quot;&gt;&lt;a href=&quot;#REPL&quot; class=&quot;headerlink&quot; title=&quot;REPL&quot;&gt;&lt;/a&gt;REPL&lt;/h3&gt;&lt;p&gt;자바스크립트는 스크립트 언어이므로 미리 컴파일을 하지 않아도 즉석에서 코드를 실행할수 있습니다. 입력한 코드를 
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>var, const, let</title>
    <link href="https://beanbroker.github.io/2018/08/19/JavaScript/basic/"/>
    <id>https://beanbroker.github.io/2018/08/19/JavaScript/basic/</id>
    <published>2018-08-19T05:10:00.000Z</published>
    <updated>2019-07-07T08:12:45.325Z</updated>
    
    <content type="html"><![CDATA[<h2 id="var-const-let"><a href="#var-const-let" class="headerlink" title="var, const, let"></a>var, const, let</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">if(true)&#123;</span><br><span class="line">    var i = 1;</span><br><span class="line">    const b = 1;</span><br><span class="line">&#125;</span><br><span class="line">console.log(i);</span><br><span class="line">console.log(b);</span><br><span class="line"></span><br><span class="line">Uncaught ReferenceError: b is not defined</span><br><span class="line">    at &lt;anonymous&gt;:7:13</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">const p = 0;</span><br><span class="line"></span><br><span class="line">p = 1;</span><br><span class="line"></span><br><span class="line">VM130:1 Uncaught TypeError: Assignment to constant variable.</span><br><span class="line">    at &lt;anonymous&gt;:1:3</span><br><span class="line"></span><br><span class="line">let i = 0;</span><br><span class="line">i = 3;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;var-const-let&quot;&gt;&lt;a href=&quot;#var-const-let&quot; class=&quot;headerlink&quot; title=&quot;var, const, let&quot;&gt;&lt;/a&gt;var, const, let&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="JavsScript" scheme="https://beanbroker.github.io/categories/JavsScript/"/>
    
    
      <category term="JavaScript" scheme="https://beanbroker.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>node.js basic</title>
    <link href="https://beanbroker.github.io/2018/08/18/nodejs/concept_of_node/"/>
    <id>https://beanbroker.github.io/2018/08/18/nodejs/concept_of_node/</id>
    <published>2018-08-18T06:00:00.000Z</published>
    <updated>2019-07-07T08:12:45.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-js"><a href="#node-js" class="headerlink" title="node.js"></a>node.js</h1><ul><li>크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임입니다.<ul><li>(런타임 - 특정 언어로 만든 프로그램들을 실행 할수 있는 환경)</li></ul></li><li>node.js는 이벤트 기반, 논블로킹 I/O모델을 사용해 가볍고 효율적입니다.</li><li>노드는 V8과 더불러 libuv라는 라이브러리를 사용<ul><li>V8, libuv(C, C++ 로 구현되어 있음)</li></ul></li><li>libuv 라이브러리는 노드의 특성인 이벤트 기반, 논블로킹 I/O 모델을 구현</li><li>자바스크립트는 실행 시 기본적으로 전역 컨텍스트안에서 돌아간다 생각하는게 좋다</li></ul><h3 id="이벤트-기반-중요중요"><a href="#이벤트-기반-중요중요" class="headerlink" title="이벤트 기반 (중요중요))"></a>이벤트 기반 (중요중요))</h3><ul><li>이벤트가 발생 할 때 미리 지정해둔 작업을 수행하는 방식, ex: 클릭, client요청, etc..</li><li>특정 이벤트가 발생할때 무엇을 할지 등록-&gt; 이벤트 리스너에 콜백 함수를 등록</li><li>이벤트 루프(중요중요?) 여러 이벤트가 동시에 발생했을 때 어떤 순서로 콜백 함수를 호출할지는 이벤트 루프가 판단!</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">function one()&#123;</span><br><span class="line">    two();</span><br><span class="line">    console.log(&apos;1번&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function two()&#123;</span><br><span class="line">    three();</span><br><span class="line">    console.log(&apos;2번&apos;);</span><br><span class="line">&#125;</span><br><span class="line">function three()&#123;    </span><br><span class="line">    console.log(&apos;3번&apos;);</span><br><span class="line">&#125;</span><br><span class="line">one();</span><br></pre></td></tr></table></figure><p>당연하지만 3번,2번,1번 호출되어짐</p><p>다른 예<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function start()&#123;</span><br><span class="line">    console.log(&apos;2초 후 실행&apos;);</span><br><span class="line">&#125;</span><br><span class="line">console.log(&apos;시작&apos;);</span><br><span class="line">setTimeout(start, 2000);</span><br><span class="line">console.log(&apos;끝&apos;);</span><br></pre></td></tr></table></figure></p><p>result<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">시작</span><br><span class="line">끝</span><br><span class="line">2초 후 실행</span><br></pre></td></tr></table></figure></p><h3 id="이벤트-루프"><a href="#이벤트-루프" class="headerlink" title="이벤트 루프"></a>이벤트 루프</h3><blockquote><p>이벤트 발생 시 호출할 콜백 함수를 관리, 호출된 콜백 함수의 실행 순서를 결정하는 역할을 담당. 노드가 종료 될 때까지 이벤트 처리를 위한 작업을 반복하므로 루프라 불려진다.(태스크 큐에 콜백 함수가 들어올때까지 계속 대기하게 된다.)</p></blockquote><p><a href="http://latentflip.com/loupe/" rel="external nofollow noopener noreferrer" target="_blank">http://latentflip.com/loupe/</a> 를 보자 </p><h3 id="태스트-큐-또는-콜백-큐"><a href="#태스트-큐-또는-콜백-큐" class="headerlink" title="태스트 큐 또는 콜백 큐"></a>태스트 큐 또는 콜백 큐</h3><blockquote><p>이벤트 발생 후 호출되어야 할 콜백 함수들이 기다리는 공간. </p></blockquote><h3 id="백그라운드"><a href="#백그라운드" class="headerlink" title="백그라운드"></a>백그라운드</h3><blockquote><p>타이머나 I/O 작업 콜백 또는 이벤트 리스너들이 대기하는 공간</p></blockquote><h3 id="논블로킹-I-O"><a href="#논블로킹-I-O" class="headerlink" title="논블로킹 I/O"></a>논블로킹 I/O</h3><blockquote><p>이전 작업이 완료될 때까지 멈추지 않고 다음 작업을 수행함을 뜻합니다.</p></blockquote><h3 id="싱글-스레드"><a href="#싱글-스레드" class="headerlink" title="싱글 스레드"></a>싱글 스레드</h3><p>자바스크립트와 노드에서 논블로킹이 중요한 이유는! 바로 싱글 스레드이기 떄문이다. 한번에 한가지 일밖에 처리하지 못하기 때무넹 어떠한 작업에서 블로킹이 발생하면 다음 일을 처리하지 못한다.</p><h2 id="server로서-노드"><a href="#server로서-노드" class="headerlink" title="server로서 노드"></a>server로서 노드</h2><ol><li>노드 서버는 I/O가 많은 작업에 적합</li><li>CPU부하가 큰 작업에는 적합히지 않음 -&gt; 싱글 스레드에서 일이 처리되는데 개발자가 작업한 코드가 CPU연산을 많이 요구하면 블로킹이 발생해 스레드하나가 감당하기 힘듬</li><li>에러처리 잘해야함(모든 서버는 예측할수 있는 에러는 잘 던지자)</li></ol><p>(node.js 교과서 참조)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;node-js&quot;&gt;&lt;a href=&quot;#node-js&quot; class=&quot;headerlink&quot; title=&quot;node.js&quot;&gt;&lt;/a&gt;node.js&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;크롬 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임입니다.&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>node.js 라우터</title>
    <link href="https://beanbroker.github.io/2018/08/12/nodejs/noderouter/"/>
    <id>https://beanbroker.github.io/2018/08/12/nodejs/noderouter/</id>
    <published>2018-08-12T07:20:00.000Z</published>
    <updated>2019-07-07T08:12:45.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-js-router"><a href="#node-js-router" class="headerlink" title="node.js router"></a>node.js router</h1><h2 id="1-router-기본-샘플코드"><a href="#1-router-기본-샘플코드" class="headerlink" title="1. router 기본 샘플코드"></a>1. router 기본 샘플코드</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line">var accountRouter = express.Router();</span><br><span class="line"></span><br><span class="line">accountRouter.get(&apos;/r1&apos;, function(req, res)&#123;</span><br><span class="line">  res.send(&apos;/account/r1&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">accountRouter.get(&apos;/r2&apos;, function(req, res)&#123;</span><br><span class="line">  res.send(&apos;/account/r2&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line">app.use(&apos;/account&apos;, accountRouter);</span><br><span class="line">//account로 들어오는 모든 경로를 accountRouter에 위임</span><br><span class="line"></span><br><span class="line">var userRouter  = express.Router();</span><br><span class="line">userRouter.get(&apos;/r1&apos;, function(req, res)&#123;</span><br><span class="line">  res.send(&apos;user/r1&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">userRouter.get(&apos;/r2&apos;, function(req, res)&#123;</span><br><span class="line">  res.send(&apos;user/r2&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">app.use(&apos;/user&apos;, userRouter);</span><br><span class="line">//user 들어오는 모든 경로를 userRouter 위임</span><br><span class="line"> app.listen(3005, function()&#123;</span><br><span class="line">  console.log(&apos;3005 port connected&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>test 해보기 </p></blockquote><ul><li>localhost:3005/user/r1</li><li>localhost:3005/user/r1</li><li>localhost:3005/account/r1</li><li>localhost:3005/account/r1</li></ul><h2 id="2-위의코드-이쁘게-나누보자"><a href="#2-위의코드-이쁘게-나누보자" class="headerlink" title="2. 위의코드 이쁘게 나누보자"></a>2. 위의코드 이쁘게 나누보자</h2><ol><li>app.js가 실행되어지고 있는 폴더에서 폴더 생성 mkdir routes</li><li>cd routes</li><li><p>vim account.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var accountRouter = express.Router();</span><br><span class="line"></span><br><span class="line">accountRouter.get(&apos;/r1&apos;, function(req, res)&#123;</span><br><span class="line">  res.send(&apos;/account/r1&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">accountRouter.get(&apos;/r2&apos;, function(req, res)&#123;</span><br><span class="line">  res.send(&apos;/account/r2&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">module.exports = accountRouter;</span><br></pre></td></tr></table></figure></li><li><p>vim user.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var userRouter = express.Router();</span><br><span class="line"></span><br><span class="line">userRouter.get(&apos;/r1&apos;, function(req, res)&#123;</span><br><span class="line">  res.send(&apos;user/r1&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">userRouter.get(&apos;/r2&apos;, function(req, res)&#123;</span><br><span class="line">  res.send(&apos;user/r2&apos;);</span><br><span class="line">&#125;);</span><br><span class="line">module.exports = userRouter;</span><br></pre></td></tr></table></figure></li><li><p>app.js수정</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">var accountRouter = require(&apos;./routes/account.js&apos;)</span><br><span class="line"></span><br><span class="line">app.use(&apos;/account&apos;, accountRouter);</span><br><span class="line">//account로 들어오는 모든 경로를 accountRouter에 위임</span><br><span class="line"></span><br><span class="line">var userRouter  =  require(&apos;./routes/user.js&apos;)</span><br><span class="line"></span><br><span class="line">app.use(&apos;/user&apos;, userRouter);</span><br><span class="line">//user 들어오는 모든 경로를 userRouter 위임</span><br><span class="line"> app.listen(3005, function()&#123;</span><br><span class="line">  console.log(&apos;3005 port connected&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>test 해보기 </p></li></ol><ul><li>localhost:3005/user/r1</li><li>localhost:3005/user/r1</li><li>localhost:3005/account/r1</li><li>localhost:3005/account/r1</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;node-js-router&quot;&gt;&lt;a href=&quot;#node-js-router&quot; class=&quot;headerlink&quot; title=&quot;node.js router&quot;&gt;&lt;/a&gt;node.js router&lt;/h1&gt;&lt;h2 id=&quot;1-router-기본-샘플코드&quot;
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/categories/node-js/express/"/>
    
      <category term="router" scheme="https://beanbroker.github.io/categories/node-js/express/router/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/tags/express/"/>
    
      <category term="router" scheme="https://beanbroker.github.io/tags/router/"/>
    
  </entry>
  
  <entry>
    <title>node.js 세션</title>
    <link href="https://beanbroker.github.io/2018/08/12/nodejs/nodesession/"/>
    <id>https://beanbroker.github.io/2018/08/12/nodejs/nodesession/</id>
    <published>2018-08-12T06:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-js-session"><a href="#node-js-session" class="headerlink" title="node.js session"></a>node.js session</h1><h2 id="1-세션을-사용해보자"><a href="#1-세션을-사용해보자" class="headerlink" title="1. 세션을 사용해보자"></a>1. 세션을 사용해보자</h2><h4 id="HTTP-프로토콜-특징"><a href="#HTTP-프로토콜-특징" class="headerlink" title="HTTP 프로토콜 특징"></a>HTTP 프로토콜 특징</h4><ol><li>Connecionless</li><li>Stateless</li></ol><p>비연결성, 상태값을 가지지 않는다</p><p>동작형태 -&gt; 클라이언트/서버( 요청과 응답 &lt;-포인트)<br>비연결성(상태 노유지 프로토콜)-&gt; 소왓? -&gt; 무작위를 상대로하는 서비스로는 최적<br>이지<br>메시지 교환형태 프로토콜이야(클라이언트와 서버간의 http메세지 주고받으며 통신<br>)</p><p>stateless라며? -&gt; 쿠키 등장!</p><h4 id="쿠키와-세션"><a href="#쿠키와-세션" class="headerlink" title="쿠키와 세션"></a>쿠키와 세션</h4><p>-&gt; Http의 약점 보완</p><ul><li>쿠키(클라이언트 로컬에 저장되는 키와 값) - 클라이언트 파일로 저장</li><li>세션(서버에서 일정 시간동안 저장되는 키와 값) - 서버에 저장</li></ul><p>세션은 서버의 자원을 사용하기 때문에 마구잡이로 사용하다보면 서버 메모리가 감<br>당할수 없게 되고 그로 인해 서비스 장애 또는 서비스가 느려 질수 있다. 그래서 &gt;쿠기를 사용해야 한당.</p><p>[관련내용]</p><ol><li><a href="https://www.npmjs.com/package/express-session" rel="external nofollow noopener noreferrer" target="_blank">https://www.npmjs.com/package/express-session</a></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install express-session --save</span><br></pre></td></tr></table></figure><p>package.json확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"> var express = require(&apos;express&apos;);</span><br><span class="line"> var session = require(&apos;express-session&apos;);</span><br><span class="line"> var app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> app.use(session(&#123;</span><br><span class="line">   secret: &apos;supserljksdg#23423&apos;,</span><br><span class="line">   resave: false,</span><br><span class="line">   saveUninitialized: true, // 세션아이디 발급전에 발급 x</span><br><span class="line"> </span><br><span class="line"> &#125;));</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> app.get(&apos;/cnt&apos;, function(req,res)&#123;</span><br><span class="line">    req.session.cnt= 1;</span><br><span class="line">    res.send(&apos;Sesson hello&apos;);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/check&apos;, function(req,res)&#123;</span><br><span class="line">    res.send(&apos;rst : &apos; + parseInt(req.session.cnt));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> app.listen(3005, function () &#123;</span><br><span class="line">    console.log(&apos;app listening on port 3005!&apos;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>위와같이 작성후</p><ol><li>localhost:3005/cnt</li></ol><ul><li>session hello 확인</li></ul><ol start="2"><li>localhost:3005/check</li></ol><ul><li>rst : 1 확인</li></ul><h2 id="2-session-cnt-올려보기"><a href="#2-session-cnt-올려보기" class="headerlink" title="2. session cnt 올려보기"></a>2. session cnt 올려보기</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> var express = require(&apos;express&apos;);</span><br><span class="line"> var session = require(&apos;express-session&apos;);</span><br><span class="line"> var app = express();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> app.use(session(&#123;</span><br><span class="line">   secret: &apos;supserljksdg#23423&apos;,</span><br><span class="line">   resave: false,</span><br><span class="line">   saveUninitialized: true, // 세션아이디 발급전에 발급 x</span><br><span class="line"> </span><br><span class="line"> &#125;));</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> app.get(&apos;/cnt&apos;, function(req,res)&#123;</span><br><span class="line"> </span><br><span class="line">    if(req.session.cnt)&#123;</span><br><span class="line">        req.session.cnt++;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        req.session.cnt = 1;</span><br><span class="line">    &#125;</span><br><span class="line">    res.send(&apos;cnt :&apos; + req.session.cnt);</span><br><span class="line"> &#125;);</span><br><span class="line"></span><br><span class="line">app.get(&apos;/check&apos;, function(req,res)&#123;</span><br><span class="line">    res.send(&apos;rst : &apos; + parseInt(req.session.cnt));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"> app.listen(3005, function () &#123;</span><br><span class="line">    console.log(&apos;app listening on port 3005!&apos;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><ol><li>위와 같이 작성하여 실행</li><li>localhost:3005/cnt 새로고침</li><li>cnt 증가</li><li>localhost:3005/check 세션에 cnt 잘담겨져있는지 확인</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;node-js-session&quot;&gt;&lt;a href=&quot;#node-js-session&quot; class=&quot;headerlink&quot; title=&quot;node.js session&quot;&gt;&lt;/a&gt;node.js session&lt;/h1&gt;&lt;h2 id=&quot;1-세션을-사용해보자&quot;&gt;
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/categories/node-js/express/"/>
    
      <category term="Session" scheme="https://beanbroker.github.io/categories/node-js/express/Session/"/>
    
    
      <category term="Session" scheme="https://beanbroker.github.io/tags/Session/"/>
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>node.js 쿠키</title>
    <link href="https://beanbroker.github.io/2018/08/12/nodejs/nodecookie/"/>
    <id>https://beanbroker.github.io/2018/08/12/nodejs/nodecookie/</id>
    <published>2018-08-12T06:10:00.000Z</published>
    <updated>2019-07-07T08:12:45.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-js-cookies"><a href="#node-js-cookies" class="headerlink" title="node.js cookies"></a>node.js cookies</h1><blockquote><p>쿠키(클라이언트 로컬에 저장되는 키와 값) - 클라이언트 파일로 저장</p></blockquote><h2 id="1-쿠키를-사용해보자"><a href="#1-쿠키를-사용해보자" class="headerlink" title="1. 쿠키를 사용해보자"></a>1. 쿠키를 사용해보자</h2><p>[관련내용]</p><ol><li><p><a href="http://expressjs.com/ko/4x/api.html#req.cookies" rel="external nofollow noopener noreferrer" target="_blank">http://expressjs.com/ko/4x/api.html#req.cookies</a></p></li><li><p><a href="https://www.npmjs.com/package/cookie-parser" rel="external nofollow noopener noreferrer" target="_blank">https://www.npmjs.com/package/cookie-parser</a></p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cookie-parser --save</span><br></pre></td></tr></table></figure><p>package.json확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">app.get(&apos;/cnt&apos;, function(req,res)&#123;</span><br><span class="line">    res.cookie(&apos;cnt&apos;, 1)</span><br><span class="line">    res.send(&apos;cnt : &apos; + req.cookies.cnt );</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(3005, function () &#123;</span><br><span class="line">   console.log(&apos;app listening on port 3005!&apos;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>위의 코드 작성 후 실행 </p><ol><li>localhost:3005/cnt</li><li>chrome 기준-&gt; 개발자도구-&gt;network-&gt;cnt click-&gt; header 정보에서 Set-Cookies 확인</li></ol><h2 id="2-cookie에-담겨있는-cnt-값을-올려보자"><a href="#2-cookie에-담겨있는-cnt-값을-올려보자" class="headerlink" title="2. cookie에 담겨있는 cnt 값을 올려보자"></a>2. cookie에 담겨있는 cnt 값을 올려보자</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line"></span><br><span class="line">var app = express();</span><br><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line">app.use(cookieParser());</span><br><span class="line"></span><br><span class="line">app.get(&apos;/cnt&apos;, function(req,res)&#123;</span><br><span class="line">   if(req.cookies.cnt)&#123;</span><br><span class="line">       var cnt = parseInt(req.cookies.cnt);</span><br><span class="line">   &#125;else&#123;</span><br><span class="line">       var cnt = 0;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   cnt++;</span><br><span class="line">    res.cookie(&apos;cnt&apos;, cnt)</span><br><span class="line">    res.send(&apos;cnt : &apos; + cnt );</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">app.listen(3005, function () &#123;</span><br><span class="line">   console.log(&apos;app listening on port 3005!&apos;);</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><h2 id="3-cnt-쿠기-값을-암호화해보자"><a href="#3-cnt-쿠기-값을-암호화해보자" class="headerlink" title="3.cnt 쿠기 값을 암호화해보자"></a>3.cnt 쿠기 값을 암호화해보자</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">app.use(cookieParser(&apos;supserljksdg#23423&apos;));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> app.get(&apos;/cnt&apos;, function(req,res)&#123;</span><br><span class="line">    if(req.signedCookies.cnt)&#123;</span><br><span class="line">        var cnt = parseInt(req.signedCookies.cnt);</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        var cnt = 0;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    cnt++;</span><br><span class="line">     res.cookie(&apos;cnt&apos;, cnt, &#123;signed:true&#125;);</span><br><span class="line">     res.send(&apos;cnt : &apos; + cnt );</span><br><span class="line"> &#125;);</span><br></pre></td></tr></table></figure><p>위와같이 변경<br>똑같은 방법으로 cnt를 확인하게 되면 숫자가 아닌 암호화된 값을 확인 할수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;node-js-cookies&quot;&gt;&lt;a href=&quot;#node-js-cookies&quot; class=&quot;headerlink&quot; title=&quot;node.js cookies&quot;&gt;&lt;/a&gt;node.js cookies&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;쿠키(클라
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/categories/node-js/express/"/>
    
      <category term="cookies" scheme="https://beanbroker.github.io/categories/node-js/express/cookies/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/tags/express/"/>
    
      <category term="cookies" scheme="https://beanbroker.github.io/tags/cookies/"/>
    
  </entry>
  
  <entry>
    <title>node.js supervisor</title>
    <link href="https://beanbroker.github.io/2018/08/12/nodejs/supervisor/"/>
    <id>https://beanbroker.github.io/2018/08/12/nodejs/supervisor/</id>
    <published>2018-08-12T05:10:00.000Z</published>
    <updated>2019-07-07T08:12:45.329Z</updated>
    
    <content type="html"><![CDATA[<h1 id="npm-supervisor"><a href="#npm-supervisor" class="headerlink" title="npm supervisor"></a>npm supervisor</h1><p><a href="https://www.npmjs.com/package/supervisor" rel="external nofollow noopener noreferrer" target="_blank">https://www.npmjs.com/package/supervisor</a></p><p>설치</p><blockquote><p>npm install supervisor -g</p></blockquote><p>app.js 실행</p><blockquote><p>supervisor app.js</p></blockquote><p> 코드를 실행시 즉각적으로 코드 반영</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;npm-supervisor&quot;&gt;&lt;a href=&quot;#npm-supervisor&quot; class=&quot;headerlink&quot; title=&quot;npm supervisor&quot;&gt;&lt;/a&gt;npm supervisor&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://www.n
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/categories/node-js/express/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>node.js rest get&amp;post</title>
    <link href="https://beanbroker.github.io/2018/08/12/nodejs/nodeget/"/>
    <id>https://beanbroker.github.io/2018/08/12/nodejs/nodeget/</id>
    <published>2018-08-12T04:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="node-js-Express-with-get-amp-post"><a href="#node-js-Express-with-get-amp-post" class="headerlink" title="node.js Express with get&amp;post"></a>node.js Express with get&amp;post</h1><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><ol><li><p>req.query.id<br>-/localhost:3000/dbs?id=1 (스트링 쿼리)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">app.get(&apos;/dbs&apos;, function(req,res)&#123;</span><br><span class="line"></span><br><span class="line">  var dbs = [</span><br><span class="line">    &apos;first&apos;,</span><br><span class="line">    &apos;second&apos;,</span><br><span class="line">    &apos;third&apos;</span><br><span class="line">  ];</span><br><span class="line">  var rst = dbs[req.query.id]</span><br><span class="line">  res.send(rst);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure></li><li><p>req.params.id<br>-/localhost:3000/datas/1</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/datas/:id&apos;, function(req,res)&#123;</span><br><span class="line"></span><br><span class="line">  var datas = [</span><br><span class="line">    &apos;first&apos;,</span><br><span class="line">    &apos;second&apos;,</span><br><span class="line">    &apos;third&apos;</span><br><span class="line">  ];</span><br><span class="line">  var rst = datas[req.params.id]</span><br><span class="line">  res.send(rst);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p> 시멘틴 url 을 구글검색해서 잠깐만 보도록!</p><h2 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h2><ol><li>bodyPaser 모듈 축사</li></ol><ul><li>npm install body-parser –save</li></ul><ol start="2"><li><p>package.json 확인</p></li><li><p>소스 추가</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line"></span><br><span class="line">app.post(&apos;/create&apos;, function(req, res)&#123;</span><br><span class="line">  var title = req.body.title;</span><br><span class="line">  var description = req.body.description;</span><br><span class="line">  res.send(title+&apos;,&apos;+description);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li><p>req, res</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">req</span><br><span class="line">&#123;</span><br><span class="line">&quot;title&quot; : &quot;test&quot;,</span><br><span class="line">&quot;description&quot; : &quot;입니다&quot;</span><br><span class="line">&#125;</span><br><span class="line">res</span><br><span class="line">test,입니다</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;node-js-Express-with-get-amp-post&quot;&gt;&lt;a href=&quot;#node-js-Express-with-get-amp-post&quot; class=&quot;headerlink&quot; title=&quot;node.js Express with get&amp;a
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/categories/node-js/express/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
      <category term="express" scheme="https://beanbroker.github.io/tags/express/"/>
    
  </entry>
  
  <entry>
    <title>동적 vs  정적</title>
    <link href="https://beanbroker.github.io/2018/08/11/nodejs/dynamic/"/>
    <id>https://beanbroker.github.io/2018/08/11/nodejs/dynamic/</id>
    <published>2018-08-11T13:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.327Z</updated>
    
    <content type="html"><![CDATA[<h1 id="정적-vs-동적-테스트"><a href="#정적-vs-동적-테스트" class="headerlink" title="정적 vs 동적 테스트"></a>정적 vs 동적 테스트</h1><h1 id="정적"><a href="#정적" class="headerlink" title="정적"></a>정적</h1><blockquote><p>기본셋팅</p><ol><li>mkdir test_node</li><li>npm init 후 쭉 엔터 -&gt; yes입력</li><li>npm install –save express</li><li>해당 위치에서 ls</li><li>package.json이 보이면 정상</li><li>해당위치에서 mkdir public</li></ol></blockquote><blockquote><p>정적임을 확인해보자</p></blockquote><ol><li>cd public</li><li>vim static.html</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        </span><br><span class="line">        hello test</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><ol start="3"><li>esc 누르고 wq 엔터, cd ..</li><li>vim app.js</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">var express = require(&apos;express&apos;);</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">//아래부분이 키포인트! public을 정적으로 사용하겠다.</span><br><span class="line">app.use(express.static(&apos;public&apos;));</span><br><span class="line"></span><br><span class="line">app.get(&apos;/&apos;, function (req, res) &#123;</span><br><span class="line">  res.send(&apos;Hello test!&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.get(&apos;/login&apos;, function (req, res) &#123;</span><br><span class="line">  res.send(&apos;login plz&apos;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(3000, function () &#123;</span><br><span class="line">  console.log(&apos;app listening on port 3000!&apos;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ol start="5"><li>해당 파일 저장(esc, wq 엔터) wq-&gt;write하고 닫겠다.</li><li>node app.js 실행</li><li><a href="http://localhost:3000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000/</a> 정상작동확인</li><li><a href="http://localhost:3000/static.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000/static.html</a> hello test 확인</li><li><p>서버를 멈추지 않은 상태에서 static.html수정</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">        &lt;title&gt;&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        </span><br><span class="line">         바로 수정되네</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p><a href="http://localhost:3000/static.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000/static.html</a> 바로 수정되네 확인</p></li></ol><p>위의까지가 정적이다.</p><h2 id="동적"><a href="#동적" class="headerlink" title="동적"></a>동적</h2><ol><li><p>app.js 수정</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/dynamic&apos;, function(req, res)&#123;</span><br><span class="line">  var output = `</span><br><span class="line">  </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;    </span><br><span class="line">    hello 하하</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">  `;</span><br><span class="line">  res.send(output);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>node app.js 실행</p></li><li>localhost:3000/dynamic hello 하하 확인</li><li><p>서버를 멈추지 않은상태에서</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">app.get(&apos;/dynamic&apos;, function(req, res)&#123;</span><br><span class="line">  var output = `</span><br><span class="line">  </span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;    </span><br><span class="line">    hello 123</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line">  `;</span><br><span class="line">  res.send(output);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>localhost:3000/dynamic 시 hello 123이 아닌 하하가 확인되어진다.</p></li><li>서버를 재기동 후에는 hello 123을 확인 할수 있다.</li></ol><p>정적 vs 동적 간단 코드 설명 끝!</p><p>정적인 파일</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;정적-vs-동적-테스트&quot;&gt;&lt;a href=&quot;#정적-vs-동적-테스트&quot; class=&quot;headerlink&quot; title=&quot;정적 vs 동적 테스트&quot;&gt;&lt;/a&gt;정적 vs 동적 테스트&lt;/h1&gt;&lt;h1 id=&quot;정적&quot;&gt;&lt;a href=&quot;#정적&quot; class=&quot;
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>다양한 노드 모듈</title>
    <link href="https://beanbroker.github.io/2018/08/11/nodejs/nodemodule/"/>
    <id>https://beanbroker.github.io/2018/08/11/nodejs/nodemodule/</id>
    <published>2018-08-11T07:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.328Z</updated>
    
    <content type="html"><![CDATA[<h1 id="다양한-노드-모듈"><a href="#다양한-노드-모듈" class="headerlink" title="다양한 노드 모듈"></a>다양한 노드 모듈</h1><p>다양한 모듈들을 사용해보자 </p><h3 id="1-body-parser"><a href="#1-body-parser" class="headerlink" title="1. body-parser"></a>1. body-parser</h3><p>– 위의 모듈은 이렇게 request body 객체안의 데이터를 json형식으로 인코딩 할 수 있게 만들어 줍니다. 즉 요청 데이터 처리</p><p>아래의 내용 추가<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line"></span><br><span class="line">// parse application/x-www-form-urlencoded</span><br><span class="line">app.use(bodyParser.urlencoded(&#123; extended: false &#125;))</span><br><span class="line"></span><br><span class="line">// parse application/json</span><br><span class="line">app.use(bodyParser.json())</span><br><span class="line"></span><br><span class="line">//포스트맨에서 응답을 받기 위해서 아래와 같이 작성</span><br><span class="line">app.use(function (req, res) &#123;</span><br><span class="line">    res.setHeader(&apos;Content-Type&apos;, &apos;text/plain&apos;)</span><br><span class="line">    res.write(&apos;you posted:\n&apos;)</span><br><span class="line">    res.end(JSON.stringify(req.body, null, 2))</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>위와 같이 진행하게 되면<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">req</span><br><span class="line">&#123;</span><br><span class="line">&quot;user_id&quot; : &quot;parkijin&quot;,</span><br><span class="line">&quot;password&quot; : 123</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">res</span><br><span class="line">you posted:</span><br><span class="line">&#123;</span><br><span class="line">  &quot;user_id&quot;: &quot;parkijin&quot;,</span><br><span class="line">  &quot;password&quot;: 123</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>테스트 정상</p><h3 id="2-co"><a href="#2-co" class="headerlink" title="2. co"></a>2. co</h3><blockquote><p>콜백 지옥을 벗어나게 해주는!! 추후 코딩 예제</p></blockquote><h3 id="3-compression"><a href="#3-compression" class="headerlink" title="3. compression"></a>3. compression</h3><blockquote><p>응답 압축 지원 </p></blockquote><h3 id="4-cookie-parser"><a href="#4-cookie-parser" class="headerlink" title="4. cookie-parser"></a>4. cookie-parser</h3><blockquote><p>쿠키를 사용 할수 있게</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var cookieParser = require(&apos;cookie-parser&apos;);</span><br><span class="line"></span><br><span class="line">// load the cookie-parsing middleware</span><br><span class="line">app.use(cookieParser());</span><br></pre></td></tr></table></figure><h3 id="5-cuid"><a href="#5-cuid" class="headerlink" title="5. cuid"></a>5. cuid</h3><blockquote><p>uuid와 같은 랜덤 스트링값 생성<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var cuid = require(&apos;cuid&apos;);</span><br><span class="line">console.log( cuid() );</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="6-errorhandler"><a href="#6-errorhandler" class="headerlink" title="6. errorhandler"></a>6. errorhandler</h3><blockquote><p>에러 핸들러(<a href="http://expressjs.com/ko/guide/error-handling.html" rel="external nofollow noopener noreferrer" target="_blank">http://expressjs.com/ko/guide/error-handling.html</a>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">var bodyParser = require(&apos;body-parser&apos;);</span><br><span class="line">var methodOverride = require(&apos;method-override&apos;);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser());</span><br><span class="line">app.use(methodOverride());</span><br><span class="line">app.use(logErrors);</span><br><span class="line">app.use(clientErrorHandler);</span><br><span class="line">app.use(errorHandler);</span><br><span class="line"></span><br><span class="line">이 예에서 일반 logErrors는 요청 및 오류 정보를 stderr에 기록할 수도 있으며, 예를 들면 다음과 같습니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function logErrors(err, req, res, next) &#123;</span><br><span class="line">  console.error(err.stack);</span><br><span class="line">  next(err);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">또한 이 예에서 clientErrorHandler는 다음과 같이 정의되며, 이 경우 오류는 명시적으로 그 다음 항목으로 전달됩니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function clientErrorHandler(err, req, res, next) &#123;</span><br><span class="line">  if (req.xhr) &#123;</span><br><span class="line">    res.status(500).send(&#123; error: &apos;Something failed!&apos; &#125;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    next(err);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">“모든 오류를 처리하는(catch-all)” errorHandler 함수는 다음과 같이 구현될 수 있습니다.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function errorHandler(err, req, res, next) &#123;</span><br><span class="line">  res.status(500);</span><br><span class="line">  res.render(&apos;error&apos;, &#123; error: err &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="7-express"><a href="#7-express" class="headerlink" title="7. express"></a>7. express</h3><blockquote><p>익스프레스(Express.js)는 노드(NodeJS) 상에서 동작하는 웹 개발 프레임웍입니다. </p></blockquote><h3 id="8-express-request-id"><a href="#8-express-request-id" class="headerlink" title="8. express-request-id"></a>8. express-request-id</h3><blockquote><p>Generate UUID for request and add it to X-Request-Id header. In case request contains X-Request-Id header, uses its value instead.</p></blockquote><h3 id="9-express-winston-winston-winston-daily-rotate-file"><a href="#9-express-winston-winston-winston-daily-rotate-file" class="headerlink" title="9. express-winston ,  winston, winston-daily-rotate-file"></a>9. express-winston ,  winston, winston-daily-rotate-file</h3><blockquote><p>node기반의 logging라이브러리</p></blockquote><h3 id="10-helmet"><a href="#10-helmet" class="headerlink" title="10. helmet"></a>10. helmet</h3><blockquote><p>http 헤더설정을 바꿔주는 모듈</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const helmet = require(&apos;helmet&apos;);</span><br><span class="line">app.use(helmet());</span><br><span class="line">app.disable(&apos;x-powered-by&apos;);</span><br></pre></td></tr></table></figure><p>helmet으로 보안 관련 헤더 9개의 설정을 바꿔 줄 수 있습니다.</p><ol><li>csp: Content-Security-Policy 헤더를 설정하여 XSS(Cross-site scripting) 공격 및 기타 교차 사이트 인젝션을 예방합니다.</li><li>hidePoweredBy: X-Powered-By 헤더를 제거합니다.</li><li>hpkp: Public Key Pinning 헤더를 추가하여, 위조된 인증서를 이용한 중간자 공격을 방지합니다.</li><li>hsts: 서버에 대한 안전한(SSL/TLS를 통한 HTTP) 연결을 적용하는 Strict-Transport-Security 헤더를 설정합니다.</li><li>ieNoOpen: IE8 이상에 대해 X-Download-Options를 설정합니다.</li><li>noCache: Cache-Control 및 Pragma 헤더를 설정하여 클라이언트 측에서 캐싱을 사용하지 않도록 합니다.</li><li>noSniff: X-Content-Type-Options 를 설정하여, 선언된 콘텐츠 유형으로부터 벗어난 응답에 대한 브라우저의 MIME 가로채기를 방지합니다.</li><li>frameGuard: X-Frame-Options 헤더를 설정하여 clickjacking에 대한 보호를 제공합니다.</li><li>xssFilter: X-XSS-Protection을 설정하여 대부분의 최신 웹 브라우저에서 XSS(Cross-site scripting) 필터를 사용하도록 합니다.</li></ol><p>참조<br><a href="http://expressjs.com/ko/advanced/best-practice-security.html" rel="external nofollow noopener noreferrer" target="_blank">http://expressjs.com/ko/advanced/best-practice-security.html</a></p><h3 id="11-lodash"><a href="#11-lodash" class="headerlink" title="11. lodash"></a>11. lodash</h3><blockquote><p>배열과 객체 모두 사용가능한 메소드</p></blockquote><h3 id="12-method-override"><a href="#12-method-override" class="headerlink" title="12. method-override"></a>12. method-override</h3><blockquote><p>Method-override는 REST API에서 PUT과 DELETE 메소드를 사용할 수 있게 합니다.</p></blockquote><h3 id="13-moment"><a href="#13-moment" class="headerlink" title="13. moment"></a>13. moment</h3><blockquote><p>날짜 관련 모듈</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">console.log(`연도 =&gt; $&#123;moment().year()&#125;`)     </span><br><span class="line">//연도 =&gt; 2018</span><br><span class="line">console.log(`월 (※ 0〜11의 값) =&gt; $&#123;moment().month()&#125;`)     </span><br><span class="line">//월 (※ 0〜11의 값) =&gt; 0</span><br><span class="line">console.log(`일 =&gt; $&#123;moment().date()&#125;`)      </span><br><span class="line">//일 =&gt; 15</span><br><span class="line">console.log(`요일 =&gt; $&#123;moment().day()&#125;`)     </span><br><span class="line">//요일 =&gt; 1</span><br><span class="line">console.log(`시 =&gt; $&#123;moment().hours()&#125;`)     </span><br><span class="line">//시 =&gt; 10</span><br><span class="line">console.log(`분 =&gt; $&#123;moment().minutes()&#125;`)   </span><br><span class="line">//분 =&gt; 57</span><br><span class="line">console.log(`초 =&gt; $&#123;moment().seconds()&#125;`)   </span><br><span class="line">//초 =&gt; 2</span><br><span class="line">console.log(`밀리 초 =&gt; $&#123;moment().milliseconds()&#125;`)</span><br></pre></td></tr></table></figure><ol start="14"><li>morgan </li></ol><blockquote><p> 로그 기록을 남기는 모듈</p></blockquote><ol start="15"><li><p>mysql, mysql2 </p></li><li><p>request</p><blockquote><p>rest client, require(‘http’)보다 뛰어난듯</p></blockquote></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">var request = require(&quot;request&quot;);</span><br><span class="line"></span><br><span class="line">request(&#123; </span><br><span class="line">    uri: &quot;http://www.naver.com&quot;,</span><br><span class="line">    method: &quot;GET&quot;, </span><br><span class="line">    timeout: 10000, </span><br><span class="line">    followRedirect: true, </span><br><span class="line">    maxRedirects: 10 &#125;, </span><br><span class="line">    function(error, response, body) &#123; console.log(body); </span><br><span class="line">    &#125; </span><br><span class="line">    );</span><br></pre></td></tr></table></figure><ol start="17"><li>root-require</li></ol><blockquote><p>Node.js 에서 require(‘경로’); 를 활용하면 그 .js 파일 기준으로 상대 경로에 위치한 js 파일을 가져와 쓸 수 있습니다.</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var config = require( path + &apos;/config/db&apos; );</span><br></pre></td></tr></table></figure><ol start="18"><li>sequelize, sequelize-cli<blockquote><p>Sequelize.js는 Node.js 기반의 ORM(Object-Releational-Mapping)이다.</p></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;다양한-노드-모듈&quot;&gt;&lt;a href=&quot;#다양한-노드-모듈&quot; class=&quot;headerlink&quot; title=&quot;다양한 노드 모듈&quot;&gt;&lt;/a&gt;다양한 노드 모듈&lt;/h1&gt;&lt;p&gt;다양한 모듈들을 사용해보자 &lt;/p&gt;
&lt;h3 id=&quot;1-body-parser&quot;
      
    
    </summary>
    
      <category term="node.js" scheme="https://beanbroker.github.io/categories/node-js/"/>
    
    
      <category term="node.js" scheme="https://beanbroker.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Session 3 with redis</title>
    <link href="https://beanbroker.github.io/2018/08/05/Spring/spring_session3/"/>
    <id>https://beanbroker.github.io/2018/08/05/Spring/spring_session3/</id>
    <published>2018-08-05T07:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-boot-Redis-2"><a href="#Spring-boot-Redis-2" class="headerlink" title="Spring boot Redis 2"></a>Spring boot Redis 2</h1><p> <a href="https://beanbroker.github.io/2018/08/04/Spring/spring_session2/">https://beanbroker.github.io/2018/08/04/Spring/spring_session2/</a></p><p>위의 올린 내용을 이어서 가겠다.</p><p>우선 레디스를 날려보자<br>docker -ps를 통해 보이는 names</p><p>docker stop name<br>docker rm name</p><p>우선 간단한 컨트롤러 추가와 dependency추가</p><blockquote><p>pom.xml</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><blockquote><p>TripController</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class TripController &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired</span><br><span class="line">    TripRepository tripRepository;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/all&quot;)</span><br><span class="line">    public Object getAllTrip()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        return tripRepository.findAll();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>localhost:8080/all 을 하게되면 현재 redis에 있는 모든 trip Object를 반환한다.<br>(이를 통해 유저들의 간단한 state정도는 확인 할수 있다. 너무 많은 정보를 담지말자! 그냥 key,value만으로 사용하자)</p><p>/all 을 호출하게 될경우 아래의 결과를 얻을 수 있다.<br>[<br>  {<br>    “id”: “ae9b225e-5184-4258-bc08-5b56d6526c56”,<br>    “title”: “Test Trip”,<br>    “startedAt”: “2018-08-05T07:07:57.389+0000”<br>  }<br>]</p><p>로컬서버를 셧다운 한 후 redis cli를 통해 현재 무슨 데이터가 있는지 확인 하더라도 정상적으로 데아터가 담겨져있다. </p><p>현재 소스 기준에서 TripController에 코드를 추가해보자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@GetMapping(value = &quot;/&#123;id&#125;&quot;)</span><br><span class="line">    public Object getTripById(@PathVariable String id)&#123;</span><br><span class="line"></span><br><span class="line">        return tripRepository.findById(id);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>레디스cli를 통해 찾을수 있는 id로 localhost:8080/id 로 진행하게 될경우 현재 레디스에 올라가 있는 특정 id값의 데이터를 return받는다.(없으면 null 을 리턴한다.. 예제다.. 완벽을……….. ㅠ)</p><p>다음에 이어서 springboot에서 쓰이는 redis client jedis 를 통해 예제를 만들어 볼것이다!</p><p>미리 디펜던시를 추가하자</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;redis.clients&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;jedis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-boot-Redis-2&quot;&gt;&lt;a href=&quot;#Spring-boot-Redis-2&quot; class=&quot;headerlink&quot; title=&quot;Spring boot Redis 2&quot;&gt;&lt;/a&gt;Spring boot Redis 2&lt;/h1&gt;&lt;p&gt; &lt;
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Redis" scheme="https://beanbroker.github.io/categories/Spring/Redis/"/>
    
      <category term="Session" scheme="https://beanbroker.github.io/categories/Spring/Redis/Session/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Redis" scheme="https://beanbroker.github.io/tags/Redis/"/>
    
      <category term="Session" scheme="https://beanbroker.github.io/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Rest Api 2</title>
    <link href="https://beanbroker.github.io/2018/08/04/Spring/springboot_restapi2/"/>
    <id>https://beanbroker.github.io/2018/08/04/Spring/springboot_restapi2/</id>
    <published>2018-08-04T12:40:00.000Z</published>
    <updated>2019-07-07T08:12:45.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Rest-Api-v1-or-v2"><a href="#Rest-Api-v1-or-v2" class="headerlink" title="Rest Api v1 or v2"></a>Rest Api v1 or v2</h1><p> 실제 서비스를 운영 및 개발을 하다 보면 api 버젼이 바뀌는 경우가 있다.</p><ul><li>앱 버젼이 업그레이드되면서 같은 동작을 하는 2개의 api가 필요한 경우(사용자는 앱 업데이트를 항상 하지 않는다…..ㅠ)</li><li><p>서비스 package를 userservice.v1, userservice.v2를 만들어 사용이 가능</p><blockquote><p>VersionRestController</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/api&quot;)</span><br><span class="line">public class VersionedRestController &#123;</span><br><span class="line"></span><br><span class="line"> //@formatter:off</span><br><span class="line"> public static final String V1_MEDIA_TYPE_VALUE</span><br><span class="line">         = &quot;application/vnd.bootiful.demo-v1+json&quot;;</span><br><span class="line"></span><br><span class="line"> public static final String V2_MEDIA_TYPE_VALUE</span><br><span class="line">         = &quot;application/vnd.bootiful.demo-v2+json&quot;;</span><br><span class="line"> //@formatter:on</span><br><span class="line"></span><br><span class="line"> private enum ApiVersion &#123;</span><br><span class="line">  v1, v2</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public static class Greeting &#123;</span><br><span class="line"></span><br><span class="line">  private String how;</span><br><span class="line"></span><br><span class="line">  private String version;</span><br><span class="line"></span><br><span class="line">  public Greeting(String how, ApiVersion version) &#123;</span><br><span class="line">   this.how = how;</span><br><span class="line">   this.version = version.toString();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public String getHow() &#123;</span><br><span class="line">   return how;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  public String getVersion() &#123;</span><br><span class="line">   return version;</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @GetMapping(value = &quot;/&#123;version&#125;/hi&quot;, produces = APPLICATION_JSON_VALUE)</span><br><span class="line"> Greeting greetWithPathVariable(@PathVariable ApiVersion version) &#123;</span><br><span class="line">  return greet(version, &quot;path-variable&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> @GetMapping(value = &quot;/hi&quot;, produces = APPLICATION_JSON_VALUE)</span><br><span class="line"> Greeting greetWithHeader(@RequestHeader(&quot;X-API-Version&quot;) ApiVersion version) &#123;</span><br><span class="line">  return this.greet(version, &quot;header&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"> private Greeting greet(ApiVersion version, String how) &#123;</span><br><span class="line">  return new Greeting(how, version);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol><li><p>버젼을 url에 인코딩하면 enum인 ApiVersion으로 변환하여 핸들러 메소드에 주입. localhost:8080/api/v2/hi 로 쓸수 있다.</p></li><li><p>header에 담은 api 버전 처리</p></li></ol><p>&lt;클라우드 네이티브 자바 6장 참고&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Rest-Api-v1-or-v2&quot;&gt;&lt;a href=&quot;#Rest-Api-v1-or-v2&quot; class=&quot;headerlink&quot; title=&quot;Rest Api v1 or v2&quot;&gt;&lt;/a&gt;Rest Api v1 or v2&lt;/h1&gt;&lt;p&gt; 실제 서비스를 운
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Rest" scheme="https://beanbroker.github.io/categories/Spring/Rest/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Rest" scheme="https://beanbroker.github.io/tags/Rest/"/>
    
  </entry>
  
  <entry>
    <title>Spring boot Rest Api</title>
    <link href="https://beanbroker.github.io/2018/08/04/Spring/springboot_restapi/"/>
    <id>https://beanbroker.github.io/2018/08/04/Spring/springboot_restapi/</id>
    <published>2018-08-04T12:25:01.000Z</published>
    <updated>2019-07-07T08:12:45.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="REST-API"><a href="#REST-API" class="headerlink" title="REST API"></a>REST API</h1><p>Rest는 get,put,post,delete 등과 같은 동사와 http 헤더, 상태 코드 등 비지니스 상태 변경을 외부에 노출하는 것과 관련된 모든 것을 말한다. 좋은 Rest Api는 Http의 기능을 최대한 활용한다. Rest는 어떤 기술 표준이 아니다, 자원단위의 표시라고 생각되며 Http에 대한 일종의 아키텍처 제약사항이다. 물론 모든 것에 제약사항을 걸며 개발하기 힘들겠지만 최대한 노력해야 한다.</p><blockquote><p>스프링 부트에서 boot-start-web을 추가하면 서블릿 컨테이너와 스프링 mvc의 모들 설정을 가져 온다.(편하다.. 하하)</p></blockquote><h2 id="간단한-RestController-예제를-만들기"><a href="#간단한-RestController-예제를-만들기" class="headerlink" title="간단한 RestController 예제를 만들기"></a>간단한 RestController 예제를 만들기</h2><p>@RestController만 붙이면 해당 컨트롤러는 즉각적으로 사용이 가능한다.</p><blockquote><p>SampleController</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">class SampleController &#123;</span><br><span class="line">    @RequestMapping(&quot;/&quot;)</span><br><span class="line">    String getHello()&#123;</span><br><span class="line">        return &quot;Hello World !!&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>너무나도 쉽게 위의 코드면 헬로월드를 얻을 수 있다.</p><blockquote><p>실제 db에 접근하여 CRUD를 구현해보자</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">@RequestMapping(&quot;/v1/customers&quot;)</span><br><span class="line">public class CustomerRestController &#123;</span><br><span class="line"></span><br><span class="line"> @Autowired</span><br><span class="line"> private CustomerRepository customerRepository;</span><br><span class="line"></span><br><span class="line"> // &lt;1&gt;</span><br><span class="line"> @RequestMapping(method = RequestMethod.OPTIONS)</span><br><span class="line"> ResponseEntity&lt;?&gt; options() &#123;</span><br><span class="line"></span><br><span class="line">  //@formatter:off</span><br><span class="line">  return ResponseEntity</span><br><span class="line">   .ok()</span><br><span class="line">   .allow(HttpMethod.GET, HttpMethod.POST,</span><br><span class="line">          HttpMethod.HEAD, HttpMethod.OPTIONS,</span><br><span class="line">          HttpMethod.PUT, HttpMethod.DELETE)</span><br><span class="line">          .build();</span><br><span class="line">   //@formatter:on</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @GetMapping</span><br><span class="line"> ResponseEntity&lt;Collection&lt;Customer&gt;&gt; getCollection() &#123;</span><br><span class="line">  return ResponseEntity.ok(this.customerRepository.findAll());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // &lt;2&gt;</span><br><span class="line"> @GetMapping(value = &quot;/&#123;id&#125;&quot;)</span><br><span class="line"> ResponseEntity&lt;Customer&gt; get(@PathVariable Long id) &#123;</span><br><span class="line">  return this.customerRepository.findById(id).map(ResponseEntity::ok)</span><br><span class="line">   .orElseThrow(() -&gt; new CustomerNotFoundException(id));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @PostMapping</span><br><span class="line"> ResponseEntity&lt;Customer&gt; post(@RequestBody Customer c) &#123; // &lt;3&gt;</span><br><span class="line"></span><br><span class="line">  Customer customer = this.customerRepository.save(new Customer(c</span><br><span class="line">   .getFirstName(), c.getLastName()));</span><br><span class="line"></span><br><span class="line">  URI uri = MvcUriComponentsBuilder.fromController(getClass()).path(&quot;/&#123;id&#125;&quot;)</span><br><span class="line">   .buildAndExpand(customer.getId()).toUri();</span><br><span class="line">  return ResponseEntity.created(uri).body(customer);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // &lt;4&gt;</span><br><span class="line"> @DeleteMapping(value = &quot;/&#123;id&#125;&quot;)</span><br><span class="line"> ResponseEntity&lt;?&gt; delete(@PathVariable Long id) &#123;</span><br><span class="line">  return this.customerRepository.findById(id).map(c -&gt; &#123;</span><br><span class="line">   customerRepository.delete(c);</span><br><span class="line">   return ResponseEntity.noContent().build();</span><br><span class="line">  &#125;).orElseThrow(() -&gt; new CustomerNotFoundException(id));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // &lt;5&gt;</span><br><span class="line"> @RequestMapping(value = &quot;/&#123;id&#125;&quot;, method = RequestMethod.HEAD)</span><br><span class="line"> ResponseEntity&lt;?&gt; head(@PathVariable Long id) &#123;</span><br><span class="line">  return this.customerRepository.findById(id)</span><br><span class="line">   .map(exists -&gt; ResponseEntity.noContent().build())</span><br><span class="line">   .orElseThrow(() -&gt; new CustomerNotFoundException(id));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // &lt;6&gt;</span><br><span class="line"> @PutMapping(value = &quot;/&#123;id&#125;&quot;)</span><br><span class="line"> ResponseEntity&lt;Customer&gt; put(@PathVariable Long id, @RequestBody Customer c) &#123;</span><br><span class="line">  return this.customerRepository</span><br><span class="line">   .findById(id)</span><br><span class="line">   .map(</span><br><span class="line">    existing -&gt; &#123;</span><br><span class="line">     Customer customer = this.customerRepository.save(new Customer(existing</span><br><span class="line">      .getId(), c.getFirstName(), c.getLastName()));</span><br><span class="line">     URI selfLink = URI.create(ServletUriComponentsBuilder.fromCurrentRequest()</span><br><span class="line">      .toUriString());</span><br><span class="line">     return ResponseEntity.created(selfLink).body(customer);</span><br><span class="line">    &#125;).orElseThrow(() -&gt; new CustomerNotFoundException(id));</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>요청을 처리하는 핸들러 메소드 -&gt; @RequestMapping</li><li>GetMapping - method get, 데이터 읽기</li><li>PostMapping - method post, 데이터 넣기</li><li>DeleteMapping - method delete, 데이터 삭제(현업에서는 절대 해당 필드삭제를 자제하자, DB에 소프트 델리트가 가능하도록 필드를 설정하는 것을 지향해야한다.)</li><li>PutMapping - method put - 데이터 갱신</li></ul><blockquote><p>위의코드는 누구든 쉽게 crud를 바로 적용할수 있다.</p></blockquote><h2 id="RestController-ControllerAdvice"><a href="#RestController-ControllerAdvice" class="headerlink" title="RestController ControllerAdvice"></a>RestController ControllerAdvice</h2><p>프로젝트를 진행하며 aop가 활용되어 있는 부분을 볼수 있다. 그중 ControllerAdvice는 스프링 환경에서 default로 쓰인다고 생각할수 있다. 해당 어노테이션이 붙으면 컨트롤러로 request가 들어오기 전에 검증을 할수 있다. 물론 function단위로 exception handler를 달아 하나하나 구현도 가능하지만 공통된 error handling이 가능하다.</p><ul><li>@ExceoptionHandler 대신  @ControllerAdvice를 사용하자(공통 예외처리)</li></ul><blockquote><p>ControllerAdvice</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@ControllerAdvice(annotations = RestController.class)</span><br><span class="line">public class CustomerControllerAdvice &#123;</span><br><span class="line"></span><br><span class="line"> // &lt;1&gt;</span><br><span class="line"> private final MediaType vndErrorMediaType = MediaType</span><br><span class="line">  .parseMediaType(&quot;application/vnd.error&quot;);</span><br><span class="line"></span><br><span class="line"> // &lt;2&gt;</span><br><span class="line"> @ExceptionHandler(CustomerNotFoundException.class)</span><br><span class="line"> ResponseEntity&lt;VndErrors&gt; notFoundException(CustomerNotFoundException e) &#123;</span><br><span class="line">  return this.error(e, HttpStatus.NOT_FOUND, e.getCustomerId() + &quot;&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @ExceptionHandler(IllegalArgumentException.class)</span><br><span class="line"> ResponseEntity&lt;VndErrors&gt; assertionException(IllegalArgumentException ex) &#123;</span><br><span class="line">  return this.error(ex, HttpStatus.NOT_FOUND, ex.getLocalizedMessage());</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // &lt;3&gt;</span><br><span class="line"> private &lt;E extends Exception&gt; ResponseEntity&lt;VndErrors&gt; error(E error,</span><br><span class="line">  HttpStatus httpStatus, String logref) &#123;</span><br><span class="line">  String msg = Optional.of(error.getMessage()).orElse(</span><br><span class="line">   error.getClass().getSimpleName());</span><br><span class="line">  HttpHeaders httpHeaders = new HttpHeaders();</span><br><span class="line">  httpHeaders.setContentType(this.vndErrorMediaType);</span><br><span class="line">  return new ResponseEntity&lt;&gt;(new VndErrors(logref, msg), httpHeaders,</span><br><span class="line">   httpStatus);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> &lt;클라우드 네이티브 자바 6장 restapi 참고&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;REST-API&quot;&gt;&lt;a href=&quot;#REST-API&quot; class=&quot;headerlink&quot; title=&quot;REST API&quot;&gt;&lt;/a&gt;REST API&lt;/h1&gt;&lt;p&gt;Rest는 get,put,post,delete 등과 같은 동사와 http 헤더, 상
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Rest" scheme="https://beanbroker.github.io/categories/Spring/Rest/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Rest" scheme="https://beanbroker.github.io/tags/Rest/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Session 2 with docker</title>
    <link href="https://beanbroker.github.io/2018/08/04/Spring/spring_session2/"/>
    <id>https://beanbroker.github.io/2018/08/04/Spring/spring_session2/</id>
    <published>2018-08-04T11:30:00.000Z</published>
    <updated>2019-07-07T08:12:45.331Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot-Redis-with-docker"><a href="#Spring-Boot-Redis-with-docker" class="headerlink" title="Spring Boot Redis with docker"></a>Spring Boot Redis with docker</h2><p>Redis는 데이터 저장에 최적화된 인메모리 Key-Value 스토어로 RDBMS를 제외한 데이터 저장소 중 가장 유명하고 널리 쓰이고 있다.</p><p><a href="https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-nosql" rel="external nofollow noopener noreferrer" target="_blank">https://docs.spring.io/spring-boot/docs/current-SNAPSHOT/reference/htmlsingle/#boot-features-nosql</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Redis is a cache, message broker, and richly-featured key-value store. Spring Boot offers basic auto-configuration for the Lettuce and Jedis client libraries and the abstractions on top of them provided by Spring Data Redis.</span><br></pre></td></tr></table></figure><p>즉 레디스는 키와 밸류 스토어다가 핵심이다.</p><blockquote><p>pom.xml   dependency 추가</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">&lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure><blockquote><p>도커를 활용하여 redis를 써보장</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">왼쪽이 호스트주소:6379</span><br><span class="line">내로컬호스트의 포트를 오른쪽 컨테이너 포트에 맵핑시키겠다.  </span><br><span class="line"></span><br><span class="line">docker run -p 6379:6379 --name pkj-redis -d redis</span><br><span class="line"></span><br><span class="line">위와 같이 진행한 후 docker ps를 치면 아래와 같이 나온다.</span><br><span class="line"></span><br><span class="line">30151fd1866        redis               &quot;docker-entrypoint.s…&quot;   11 seconds ago      Up 9 seconds        0.0.0.0:6379-&gt;6379/tcp   pkj-redis</span><br></pre></td></tr></table></figure><h2 id="위의-디펜던시와-도커-또는-로컬에-redis스가-설치되었다면-소스를-짜자-아래의-소스를-복사하자"><a href="#위의-디펜던시와-도커-또는-로컬에-redis스가-설치되었다면-소스를-짜자-아래의-소스를-복사하자" class="headerlink" title="위의 디펜던시와 도커 또는 로컬에 redis스가 설치되었다면 소스를 짜자 아래의 소스를 복사하자"></a>위의 디펜던시와 도커 또는 로컬에 redis스가 설치되었다면 소스를 짜자 아래의 소스를 복사하자</h2><blockquote><p>RedisApplication</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoredisApplication &#123;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">SpringApplication.run(DemoredisApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Trip</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RedisHash(&quot;Trips&quot;)</span><br><span class="line">public class Trip &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Id</span><br><span class="line">    private String id;</span><br><span class="line">    private String title;</span><br><span class="line">    private Date startedAt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String getId() &#123;</span><br><span class="line">        return id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setId(String id) &#123;</span><br><span class="line">        this.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getTitle() &#123;</span><br><span class="line">        return title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTitle(String title) &#123;</span><br><span class="line">        this.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Date getStartedAt() &#123;</span><br><span class="line">        return startedAt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStartedAt(Date startedAt) &#123;</span><br><span class="line">        this.startedAt = startedAt;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Trip&#123;&quot; +</span><br><span class="line">                &quot;id=&apos;&quot; + id + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, title=&apos;&quot; + title + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, startedAt=&quot; + startedAt +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>TripRepository</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">public interface TripRepository extends CrudRepository&lt;Trip, String&gt;&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>DefaultDataPopulator</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Component</span><br><span class="line">public class DefaultDataPopulator implements ApplicationRunner  &#123;</span><br><span class="line"></span><br><span class="line">    @Autowired TripRepository tripRepository;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void run(ApplicationArguments args) throws Exception &#123;</span><br><span class="line">        Trip trip = new Trip();</span><br><span class="line">        trip.setTitle(&quot;Test Trip&quot;);</span><br><span class="line">        trip.setStartedAt(new Date());</span><br><span class="line">        tripRepository.save(trip);</span><br><span class="line"></span><br><span class="line">        tripRepository.findAll().forEach(m -&gt;&#123;</span><br><span class="line">            System.out.println(&quot;=============&quot;);</span><br><span class="line">            System.out.println(m.toString());</span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>어플리케이션 실행 정상작동, 콘솔에 자기가 만든 Trip Object가 정상적으로 잘 toString되어 나온다면 정상작동</p><h3 id="레디스에-어떻게-담겼는지-궁금하지-않은가"><a href="#레디스에-어떻게-담겼는지-궁금하지-않은가" class="headerlink" title="레디스에 어떻게 담겼는지 궁금하지 않은가?"></a>레디스에 어떻게 담겼는지 궁금하지 않은가?</h3><blockquote><p>내가 만든 도커에 cli를 붙여보자</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --link pkj-redis:redis --rm redis redis-cli -h redis -p 6379</span><br></pre></td></tr></table></figure><p>그리고 keys *을 치게 될경우 아래와 같은 결과를 얻을 수 있다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis:6379&gt; keys *</span><br><span class="line">1) &quot;Trips&quot;</span><br><span class="line">2) &quot;Trips:6e032b7c-bb38-456b-87fe-be016dfeb37e&quot;</span><br></pre></td></tr></table></figure><p>담겨져있는 정확한 데이터를 가져와보자<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.</span><br><span class="line">redis:6379&gt; hget Trips:6e032b7c-bb38-456b-87fe-be016dfeb37e title</span><br><span class="line"></span><br><span class="line">&quot;Test Trip&quot;</span><br><span class="line"></span><br><span class="line">2.</span><br><span class="line">redis:6379&gt; hget Trips:6e032b7c-bb38-456b-87fe-be016dfeb37e id</span><br><span class="line"></span><br><span class="line">&quot;6e032b7c-bb38-456b-87fe-be016dfeb37e&quot;</span><br><span class="line"></span><br><span class="line">3.</span><br><span class="line">redis:6379&gt; hget Trips:6e032b7c-bb38-456b-87fe-be016dfeb37e startedAt</span><br><span class="line">&quot;1533380993871&quot;</span><br></pre></td></tr></table></figure></p><p>hget all<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hgetall Trips:6e032b7c-bb38-456b-87fe-be016dfeb37e</span><br><span class="line">1) &quot;_class&quot;</span><br><span class="line">2) &quot;me.jdredis.demoredis.Trip&quot;</span><br><span class="line">3) &quot;id&quot;</span><br><span class="line">4) &quot;6e032b7c-bb38-456b-87fe-be016dfeb37e&quot;</span><br><span class="line">5) &quot;title&quot;</span><br><span class="line">6) &quot;Test Trip&quot;</span><br><span class="line">7) &quot;startedAt&quot;</span><br><span class="line">8) &quot;1533380993871&quot;</span><br></pre></td></tr></table></figure></p><p>&lt;백기선 스프링부트 유튜브 강의 참고&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Boot-Redis-with-docker&quot;&gt;&lt;a href=&quot;#Spring-Boot-Redis-with-docker&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot Redis with docker&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Redis" scheme="https://beanbroker.github.io/categories/Spring/Redis/"/>
    
      <category term="Session" scheme="https://beanbroker.github.io/categories/Spring/Redis/Session/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Redis" scheme="https://beanbroker.github.io/tags/Redis/"/>
    
      <category term="Session" scheme="https://beanbroker.github.io/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>Spring Session 1</title>
    <link href="https://beanbroker.github.io/2018/08/04/Spring/spring_session1/"/>
    <id>https://beanbroker.github.io/2018/08/04/Spring/spring_session1/</id>
    <published>2018-08-04T08:25:00.000Z</published>
    <updated>2019-07-07T08:12:45.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="스프릥-세션"><a href="#스프릥-세션" class="headerlink" title="스프릥 세션"></a>스프릥 세션</h1><p>스프링 세션과 관련하여 예제를 진행하기 전 간단한 기초를 읽고 가즈아!</p><h4 id="HTTP-프로토콜-특징"><a href="#HTTP-프로토콜-특징" class="headerlink" title="HTTP 프로토콜 특징"></a>HTTP 프로토콜 특징</h4><ol><li>Connecionless</li><li>Stateless</li></ol><p>비연결성, 상태값을 가지지 않는다</p><p>동작형태 -&gt; 클라이언트/서버( 요청과 응답 &lt;-포인트)<br>비연결성(상태 노유지 프로토콜)-&gt; 소왓? -&gt; 무작위를 상대로하는 서비스로는 최적이지<br>메시지 교환형태 프로토콜이야(클라이언트와 서버간의 http메세지 주고받으며 통신)</p><p>stateless라며? -&gt; 쿠키 등장!</p><h4 id="쿠키와-세션"><a href="#쿠키와-세션" class="headerlink" title="쿠키와 세션"></a>쿠키와 세션</h4><p>-&gt; Http의 약점 보완</p><ul><li>쿠키(클라이언트 로컬에 저장되는 키와 값) - 클라이언트 파일로 저장</li><li>세션(서버에서 일정 시간동안 저장되는 키와 값) - 서버에 저장</li></ul><p>세션은 서버의 자원을 사용하기 때문에 마구잡이로 사용하다보면 서버 메모리가 감당할수 없게 되고 그로 인해 서비스 장애 또는 서비스가 느려 질수 있다. 그래서 쿠기를 사용해야 한당.</p><p>그럼 캐시는 모야?<br>캐시는 이미지(css,js파일 등 사용자 브라우저 즉 클라이언트 브라우저에 저장되는 것)</p><h2 id="스프링-세션으로-HTTP-세션-다뤄보기"><a href="#스프링-세션으로-HTTP-세션-다뤄보기" class="headerlink" title="스프링 세션으로 HTTP 세션 다뤄보기"></a>스프링 세션으로 HTTP 세션 다뤄보기</h2><p>spring.io/projects/spring-session 참고하자!</p><p>스프링 세션은 세션 동기화를 위해 SPI(Service Provide interface)에 의존하는 서블릿 HTTP세션을 쉽게 대체 할수 있다.<br>SPI 구현체</p><ul><li>레디스</li><li>아파치 지오드</li><li>헤이즐캐스트</li><li>etc…</li></ul><p>스프링 세션은 HTTP 세션 코드를 만질 필요 없이 스프링 세션을 설치해주기만 하면 된다.(간단하다.)<br>여러 개의 어플리케이션 노드가 실행되면 동일한 레디스 클러스터를 통해 세션 정보를 공유하므로 레디스의 강력한 상태 복제 기능의 혜택을 누릴수 있다.</p><blockquote><p>스프링 세션 장점</p><ul><li>웹소켓을 통해 오가는 HTTP세션 지원</li><li>편리안 로그아웃 기능 지원</li><li>논리적으로 동일하지 않는 세션에 대한 접근 지원!! 즉 2개의 분리된 애플리케이션이 동일한 세션 상태를 공유 할수 있다.(놀랍지 않은가?)</li></ul></blockquote><p><a href="https://spring.io/blog/2015/03/01/the-portable-cloud-ready-http-session" rel="external nofollow noopener noreferrer" target="_blank">https://spring.io/blog/2015/03/01/the-portable-cloud-ready-http-session</a> 참고</p><h4 id="스프링-부트-세션-예제"><a href="#스프링-부트-세션-예제" class="headerlink" title="스프링 부트 세션 예제"></a>스프링 부트 세션 예제</h4><blockquote><p>application.properties</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">server.session.timeout=5</span><br><span class="line"></span><br><span class="line">##아래의 설정을 해두지 않으면</span><br><span class="line">##Invocation of init method failed; nested exception is java.lang.IllegalArgumentException: No session repository could be auto-configured, check your configuration (session store type is &apos;null&apos;) 과 같은 에러 발생</span><br><span class="line">spring.session.store-type=none</span><br></pre></td></tr></table></figure><blockquote><p>Application with SessionController</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class DemoApplication &#123;</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">  SpringApplication.run(DemoApplication.class, args);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">class SessionController &#123;</span><br><span class="line"></span><br><span class="line"> private final String ip;</span><br><span class="line"></span><br><span class="line"> @Autowired</span><br><span class="line"> public SessionController(@Value(&quot;$&#123;CF_INSTANCE_IP:127.0.0.1&#125;&quot;) String ip) &#123;</span><br><span class="line">  this.ip = ip;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @GetMapping(&quot;/hi&quot;)</span><br><span class="line"> Map&lt;String, String&gt; uid(HttpSession session) &#123;</span><br><span class="line">  // &lt;1&gt;</span><br><span class="line">  UUID uid = Optional.ofNullable(UUID.class.cast(session.getAttribute(&quot;uid&quot;)))</span><br><span class="line">   .orElse(UUID.randomUUID());</span><br><span class="line">  session.setAttribute(&quot;uid&quot;, uid);</span><br><span class="line"></span><br><span class="line">  Map&lt;String, String&gt; m = new HashMap&lt;&gt;();</span><br><span class="line">  m.put(&quot;instance_ip&quot;, this.ip);</span><br><span class="line">  m.put(&quot;uuid&quot;, uid.toString());</span><br><span class="line">  return m;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>/hi를 호출하게 되면<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 20180804172306</span><br><span class="line">// http://localhost:8080/hi</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;instance_ip&quot;: &quot;127.0.0.1&quot;,</span><br><span class="line">  &quot;uuid&quot;: &quot;d90d218d-8eec-46e6-ad18-58da10ed5d27&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>위의 데이터를 얻을수 있다.<br>(HTTP세션에 uid 값이 없으면  uuid를 생성하여 uid값으로 저장한다.) 몇 번을 동일하게 호출하더라도 같은 uuid 값을 얻을수 있다. 물론 서버를 재기동하게 되면 다른 uuid 값이 나온다.</p><p>&lt;네이티브 클라우드 자바 5장 참고&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;스프릥-세션&quot;&gt;&lt;a href=&quot;#스프릥-세션&quot; class=&quot;headerlink&quot; title=&quot;스프릥 세션&quot;&gt;&lt;/a&gt;스프릥 세션&lt;/h1&gt;&lt;p&gt;스프링 세션과 관련하여 예제를 진행하기 전 간단한 기초를 읽고 가즈아!&lt;/p&gt;
&lt;h4 id=&quot;HT
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Session" scheme="https://beanbroker.github.io/categories/Spring/Session/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Session" scheme="https://beanbroker.github.io/tags/Session/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Test Code 3</title>
    <link href="https://beanbroker.github.io/2018/08/04/Spring/test_code3/"/>
    <id>https://beanbroker.github.io/2018/08/04/Spring/test_code3/</id>
    <published>2018-08-04T06:25:00.000Z</published>
    <updated>2019-07-07T08:12:45.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBootTest로-서블릿-컨테이너-설정"><a href="#SpringBootTest로-서블릿-컨테이너-설정" class="headerlink" title="SpringBootTest로 서블릿 컨테이너 설정"></a>SpringBootTest로 서블릿 컨테이너 설정</h2><ul><li>스프링 부트는 자동 설정의 일부만을 테스트 슬라이스로 가져와서 테스트에 활용할 수 있도록 다양한 테스트 어노테이션을 제공한다.</li><li>대부분 health check를 확인 할수 있는 HTTP 종단점을 사용하기 위해서는 서블릿 컨테이너를 필요로 한다.</li><li>@SpringBootTest 어노테이션은 어플리케이션 컨텍스트를 전체를 사용하도록 설정된 통합 테스트를 할때 사용되어야한다.</li><li>@SpringBootTest로 테스트 컨텍스트에 맞는 서블릿 환경을 설정 할수 있다.(webEnvironment 속성을 통해 어플리케이션 임베디드 서블릿 컨테이너를 설정 할수 있다.)</li></ul><h3 id="SpringBootTest의-webEnvironment-속성"><a href="#SpringBootTest의-webEnvironment-속성" class="headerlink" title="@SpringBootTest의 webEnvironment 속성"></a>@SpringBootTest의 webEnvironment 속성</h3><ul><li>MOCK - WebApplicationContext를 로딩 하고 모의 서블릿 환경을 제공</li><li>DEFINED_PORT - EmbeddedWebApplicationContext를 로딩, 지정된 포트 번호를 통해 실제 서브릿 환경 제공</li><li>RANDOM_PORT - EmbeddedWebApplicationContext를 로딩, random 포트 번호를 통해 실제 서브릿 환경 제공</li><li>NONE - 어플리케이션 컨텍스트를 로딩하지만 서블릿 환경을 제공하지 않는다,</li></ul><h2 id="슬라이스"><a href="#슬라이스" class="headerlink" title="슬라이스"></a>슬라이스</h2><p>스프링 부트는 어플리케이션 테스트 슬라이스를 위한 여러 가지 어노테이션을 제공한다.</p><h1 id="JsonTest"><a href="#JsonTest" class="headerlink" title="@JsonTest"></a>@JsonTest</h1><p>JsonTest를 사용하면 Json직렬/역질렬화 테스트가 가능하다.</p><blockquote><p>user.json<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;username&quot;: &quot;user&quot;,</span><br><span class="line">  &quot;firstName&quot;: &quot;Jack&quot;,</span><br><span class="line">  &quot;lastName&quot;: &quot;Frost&quot;,</span><br><span class="line">  &quot;email&quot;: &quot;jfrost@example.com&quot;,</span><br><span class="line">  &quot;createdAt&quot;: 12345,</span><br><span class="line">  &quot;lastModified&quot;: 12346,</span><br><span class="line">  &quot;id&quot;: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>UserTests<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@JsonTest</span><br><span class="line">public class UserTests &#123;</span><br><span class="line"></span><br><span class="line"> private User user;</span><br><span class="line"></span><br><span class="line">//JackSon 에서 제공하는 AssetJ 기반의 Json테스터를 주입</span><br><span class="line"> @Autowired</span><br><span class="line"> private JacksonTester&lt;User&gt; json;</span><br><span class="line"></span><br><span class="line"> @Before</span><br><span class="line"> public void setUp() throws Exception &#123;</span><br><span class="line">  User user = new User(&quot;user&quot;, &quot;Jack&quot;, &quot;Frost&quot;, &quot;jfrost@example.com&quot;);</span><br><span class="line">  user.setId(0L);</span><br><span class="line">  user.setCreatedAt(12345L);</span><br><span class="line">  user.setLastModified(12346L);</span><br><span class="line"></span><br><span class="line">  this.user = user;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @Test</span><br><span class="line"> public void serializeJson() throws Exception &#123;</span><br><span class="line">     //유저를 Json으로 변화하고 비교</span><br><span class="line">  assertThat(this.json.write(user)).isEqualTo(&quot;user.json&quot;);</span><br><span class="line">  assertThat(this.json.write(user)).isEqualToJson(&quot;user.json&quot;);</span><br><span class="line">  assertThat(this.json.write(user)).hasJsonPathStringValue(&quot;@.username&quot;);</span><br><span class="line"></span><br><span class="line">//실제 Json결과가 예상한 속성값과 일치하는지 판정</span><br><span class="line">  assertJsonPropertyEquals(&quot;@.username&quot;, &quot;user&quot;);</span><br><span class="line">  assertJsonPropertyEquals(&quot;@.firstName&quot;, &quot;Jack&quot;);</span><br><span class="line">  assertJsonPropertyEquals(&quot;@.lastName&quot;, &quot;Frost&quot;);</span><br><span class="line">  assertJsonPropertyEquals(&quot;@.email&quot;, &quot;jfrost@example.com&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @Test</span><br><span class="line"> public void deserializeJson() throws Exception &#123;</span><br><span class="line">  String content = &quot;&#123;\&quot;username\&quot;: \&quot;user\&quot;, \&quot;firstName\&quot;: \&quot;Jack\&quot;, &quot;</span><br><span class="line">   + &quot;\&quot;lastName\&quot;: \&quot;Frost\&quot;, \&quot;email\&quot;: \&quot;jfrost@example.com\&quot;&#125;&quot;;</span><br><span class="line"></span><br><span class="line">  assertThat(this.json.parse(content)).isEqualTo(</span><br><span class="line">   new User(&quot;user&quot;, &quot;Jack&quot;, &quot;Frost&quot;, &quot;jfrost@example.com&quot;));</span><br><span class="line">  assertThat(this.json.parseObject(content).getUsername()).isEqualTo(&quot;user&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> private void assertJsonPropertyEquals(String key, String value)</span><br><span class="line">  throws java.io.IOException &#123;</span><br><span class="line">  assertThat(this.json.write(user)).extractingJsonPathStringValue(key)</span><br><span class="line">   .isEqualTo(value);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>isEqualTo에 user.json의 파일 참조를 통한 테스트</p><h1 id="WebMvcTest"><a href="#WebMvcTest" class="headerlink" title="WebMvcTest"></a>WebMvcTest</h1><p>스프링 MVC 컨트롤러의 테스트 지원한다</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@WebMvcTest(AccountController.class)</span><br><span class="line">public class AccountControllerTest &#123;</span><br><span class="line"></span><br><span class="line"> //목 객체 주입</span><br><span class="line"> @Autowired</span><br><span class="line"> private MockMvc mvc;</span><br><span class="line"></span><br><span class="line"> //목 객체 생성</span><br><span class="line"> @MockBean</span><br><span class="line"> private AccountService accountService;</span><br><span class="line"></span><br><span class="line"> @Test</span><br><span class="line"> public void getUserAccountsShouldReturnAccounts() throws Exception &#123;</span><br><span class="line">  String content = &quot;[&#123;\&quot;username\&quot;: \&quot;user\&quot;, \&quot;accountNumber\&quot;: \&quot;123456789\&quot;&#125;]&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  given(this.accountService.getUserAccounts()).willReturn(</span><br><span class="line">   Collections.singletonList(new Account(&quot;user&quot;, &quot;123456789&quot;)));</span><br><span class="line"></span><br><span class="line">  //Mock client를 활용하여 실제 컨트롤러가 반환하는 값과 테스트에서 예상한 값이 일치하는지 판정한다.</span><br><span class="line">  this.mvc.perform(get(&quot;/v1/accounts&quot;).accept(MediaType.APPLICATION_JSON))</span><br><span class="line">   .andExpect(status().isOk()).andExpect(content().json(content));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MockMvc는 스프링 MVC 테스트 프레임워크에서 제공되는 클래스이다. 클라이언트의 요청은 테스트 대상 컨트롤러로 전달되는 역할을 한다.</p><h1 id="DataJpaTest"><a href="#DataJpaTest" class="headerlink" title="DataJpaTest"></a>DataJpaTest</h1><ul><li>JPA테스트 지원 및 내장 인매모리 데이터베이스도 제공</li><li>TestEntityManager는 JPA엔티티 테스트에서 자주 사용되는 구문과 유틸성 메소드를 추가하여 만들어졌다.</li></ul><p>&lt;네이티브 클라우드 자바 4장 테스트 참고&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringBootTest로-서블릿-컨테이너-설정&quot;&gt;&lt;a href=&quot;#SpringBootTest로-서블릿-컨테이너-설정&quot; class=&quot;headerlink&quot; title=&quot;SpringBootTest로 서블릿 컨테이너 설정&quot;&gt;&lt;/a&gt;Sprin
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/categories/Spring/Junit/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Test Code 2</title>
    <link href="https://beanbroker.github.io/2018/08/04/Spring/test_code2/"/>
    <id>https://beanbroker.github.io/2018/08/04/Spring/test_code2/</id>
    <published>2018-08-04T05:25:00.000Z</published>
    <updated>2019-07-07T08:12:45.332Z</updated>
    
    <content type="html"><![CDATA[<h2 id="테스트-슬라이드"><a href="#테스트-슬라이드" class="headerlink" title="테스트 슬라이드"></a>테스트 슬라이드</h2><ul><li>스프링 부트 1.4 이후에는 애플리케이션을 구성하는 레이어의 일부만 선택적으로 자동 설절할 수 있는 테스트 슬라익스 개념이  도입</li><li>테스트 슬라이스를 활용하면 진행중인 프로젝트를 다른 스타터 프로젝트로 쉽게 교체할수 있다. 스프링 데이터 jpa를 스프링 데이터 몽고디비로 교체하더라도 스프링 데이터와 관계 없는 통합 테스트에는 아무런 영향을 미치지 않는다.<ul><li>(스프링 데이터 jpa에서는 entity를 스프링 데이터 몽고디비에서는 document라는 어노테이션을 쓴다.)</li></ul></li></ul><h2 id="모의-기법-활용-mocking-기법-or-목-기법"><a href="#모의-기법-활용-mocking-기법-or-목-기법" class="headerlink" title="모의 기법 활용(mocking 기법) or 목 기법"></a>모의 기법 활용(mocking 기법) or 목 기법</h2><p>모의 기법은 단위 테스트를 다루는 컨텍스트에서 통용되는 용어이다. 모듈 내에서 협력하는 컴포넌트를 우리가 원하는 방식으로 동작하도록 제어할 수 있는 모의 객체로 대체하면 테스트 중인 시스템과 협력하는 컴포넌트를 격리할수 있다.<br>(스프링 컨텍스트가 필요하나 전혀 필요하지 않느냐가 통합테스트와 단위 테스트를 구분하는 기준이 된다는 점은 동일하다 - 전편에도 나와있음)</p><blockquote><p>스프링 부트는 @MockBean 어노테이션을 지원하며 해당 어노테이션은 어플리케이션 컨텍스트에 있는 빈을 대신하는 모의 모키토 빈을 만들고, 어플리케이션 컨텍스트에 있는 원래 빈의 동작을 끄라고 스프링에게 지시한다.</p></blockquote><blockquote><p>application.yml setting<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">  jpa:</span><br><span class="line">    show_sql: false</span><br><span class="line">    database: H2</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:h2:mem:testdb;DB_CLOSE_ON_EXIT=FALSE</span><br><span class="line">    initialize: true</span><br><span class="line">    platform: H2</span><br><span class="line">  data:</span><br><span class="line">    rest:</span><br><span class="line">      base-path: /api</span><br><span class="line">user-service.host: $&#123;USER_SERVICE_HOST:localhost:8081&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>@MockBean어노테이션으로 UserService와 AccountRepository에 대한 모의빈 생성과 활용</p></blockquote><blockquote><p>AccountServiceTests<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.MOCK)</span><br><span class="line">public class AccountServiceTests &#123;</span><br><span class="line"></span><br><span class="line">//유저 서비스를 대신하는 모의 객체를 생성</span><br><span class="line"> @MockBean</span><br><span class="line"> private UserService userService;</span><br><span class="line"></span><br><span class="line"> @MockBean</span><br><span class="line"> private AccountRepository accountRepository;</span><br><span class="line"></span><br><span class="line"> private AccountService accountService;</span><br><span class="line"></span><br><span class="line"> @Before</span><br><span class="line"> public void before() &#123;</span><br><span class="line"></span><br><span class="line">     //모의 객체를 파라미터로 전달하고 새로운 어카운트 서비스 생성</span><br><span class="line">  accountService = new AccountService(accountRepository, userService);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @Test</span><br><span class="line"> public void getUserAccountsReturnsSingleAccount() throws Exception &#123;</span><br><span class="line">  given(this.accountRepository.findAccountsByUsername(&quot;user&quot;)).willReturn(</span><br><span class="line">   Collections</span><br><span class="line">    .singletonList(new Account(&quot;user&quot;, new AccountNumber(&quot;123456789&quot;))));</span><br><span class="line">  given(this.userService.getAuthenticatedUser()).willReturn(</span><br><span class="line">   new User(0L, &quot;user&quot;, &quot;John&quot;, &quot;Doe&quot;));</span><br><span class="line"></span><br><span class="line">  List&lt;Account&gt; actual = accountService.getUserAccounts();</span><br><span class="line"></span><br><span class="line">  assertThat(actual).size().isEqualTo(1);</span><br><span class="line">  assertThat(actual.get(0).getUsername()).isEqualTo(&quot;user&quot;);</span><br><span class="line">  assertThat(actual.get(0).getAccountNumber()).isEqualTo(</span><br><span class="line">   new AccountNumber(&quot;123456789&quot;));</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>@RunWith(SpringRunner.class)만 붙어 있고 @SpringBootTest 어노테이션이 없으므로 테스트가 실행 될때 애플리케이션 컨텍스트가 로딩되지 않는다. 즉 단위테스트이다.<br>위의 클래스에서 테스트되는 컴포넌트를 AccountService 빈이고 해당 서비스 빈은 UserSerivce빈을 통해 협력한다.</p><p>위의 코드를 돌리면 콘솔에서 문제를 발견 할수 없지만</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> assertThat(actual).size().isEqualTo(1);</span><br><span class="line"> 위의 코드를 아래와 같이 바꾸게 된다면</span><br><span class="line"> </span><br><span class="line"> assertThat(actual).size().isEqualTo(3);</span><br><span class="line"></span><br><span class="line">아래와 같이 확인 할수 있다.</span><br><span class="line">org.junit.ComparisonFailure: </span><br><span class="line">Expected :3</span><br><span class="line">Actual   :1</span><br><span class="line"></span><br><span class="line">AssertThat 말고도 다양한 방법이 있다. 직접 구글링해서 찾아보도록 하자</span><br></pre></td></tr></table></figure><p>&lt;클라우드 네이티브 자바 4장 테스트 참고&gt;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;테스트-슬라이드&quot;&gt;&lt;a href=&quot;#테스트-슬라이드&quot; class=&quot;headerlink&quot; title=&quot;테스트 슬라이드&quot;&gt;&lt;/a&gt;테스트 슬라이드&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;스프링 부트 1.4 이후에는 애플리케이션을 구성하는 레이어의 일부만 선택
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/categories/Spring/Junit/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>intelliJ 단축키 지원 플러그인</title>
    <link href="https://beanbroker.github.io/2018/07/31/intelliJ/key_promotor/"/>
    <id>https://beanbroker.github.io/2018/07/31/intelliJ/key_promotor/</id>
    <published>2018-07-31T09:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="인텔리제이-강제로-단축키-외우게-하는-플러그인"><a href="#인텔리제이-강제로-단축키-외우게-하는-플러그인" class="headerlink" title="인텔리제이 강제로 단축키 외우게 하는 플러그인"></a>인텔리제이 강제로 단축키 외우게 하는 플러그인</h1><blockquote><p>Key Promotor</p></blockquote><p>단축키를 쓰라고 강요하는 플러그인, 단축키를 누르지 않으면 누를때까지 누르지 않은 count가 증가하는 똑똑한 플러그인</p><p>기타 자세한 설명은 설치 후 바로 알수 있다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;인텔리제이-강제로-단축키-외우게-하는-플러그인&quot;&gt;&lt;a href=&quot;#인텔리제이-강제로-단축키-외우게-하는-플러그인&quot; class=&quot;headerlink&quot; title=&quot;인텔리제이 강제로 단축키 외우게 하는 플러그인&quot;&gt;&lt;/a&gt;인텔리제이 강제로 단
      
    
    </summary>
    
      <category term="intelliJ" scheme="https://beanbroker.github.io/categories/intelliJ/"/>
    
    
      <category term="intelliJ" scheme="https://beanbroker.github.io/tags/intelliJ/"/>
    
  </entry>
  
  <entry>
    <title>PlantUML을 활용한 다이어그</title>
    <link href="https://beanbroker.github.io/2018/07/30/etc/plantuml/"/>
    <id>https://beanbroker.github.io/2018/07/30/etc/plantuml/</id>
    <published>2018-07-30T09:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="PlantUML-다이어그램-그려보기"><a href="#PlantUML-다이어그램-그려보기" class="headerlink" title="PlantUML 다이어그램 그려보기"></a>PlantUML 다이어그램 그려보기</h1><blockquote><p>다양한 웹 사이트에서 다이어그램을 그려주지만 비쥬얼스튜디오 코드에서 다이어그램을 쉽고 바로 preView를 할 수 있는 방법이 있다.</p></blockquote><ul><li>시퀀스 다이어그램</li><li>유즈케이스 다이어그램</li><li>클래스 다이어그램</li><li>액티비티 다이어그램 </li><li>컴포넌트 다이어그램</li><li>상태 다이어그램</li><li>객체 다이어그램</li><li>위의 다이어그램들을 제외하고도 지원을 한다(<a href="http://plantuml.com/" rel="external nofollow noopener noreferrer" target="_blank">http://plantuml.com/</a>)</li></ul><ol><li>비쥬얼스튜디오 설치</li><li>PlantUML 플러그인 설치</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://marketplace.visualstudio.com/items?itemName=jebbs.plantuml</span><br></pre></td></tr></table></figure><blockquote><p>위의 각종 예제들이 사용방법이 자세하게 나와 있으며, 확장자명은 .wsd이다</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;PlantUML-다이어그램-그려보기&quot;&gt;&lt;a href=&quot;#PlantUML-다이어그램-그려보기&quot; class=&quot;headerlink&quot; title=&quot;PlantUML 다이어그램 그려보기&quot;&gt;&lt;/a&gt;PlantUML 다이어그램 그려보기&lt;/h1&gt;&lt;bloc
      
    
    </summary>
    
      <category term="ETC" scheme="https://beanbroker.github.io/categories/ETC/"/>
    
    
      <category term="ETC" scheme="https://beanbroker.github.io/tags/ETC/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Test Code 1</title>
    <link href="https://beanbroker.github.io/2018/07/28/Spring/test_code1/"/>
    <id>https://beanbroker.github.io/2018/07/28/Spring/test_code1/</id>
    <published>2018-07-28T13:25:00.000Z</published>
    <updated>2019-07-07T08:12:45.332Z</updated>
    
    <content type="html"><![CDATA[<h1 id="테스트-코드의-필요성"><a href="#테스트-코드의-필요성" class="headerlink" title="테스트 코드의 필요성"></a>테스트 코드의 필요성</h1><ol><li>테스트 코드는 빠른 피드백 순환을 가능하게 하는 가장 중요한 수단이다.</li><li>점점 애플리케이션들이 분산화되며 테스트를 효율적으로 작성하려고 노력한다,</li><li>개발자들이 예측할수 있는 모든 케이스를 테스트 코드로 짜도록 노력해야한다. 예측 할수 있는 예외케이스를 Throw하는 거와 별개 진행을 해야한다.(다만 시간이 오래걸리는 단점.. 테스트 코드가 마치 비지니스 로직을 짜는 것과 같은 느낌이..)</li><li>비니지스 로직이 변경되었을 경우 기존에 완성해둔 테스트 코드로 사이드 이펙트 확인이 가능하다.</li><li>그외 다양한 유명한 개발자분들이 가장 중요하다 확신하고 있다.</li></ol><h1 id="스프링-부트-애플리케이션-테스트"><a href="#스프링-부트-애플리케이션-테스트" class="headerlink" title="스프링 부트 애플리케이션 테스트"></a>스프링 부트 애플리케이션 테스트</h1><blockquote><p>스프링 부트 애플리케이션의 테스트는 크게 단위 테스트와 통합 테스트로 구분할수 있다.</p><ul><li>통합 테스트 - 실행 중에 스프링 애플리케이션 컨텍스트에 접근하는 모든 테스트</li><li>단위 테스트 - 스프링 애플리케이션 컨텍스트에 의존하지 않는 테스트</li></ul></blockquote><h2 id="간단한-Context-로딩-테스트"><a href="#간단한-Context-로딩-테스트" class="headerlink" title="간단한 Context 로딩 테스트"></a>간단한 Context 로딩 테스트</h2><blockquote><p>Application.java 는 기본과 동일하게 쓰면되서 코드를 첨부하지 않음</p></blockquote><blockquote><p>ApplicationTest<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@SpringBootTest</span><br><span class="line">@RunWith(SpringRunner.class)</span><br><span class="line">public class ApplicationContextTests &#123;</span><br><span class="line"></span><br><span class="line"> @Autowired</span><br><span class="line"> private ApplicationContext applicationContext;</span><br><span class="line"></span><br><span class="line"> @Test</span><br><span class="line"> public void contextLoads() throws Throwable &#123;</span><br><span class="line">  Assert.assertNotNull(&quot;컨텍스트 로딩 테스트 정상작동확인&quot;,</span><br><span class="line">   this.applicationContext);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><ul><li>@Run?With - JUnit에 사용, 어떤 테스트 러너전략을 사용할지 알려준다.</li><li>@SpringBootTest - 스프링 부트 테스트 클래스임을 알려줌, 테스트 클래스가 애플리케이션 컨텍스트를 로딩할수 있게 해주는 ContextConfiguration 탐색을 지원 (해당 어노테이션에 아무 파라미터도 지정되지 않을 경우 SpringConfiguration 어노테이션에 의한 탐색방식으로 어플리케이션 컨텍스트 로딩)</li></ul><p>(SpringConfiguration은 패키지 루트에서부터 빈을 탐색) </p><p>‘클라우드 네이티브 자바 4장 테스트 참고’</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;테스트-코드의-필요성&quot;&gt;&lt;a href=&quot;#테스트-코드의-필요성&quot; class=&quot;headerlink&quot; title=&quot;테스트 코드의 필요성&quot;&gt;&lt;/a&gt;테스트 코드의 필요성&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;테스트 코드는 빠른 피드백 순환을 가능하게 하는 가
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/categories/Spring/Junit/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Junit" scheme="https://beanbroker.github.io/tags/Junit/"/>
    
  </entry>
  
  <entry>
    <title>스프링 부트 properties 사용법</title>
    <link href="https://beanbroker.github.io/2018/07/28/Spring/spring_properties/"/>
    <id>https://beanbroker.github.io/2018/07/28/Spring/spring_properties/</id>
    <published>2018-07-28T13:00:01.000Z</published>
    <updated>2019-07-07T08:12:45.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Configration"><a href="#Spring-Configration" class="headerlink" title="Spring Configration"></a>Spring Configration</h1><p>스프링 설정 properties 또는 yml을 쓴다하더라도 동일하게 작동한다.</p><blockquote><p>application.yml 셋팅<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configuration:</span><br><span class="line">  projectName : Spring Boot</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="normal-case"><a href="#normal-case" class="headerlink" title="normal case"></a>normal case</h3><blockquote><p>Application.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) &#123;</span><br><span class="line">  new ClassPathXmlApplicationContext(&quot;classic.xml&quot;);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> public void setConfigurationProjectName(String pn) &#123;</span><br><span class="line">  LogFactory.getLog(getClass()).info(&quot;the configuration project name is &quot; + pn);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p>위와같이 실행이  the configuration project name is Spring Framework 결과를 얻을 수 있다.</p><h3 id="여러가지-방법으로-스프링-properties가져오기"><a href="#여러가지-방법으로-스프링-properties가져오기" class="headerlink" title="여러가지 방법으로 스프링 properties가져오기"></a>여러가지 방법으로 스프링 properties가져오기</h3><blockquote><p>resource folder 밑에 some.properties 생성<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configuration.projectName=Spring Framework 테스트</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>Application.java</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">// 1번</span><br><span class="line">@Configuration</span><br><span class="line">@PropertySource(&quot;some.properties&quot;)</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line"> private final Log log = LogFactory.getLog(getClass());</span><br><span class="line"></span><br><span class="line"> public static void main(String[] args) throws Throwable &#123;</span><br><span class="line">  new AnnotationConfigApplicationContext(Application.class);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 2번</span><br><span class="line"> @Bean</span><br><span class="line"> static PropertySourcesPlaceholderConfigurer pspc() &#123;</span><br><span class="line">  return new PropertySourcesPlaceholderConfigurer();</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 3번</span><br><span class="line"> @Value(&quot;$&#123;configuration.projectName&#125;&quot;)</span><br><span class="line"> private String fieldValue;</span><br><span class="line"></span><br><span class="line"> // 4번</span><br><span class="line"> @Autowired</span><br><span class="line"> Application(@Value(&quot;$&#123;configuration.projectName&#125;&quot;) String pn) &#123;</span><br><span class="line">  log.info(&quot;Application constructor: &quot; + pn);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 5번</span><br><span class="line"> @Value(&quot;$&#123;configuration.projectName&#125;&quot;)</span><br><span class="line"> void setProjectName(String projectName) &#123;</span><br><span class="line">  log.info(&quot;setProjectName: &quot; + projectName);</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 6번</span><br><span class="line"> @Autowired</span><br><span class="line"> void setEnvironment(Environment env) &#123;</span><br><span class="line">  log.info(&quot;setEnvironment: &quot; + env.getProperty(&quot;configuration.projectName&quot;));</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> // 7번</span><br><span class="line"> @Bean</span><br><span class="line"> InitializingBean both(Environment env,</span><br><span class="line">  @Value(&quot;$&#123;configuration.projectName&#125;&quot;) String projectName) &#123;</span><br><span class="line">  return () -&gt; &#123;</span><br><span class="line">   log.info(&quot;@Bean with both dependencies (projectName): &quot; + projectName);</span><br><span class="line">   log.info(&quot;@Bean with both dependencies (env): &quot;</span><br><span class="line">    + env.getProperty(&quot;configuration.projectName&quot;));</span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> @PostConstruct</span><br><span class="line"> void afterPropertiesSet() throws Throwable &#123;</span><br><span class="line">  log.info(&quot;fieldValue: &quot; + this.fieldValue);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@PropertySourcePlaceholderConfigure는 BeanFactoryPostProcessor의 구현체이다. 스프링 생명 주기에서 ‘초기에’ 호출되어 하므로 static으로 빈을 등록해야한다.</p><p>3번 처럼 @Value픞 클래스 필드에 사용이 가능<br>4번 처럼 생성자에 파라미터 사용 가능<br>5번 처럼 겟셋이 가능<br>6번 처럼 스프링 Enviroment 객체를 통해 속성값을 직접 가져올수 있다.<br>7번 처럼 @Value를 @Bean이 붙은 메소드의 파라미터에 사용할수 있다.</p><h2 id="참고-클라우드-네이티브-자바-3장"><a href="#참고-클라우드-네이티브-자바-3장" class="headerlink" title="- 참고 클라우드 네이티브 자바 3장"></a>- 참고 클라우드 네이티브 자바 3장</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Configration&quot;&gt;&lt;a href=&quot;#Spring-Configration&quot; class=&quot;headerlink&quot; title=&quot;Spring Configration&quot;&gt;&lt;/a&gt;Spring Configration&lt;/h1&gt;&lt;p&gt;스프
      
    
    </summary>
    
      <category term="Spring" scheme="https://beanbroker.github.io/categories/Spring/"/>
    
      <category term="Java" scheme="https://beanbroker.github.io/categories/Spring/Java/"/>
    
    
      <category term="Spring" scheme="https://beanbroker.github.io/tags/Spring/"/>
    
      <category term="Java" scheme="https://beanbroker.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>maven deafult setting use true or false</title>
    <link href="https://beanbroker.github.io/2018/07/28/intelliJ/mavenlocasetting/"/>
    <id>https://beanbroker.github.io/2018/07/28/intelliJ/mavenlocasetting/</id>
    <published>2018-07-28T06:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h1 id="메이븐-로컬-셋팅-디폴트-셋팅하기"><a href="#메이븐-로컬-셋팅-디폴트-셋팅하기" class="headerlink" title="메이븐 로컬 셋팅 디폴트 셋팅하기"></a>메이븐 로컬 셋팅 디폴트 셋팅하기</h1><ol><li>cd /Users/username/.m2</li><li>vim setting.xml</li><li>profile 안에 있는activeByDefault true or false 직접입력 후 저장</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;메이븐-로컬-셋팅-디폴트-셋팅하기&quot;&gt;&lt;a href=&quot;#메이븐-로컬-셋팅-디폴트-셋팅하기&quot; class=&quot;headerlink&quot; title=&quot;메이븐 로컬 셋팅 디폴트 셋팅하기&quot;&gt;&lt;/a&gt;메이븐 로컬 셋팅 디폴트 셋팅하기&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="intelliJ" scheme="https://beanbroker.github.io/categories/intelliJ/"/>
    
      <category term="maven" scheme="https://beanbroker.github.io/categories/intelliJ/maven/"/>
    
    
      <category term="intelliJ" scheme="https://beanbroker.github.io/tags/intelliJ/"/>
    
      <category term="maven" scheme="https://beanbroker.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>intelliJ 로컬maven repo사용하기</title>
    <link href="https://beanbroker.github.io/2018/07/28/intelliJ/mavensetting/"/>
    <id>https://beanbroker.github.io/2018/07/28/intelliJ/mavensetting/</id>
    <published>2018-07-28T06:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.324Z</updated>
    
    <content type="html"><![CDATA[<h2 id="m2-밑에-있는-maven파일과-상관없이-진행하는-법"><a href="#m2-밑에-있는-maven파일과-상관없이-진행하는-법" class="headerlink" title=".m2 밑에 있는 maven파일과 상관없이 진행하는 법"></a>.m2 밑에 있는 maven파일과 상관없이 진행하는 법</h2><ol><li>preperence (단축키 command ,)</li><li>maven 검색</li><li>local repository (메이븐 환경설정 마지막 부분) override check</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;m2-밑에-있는-maven파일과-상관없이-진행하는-법&quot;&gt;&lt;a href=&quot;#m2-밑에-있는-maven파일과-상관없이-진행하는-법&quot; class=&quot;headerlink&quot; title=&quot;.m2 밑에 있는 maven파일과 상관없이 진행하는 법&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="intelliJ" scheme="https://beanbroker.github.io/categories/intelliJ/"/>
    
      <category term="maven" scheme="https://beanbroker.github.io/categories/intelliJ/maven/"/>
    
    
      <category term="intelliJ" scheme="https://beanbroker.github.io/tags/intelliJ/"/>
    
      <category term="maven" scheme="https://beanbroker.github.io/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>Hello pkj</title>
    <link href="https://beanbroker.github.io/2018/07/26/hello-world/"/>
    <id>https://beanbroker.github.io/2018/07/26/hello-world/</id>
    <published>2018-07-26T06:50:00.000Z</published>
    <updated>2019-07-07T08:12:45.322Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" rel="external nofollow noopener noreferrer" target="_blank">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" rel="external nofollow noopener noreferrer" target="_blank">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" rel="external nofollow noopener noreferrer" target="_blank">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" rel="external nofollow noopener noreferrer" target="_blank">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" rel="external nofollow noopener noreferrer" target="_blank">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" rel="external nofollow noopener noreferrer" target="_blank">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" rel="external nofollow noopener noreferrer" target="_blank">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" rel="external nofollow noopener noreferrer" target="_blank">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; rel=&quot;external nofollow noopener noreferrer&quot; target=&quot;_blank&quot;&gt;Hexo&lt;/a&gt;! This is your very first post.
      
    
    </summary>
    
      <category term="HEXO" scheme="https://beanbroker.github.io/categories/HEXO/"/>
    
    
      <category term="HEXO" scheme="https://beanbroker.github.io/tags/HEXO/"/>
    
  </entry>
  
</feed>
